###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        19/Nov/2024  13:16:00
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  XCategory\Service\Reveal\Reveal.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        Reveal.obj -l ..\listings\Reveal.lst XCategory\Service\Reveal\Reveal.c
#    List file    =  ..\listings\Reveal.lst
#    Object file  =  Reveal.obj
#
###############################################################################

C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Service\Reveal\Reveal.c
      1          /**
      2           *  @file
      3           *
      4           *  @brief      Reveal modules implementations.
      5           *
      6           *  @details    Reveal is the application protocol that runs over LLC (Wide or Win) under the SAP 4
      7           *
      8           *  @section    Applicable_Documents
      9           *                  List here all the applicable documents if needed. <tr>
     10           *
     11           *  $Header: $
     12           *
     13           *  @copyright  Copyright 2019-$Date$. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
     14           */
     15          //---------------------------------------------------------------------------------------------------------------------
     16          //---------------------------------------------------------------------------------------------------------------------
     17          //-------------------------------------- Include Files ----------------------------------------------------------------
     18          #include "C_Extensions.h"
     19          #include "Compiler_defs.h"
     20          #include "Reveal.h"
     21          #include "Reveal_prv.h"

  #if (API006HMI_FEATURE == ENABLED)
       ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Service\Reveal\Reveal_prv.h",23  Remark[Pe193]: 
          zero used for undefined preprocessing identifier "API006HMI_FEATURE"

  PACKED typedef struct
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Common\SettingFile\SettingFile.h",39  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_APPLIANCE_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",42  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_BOARD_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",50  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_TEST_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",141  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_SERVICE_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",150  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_PROJECT_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",183  Remark[Pe082]: 
          storage class is not first

  #if (API039MOTIONCTRL_FEATURE == ENABLED)
       ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Service\Reveal\Reveal_prv.h",68  Remark[Pe193]: 
          zero used for undefined preprocessing identifier
          "API039MOTIONCTRL_FEATURE"

   \                                 In section .text, align 4, keep-with-next
   \   __absolute struct <unnamed> const REVEAL_PARSER[10]
   \                     REVEAL_PARSER:
   \   00000000   0x01 0xDD          DC8 1, 221, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 API221MotionCtrl__CommandParser, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \   00000010   0x01 0x14          DC8 1, 20, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0H, SRAPI020Safety__FeedbackParser, 0H
   \              0x........   
   \              0x00000000   
   \   00000020   0x01 0x13          DC8 1, 19, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 API019ProductInfo__CommandParser
   \   00000028   0x........         DC32 API019ProductInfo__FeedbackParser, API019ProductInfo__AckParser
   \              0x........   
   \   00000030   0x01 0x0D          DC8 1, 13, 0, 0
   \              0x00 0x00    
   \   00000034   0x........         DC32 API013RemoteFunction__CommandParser, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \   00000040   0x01 0x0B          DC8 1, 11, 0, 0
   \              0x00 0x00    
   \   00000044   0x........         DC32 API011AppCtrl__CommandParser, API011AppCtrl__FeedbackParser, 0H
   \              0x........   
   \              0x00000000   
   \   00000050   0x01 0x0A          DC8 1, 10, 0, 0
   \              0x00 0x00    
   \   00000054   0x........         DC32 API010PollVar__CommandParser, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \   00000060   0x01 0x09          DC8 1, 9, 0, 0
   \              0x00 0x00    
   \   00000064   0x........         DC32 API009System__CommandParser, API009System__FeedbackParser
   \              0x........   
   \   0000006C   0x........         DC32 API009System__AckParser
   \   00000070   0x01 0x07          DC8 1, 7, 0, 0
   \              0x00 0x00    
   \   00000074   0x........         DC32 API007Data__CommandParser, API007Data__FeedbackParser
   \              0x........   
   \   0000007C   0x........         DC32 API007Data__AckParser
   \   00000080   0x01 0x03          DC8 1, 3, 0, 0
   \              0x00 0x00    
   \   00000084   0x........         DC32 API003Disc__CommandParser, API003Disc__FeedbackParser, 0H
   \              0x........   
   \              0x00000000   
   \   00000090   0x01 0xDC          DC8 1, 220, 0, 0
   \              0x00 0x00    
   \   00000094   0x........         DC32 APIMotorControl__CommandParser, APIMotorControl__FeedbackParser
   \              0x........   
   \   0000009C   0x00000000         DC32 0H

      #if (API039MOTIONCTRL_FEATURE == ENABLED)
           ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Service\Reveal\Reveal_prv.h",119  Remark[Pe193]: 
          zero used for undefined preprocessing identifier
          "API039MOTIONCTRL_FEATURE"

      #if (API006HMI_FEATURE == ENABLED)
           ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Service\Reveal\Reveal_prv.h",167  Remark[Pe193]: 
          zero used for undefined preprocessing identifier "API006HMI_FEATURE"

   \                                 In section .text, align 4, keep-with-next
   \   __absolute unsigned char const POSSIBLE_BLOCKED_APIS_LIST[19]
   \                     POSSIBLE_BLOCKED_APIS_LIST:
   \   00000000   0x03 0x04          DC8 3, 4, 5, 7, 9, 10, 11, 12, 13, 17, 18, 19, 20, 220, 221, 141, 144
   \              0x05 0x07    
   \              0x09 0x0A    
   \              0x0B 0x0C    
   \              0x0D 0x11    
   \              0x12 0x13    
   \              0x14 0xDC    
   \              0xDD 0x8D    
   \              0x90         
   \   00000011   0x93 0x97          DC8 147, 151, 0
   \              0x00         

  PACKED typedef struct
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\SFUpdater\SFUpdater_defs.h",30  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\SFUpdater\SFUpdater.h",35  Remark[Pe082]: 
          storage class is not first
     22          #include <string.h>
     23          
     24          //-------------------------------------- PUBLIC (Variables) -----------------------------------------------------------
     25          
     26          //-------------------------------------- PRIVATE (Variables, Constants & Defines) -------------------------------------
     27          
     28          typedef enum
     29          {
     30              API001_PUBLISH_ACK          = 1,
     31              API001_PUBLISH_HEARTBEAT    = 2,
     32              API001_SET_HEARTBEAT        = 3,
     33              API001_PUBLISH_MEM          = 4,
     34              API001_READ_MEM_24B         = 5,
     35              API001_READ_EE              = 6,
     36              API001_SEND_EVENTS          = 7,
     37              API001_PUBLISH_EE           = 8,
     38              API001_READ_MEM_32B         = 9,
     39              API001_PUBLISH_HEARTBEAT_PERIOD  = 16,
     40              API001_MAX_MESSAGE_SIZE     = 17,
     41              API001_BLOCK_MESSAGES       = 18,
     42              API001_PUBLISH_WAKEUP       = 30,
     43              API001_PUBLISH_ACK_WAKEUP   = 31
     44          }API001CORE_OPCODE_TYPE;
     45          
     46          #define REVEAL_MSG_OVERHEAD     (sizeof(REVEAL_COMMAND_TYPE) - REVEAL_PAYLOAD_SIZE)
     47          

   \                                 In section .bss, align 4
     48          static REVEAL_MSG_TYPE Reveal_Adapter_Buffer;
   \                     Reveal_Adapter_Buffer:
   \   00000000                      DS8 76
   \   0000004C                      DS8 72
   \   00000094                      DS8 16
   \   000000A4                      DS8 1036
   \   000004B0                      DS8 348
   \   0000060C                      DS8 1
   \   0000060D                      DS8 1
   \   0000060E                      DS8 1
   \   0000060F                      DS8 1
   \   00000610                      DS8 1
   \   00000611                      DS8 1
   \   00000612                      DS8 1
   \   00000613                      DS8 1
   \   00000614                      DS8 1
   \   00000615                      DS8 1
   \   00000616                      DS8 1
   \   00000617                      DS8 1
   \   00000618                      DS8 2
   \   0000061A                      DS8 2
   \   0000061C                      DS8 2
   \   0000061E                      DS8 2
   \   00000620                      DS8 2
   \   00000622                      DS8 2
   \   00000624                      DS8 16
   \   00000634                      DS8 76
     49          
     50          #ifndef REVEAL_MAX_PAYLOAD_CALLBACK
     51              #define REVEAL_MAX_PAYLOAD_CALLBACK(node,max_size)
     52          #endif
     53          
     54          
     55          #ifndef REVEAL_SYNCH_PROCESS
     56              #define REVEAL_SYNCH_PROCESS DISABLED
     57          #endif
     58          
     59          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_DISABLED)
     60              static uint8 Reveal_Queue_Reentry_Counter;
     61          #endif
     62          
     63          
     64          #if (REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_INTERNAL_EXTERNAL)
     65              static const REVEAL_ROUTING_MODE_TYPE REVEAL_ROUNTING_TABLE[15] = {ROUTING_TABLE_LIST};
     66              #if (REVEAL_DYNAMIC_ROUTER_FEATURE == ENABLED)
     67                  static REVEAL_ROUTING_MODE_TYPE Reveal_Routing[15];
     68              #else
     69                  #define Reveal_Routing REVEAL_ROUNTING_TABLE
     70              #endif
     71          #endif
     72          
     73          #ifndef REVEALQUEUE_QUEUE_OVERFLOW_NORMAL_EXCEPTION
     74              #define REVEALQUEUE_QUEUE_OVERFLOW_NORMAL_EXCEPTION(api,op)
     75          #endif
     76          
     77          #ifndef REVEAL_READ_EEPROM_FEATURE
     78              #define REVEAL_READ_EEPROM_FEATURE DISABLED
     79          #endif
     80          
     81          #if (REVEAL_READ_EEPROM_FEATURE == ENABLED)
     82              #ifndef REVEAL_EEPROM_READ
     83                  #define REVEAL_EEPROM_READ(source,address,size)
     84              #endif
     85          #endif
     86          
     87          #ifndef REVEAL__ACK_INCOMING_MESSAGE
     88              #define REVEAL__ACK_INCOMING_MESSAGE(node,api,op_code,reason_code)
     89          #endif
     90          
     91          #ifndef REVEAL__SENDEVENTS
     92              #define REVEAL__SENDEVENTS(api,op)
     93          #endif
     94          
     95          #ifndef REVEAL_QUEUE_DEBUG
     96              #define REVEAL_QUEUE_DEBUG  DISABLED
     97          #endif
     98          
     99          typedef struct
    100          {
    101              REVEAL_RECIPE_STATUS_TYPE   reason_code;
    102              uint8 api;
    103              uint8 op_code;
    104              uint8 node;
    105          }REVEAL_ACK_TYPE;
    106          
    107          static REVEAL_COMMAND_TYPE Reveal_Single_Queue;
    108          static REVEAL_COMMAND_TYPE Reveal_Queue[REVEAL_QUEUE_SIZE];
    109          static uint8 Reveal_Queue_Write;
    110          static uint8 Reveal_Queue_Read;
    111          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
    112              static uint8 Reveal_Queue_Retry;
    113              static uint16 Reveal_Queue_Timeout;
    114          #endif
    115          
    116          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
    117              static REVEAL_COMMAND_TYPE Reveal_Queue_Priority[REVEAL_QUEUE_PRIORITY_SIZE];
    118              static uint8 Reveal_Queue_Priority_Write;
    119              static uint8 Reveal_Queue_Priority_Read;

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
    120              static uint8 Reveal_Queue_Priority_Retry;

   \                                 In section .bss, align 2
   \   00000000                      DS8 2
    121              static uint16 Reveal_Queue_Priority_Timeout;
    122              #if (REVEAL_QUEUE_DEBUG == ENABLED)
    123                  static uint8 Reveal_Priority_Min_Space;
    124              #endif
    125          #endif
    126          
    127          typedef enum
    128          {
    129              REVEAL_OUTGOING_STATE_IDLE,
    130              REVEAL_OUTGOING_STATE_SENDING,
    131              REVEAL_OUTGOING_STATE_TIMING
    132          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
    133              ,
    134              REVEAL_OUTGOING_STATE_SENDING_PRIORITY,
    135              REVEAL_OUTGOING_STATE_TIMING_PRIORITY
    136          #endif
    137          } REVEAL_OUTGOING_STATE_TYPE;
    138          
    139          #ifndef REVEAL_ACK_FIFO
    140              #define REVEAL_ACK_FIFO 4
    141          #endif
    142          
    143          #ifndef REVEAL_FULL_SERACH_INTERNAL
    144              #define REVEAL_FULL_SERACH_INTERNAL    TRUE
    145          #endif
    146          
    147          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
    148              static REVEAL_ACK_TYPE Reveal_Ack_Buffer[REVEAL_ACK_FIFO];
    149              static uint8 Reveal_Ack_Write;
    150              static uint8 Reveal_Ack_Read;
    151              static REVEAL_OUTGOING_STATE_TYPE Reveal_Outgoing_State;
    152          #endif
    153          
    154          #define REVEAL_NUM_PARSERS      (sizeof(REVEAL_PARSER)/sizeof(REVEAL_PARSER_TYPE))
    155          static uint16 Reveal_Heartbeat_Timer;
    156          static uint16 Reveal_Heartbeat_Counter;
    157          static uint16 Reveal_1s;
    158          static uint8 Reveal_Aux;
    159          #define REVEAL_1S_TICKS     1000
    160          #define REVEAL_API_OP_SIZE  2
    161          #if (REVEAL_QUEUE_DEBUG == ENABLED)
    162              static uint8 Reveal_Min_Space;
    163          #endif
    164          
    165          
    166          static uint16 Reveal_Node_Status;
    167          static BOOL_TYPE Reveal_Drop_flag;
    168          
    169          // Macro defines depth of recursive Reveal__Queue (if REVEAL_ROUTER_INTERNAL_ONLY is defined.)
    170          #ifndef    REVEAL_QUEUE_MAX_REENTRIES
    171              #define REVEAL_QUEUE_MAX_REENTRIES          3
    172          #endif
    173          
    174          #ifndef   REVEAL_EXCEPTION_REENTRY_CNT_OVERLOADED
    175              #define REVEAL_EXCEPTION_REENTRY_CNT_OVERLOADED(api_id,op_code)
    176          #endif
    177          
    178          static uint8 Reveal_Heartbeat_Node_Counter[15];
    179          
    180          //! Track the amount of time left to block messages (5ms increments)
    181          static uint16 Reveal_Blocked_Messages_Remaining_Time;
    182          
    183          //! Convert the block messages time in seconds to ticks managed by the module
    184          //! Value is based on 5ms call rate where the blocked messages remaining time is updated
    185          #define REVEAL_BLOCKED_MESSAGES_TIME_TO_TICKS   200 // 200 = 1s / 5ms
    186          
    187          //! Determines if any messages are currently being blocked
    188          #define MESSAGE_BLOCKING_ACTIVE() (Reveal_Blocked_Messages_Remaining_Time != 0)
    189          
    190          //! Define the byte offset (0-based) in the Block Messages payload where the API/Opcode pairs start
    191          #define BLOCKED_API_OPCODE_BYTE_OFFSET_START 3
    192          
    193          //! Define the number of bytes in the Block Messages payload that contain the information about a single api and opcode
    194          #define BLOCKED_API_OPCODE_NUM_BYTES         5
    195          
    196          //! Variable to keep track of which APIs/Opcodes are blocked
    197          //! Each entry in the array corresponds to an API in the POSSIBLE_BLOCKED_APIS_LIST table
    198          //! Each bit within a single entry represents whether the opcode for the API is blocked (1) or not (0)
    199          static uint32 Reveal_Blocked_Messages[ELEMENTS_IN_ARRAY(POSSIBLE_BLOCKED_APIS_LIST)];
    200          
    201          //-------------------------------------- PRIVATE (Function Prototypes) ------------------------------------------------
    202          static BOOL_TYPE IsMessageBlocked(uint8 api, uint8 opcode);
    203          static void RevealHandlerIncomming(void);
    204          static void RevealHandlerOutgoing(void);
    205          
    206          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
    207              static void DropMessageFromQueue(uint8 priority);
    208          #endif
    209          static BOOL_TYPE RequestedAPIsCanBeBlocked(uint8 * pt, uint8 number_of_bytes);
    210          static void Reveal1sTasks(void);
    211          static void RevealHandleAckParser(uint8 node, uint8 api, uint8 op_code, REVEAL_RECIPE_STATUS_TYPE reason, uint8 full_search);
    212          static REVEAL_RECIPE_STATUS_TYPE RevealHandleParser(REVEAL_MSG_TYPE * pt,uint8 feedback, uint8 address_checking, uint8 full_search);
    213          static void UpdateBlockedMessagesTimer(void);
    214          
    215          //=====================================================================================================================
    216          //-------------------------------------- Public Functions -------------------------------------------------------------
    217          //=====================================================================================================================
    218          
    219          //---------------------------------------------------------------------------------------------------------------------
    220          /**
    221           *  @brief      It Initializes the module Reveal and its variables
    222           *
    223           */

   \                                 In section .text, align 4, keep-with-next
    224          void Reveal__Initialize(void)
    225          {
   \                     Reveal__Initialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    226              REVEAL_COMMAND_TYPE * new_msg;
    227          
    228              Reveal_Queue_Write = 0;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF884 0x060C      STRB     R0,[R4, #+1548]
    229              Reveal_Queue_Read = 0;
   \   0000000C   0xF884 0x060D      STRB     R0,[R4, #+1549]
    230              Reveal_Heartbeat_Timer = REVEAL_INITIAL_HEARTBEAT;
    231              Reveal_Heartbeat_Counter = 0;
    232              Reveal_1s = 0;
    233          
    234              // Initialize the timers
    235              memset(Reveal_Heartbeat_Node_Counter,(REVEAL_INITIAL_HEARTBEAT*3)+1,sizeof(Reveal_Heartbeat_Node_Counter));
   \   00000010   0x2210             MOVS     R2,#+16
   \   00000012   0x2005             MOVS     R0,#+5
   \   00000014   0xF8A4 0x061A      STRH     R0,[R4, #+1562]
   \   00000018   0x210F             MOVS     R1,#+15
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF8A4 0x061C      STRH     R0,[R4, #+1564]
   \   00000020   0xF8A4 0x061E      STRH     R0,[R4, #+1566]
   \   00000024   0xF204 0x6024      ADDW     R0,R4,#+1572
   \   00000028   0x.... 0x....      BL       __aeabi_memset4
    236          
    237              #if (REVEAL_QUEUE_DEBUG == ENABLED)
    238                  Reveal_Min_Space = REVEAL_QUEUE_SIZE;
   \   0000002C   0x200F             MOVS     R0,#+15
   \   0000002E   0xF884 0x0616      STRB     R0,[R4, #+1558]
    239              #endif
    240              #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
    241                  Reveal_Ack_Write = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF884 0x0612      STRB     R0,[R4, #+1554]
    242                  Reveal_Ack_Read = 0;
   \   00000038   0xF884 0x0613      STRB     R0,[R4, #+1555]
    243              #endif
    244              #if (REVEAL_QUEUE_PRIORITY == ENABLED)
    245                  Reveal_Queue_Priority_Write = 0;
   \   0000003C   0xF884 0x060F      STRB     R0,[R4, #+1551]
    246                  Reveal_Queue_Priority_Read = 0;
   \   00000040   0xF884 0x0610      STRB     R0,[R4, #+1552]
    247                  Reveal_Queue_Priority_Retry = 0;
    248                  Reveal_Queue_Priority_Timeout = 0;
    249                  #if (REVEAL_QUEUE_DEBUG == ENABLED)
    250                      Reveal_Priority_Min_Space = REVEAL_QUEUE_PRIORITY_SIZE;
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0xF884 0x0611      STRB     R0,[R4, #+1553]
    251                  #endif
    252              #endif
    253              #if ((REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_INTERNAL_EXTERNAL) && (REVEAL_DYNAMIC_ROUTER_FEATURE == ENABLED))
    254                  memcpy((uint8 *)Reveal_Routing,(uint8 *)REVEAL_ROUNTING_TABLE,sizeof(Reveal_Routing));
    255              #endif
    256              #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_DISABLED)
    257                  Reveal_Queue_Reentry_Counter = 0;
    258              #endif
    259          
    260              // Modified initialization to set broadcast and the node itself
    261              Reveal_Node_Status = 0x8000;
   \   0000004A   0xF44F 0x4000      MOV      R0,#+32768
   \   0000004E   0xF8A4 0x0620      STRH     R0,[R4, #+1568]
    262              BIT_SET(Reveal_Node_Status,LLC_OWN_ADDRESS);
   \   00000052   0x.... 0x....      BL       Win__GetAddress
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0xF8B4 0x1620      LDRH     R1,[R4, #+1568]
   \   0000005C   0xFA02 0xF000      LSL      R0,R2,R0
   \   00000060   0x4308             ORRS     R0,R0,R1
   \   00000062   0xF8A4 0x0620      STRH     R0,[R4, #+1568]
    263              Reveal_Drop_flag = FALSE;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xF884 0x0617      STRB     R0,[R4, #+1559]
    264          
    265              new_msg = Reveal__NewFeedback(0x1,API001_PUBLISH_WAKEUP, REVEAL_BROADCAST_NODE,0);
   \   0000006C   0xF8B4 0x0622      LDRH     R0,[R4, #+1570]
   \   00000070   0xB1E0             CBZ.N    R0,??Reveal__Initialize_0
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable20_1
   \   00000076   0x2001             MOVS     R0,#+1
   \                     ??Reveal__Initialize_1: (+1)
   \   00000078   0xF811 0x2B01      LDRB     R2,[R1], #+1
   \   0000007C   0x2A01             CMP      R2,#+1
   \   0000007E   0xBF1E             ITTT     NE 
   \   00000080   0x1C40             ADDNE    R0,R0,#+1
   \   00000082   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   00000086   0x2A01             CMPNE    R2,#+1
   \   00000088   0xBF1E             ITTT     NE 
   \   0000008A   0x1C40             ADDNE    R0,R0,#+1
   \   0000008C   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   00000090   0x2A01             CMPNE    R2,#+1
   \   00000092   0xD004             BEQ.N    ??Reveal__Initialize_2
   \   00000094   0x1C40             ADDS     R0,R0,#+1
   \   00000096   0xB2C0             UXTB     R0,R0
   \   00000098   0x2813             CMP      R0,#+19
   \   0000009A   0xD3ED             BCC.N    ??Reveal__Initialize_1
   \   0000009C   0xE006             B.N      ??Reveal__Initialize_0
   \                     ??Reveal__Initialize_2: (+1)
   \   0000009E   0xB2C0             UXTB     R0,R0
   \   000000A0   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \   000000A4   0xF8D0 0x0634      LDR      R0,[R0, #+1588]
   \   000000A8   0x0040             LSLS     R0,R0,#+1
   \   000000AA   0xD436             BMI.N    ??Reveal__Initialize_3
   \                     ??Reveal__Initialize_0: (+1)
   \   000000AC   0xF894 0x060C      LDRB     R0,[R4, #+1548]
   \   000000B0   0x1C41             ADDS     R1,R0,#+1
   \   000000B2   0xB2C9             UXTB     R1,R1
   \   000000B4   0x290F             CMP      R1,#+15
   \   000000B6   0xBFA8             IT       GE 
   \   000000B8   0x2100             MOVGE    R1,#+0
   \   000000BA   0xF884 0x1615      STRB     R1,[R4, #+1557]
   \   000000BE   0xF894 0x160D      LDRB     R1,[R4, #+1549]
   \   000000C2   0x4288             CMP      R0,R1
   \   000000C4   0xBF27             ITTEE    CS 
   \   000000C6   0xF1C0 0x000E      RSBCS    R0,R0,#+14
   \   000000CA   0x1808             ADDCS    R0,R1,R0
   \   000000CC   0x1A08             SUBCC    R0,R1,R0
   \   000000CE   0x1E40             SUBCC    R0,R0,#+1
   \   000000D0   0xF894 0x2616      LDRB     R2,[R4, #+1558]
   \   000000D4   0xB2C0             UXTB     R0,R0
   \   000000D6   0x4290             CMP      R0,R2
   \   000000D8   0xBF88             IT       HI 
   \   000000DA   0x4610             MOVHI    R0,R2
   \   000000DC   0xF884 0x0616      STRB     R0,[R4, #+1558]
   \   000000E0   0xF894 0x0615      LDRB     R0,[R4, #+1557]
   \   000000E4   0x4288             CMP      R0,R1
   \   000000E6   0xD018             BEQ.N    ??Reveal__Initialize_3
   \   000000E8   0x2001             MOVS     R0,#+1
   \   000000EA   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   000000EE   0x2100             MOVS     R1,#+0
   \   000000F0   0x201E             MOVS     R0,#+30
   \   000000F2   0xF884 0x004D      STRB     R0,[R4, #+77]
   \   000000F6   0xF884 0x104F      STRB     R1,[R4, #+79]
   \   000000FA   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000FE   0xF040 0x000F      ORR      R0,R0,#0xF
   \   00000102   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   00000106   0xF000 0x009F      AND      R0,R0,#0x9F
   \   0000010A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000010E   0xF884 0x004E      STRB     R0,[R4, #+78]
    266              if (new_msg != (REVEAL_COMMAND_TYPE *)NULL)
    267              {
    268                 Reveal__QueueCommand(new_msg);
   \   00000112   0xF104 0x004C      ADD      R0,R4,#+76
   \   00000116   0x.... 0x....      BL       Reveal__QueueCommand
    269              }
    270          
    271              // Clear blocked api/opcodes
    272              memset(Reveal_Blocked_Messages, 0, sizeof(Reveal_Blocked_Messages));
   \                     ??Reveal__Initialize_3: (+1)
   \   0000011A   0x214C             MOVS     R1,#+76
   \   0000011C   0xF204 0x6034      ADDW     R0,R4,#+1588
   \   00000120   0x.... 0x....      BL       __aeabi_memclr4
    273          
    274              // Clear blocked messages timer to prevent any messages from being blocked after a reset
    275              Reveal_Blocked_Messages_Remaining_Time = 0;
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0xF8A4 0x0622      STRH     R0,[R4, #+1570]
    276          }
   \   0000012A   0xBD10             POP      {R4,PC}          ;; return
    277          
    278          //---------------------------------------------------------------------------------------------------------------------
    279          /**
    280           * @brief This handler manages the incoming and outgoing message threads
    281           * @details This must be called at every 5ms from the MainCommunicationThread()
    282           */

   \                                 In section .text, align 2, keep-with-next
    283          void Reveal__Handler(void)
    284          {
   \                     Reveal__Handler: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    285              RevealHandlerIncomming();
   \   00000004   0x.... 0x....      BL       RevealHandlerIncomming
    286              RevealHandlerOutgoing();
   \   00000008   0x.... 0x....      BL       RevealHandlerOutgoing
    287              UpdateBlockedMessagesTimer();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000010   0xF8B0 0x1622      LDRH     R1,[R0, #+1570]
   \   00000014   0xB161             CBZ.N    R1,??Reveal__Handler_0
   \   00000016   0x1E49             SUBS     R1,R1,#+1
   \   00000018   0xF8A0 0x1622      STRH     R1,[R0, #+1570]
   \   0000001C   0xB289             UXTH     R1,R1
   \   0000001E   0xB939             CBNZ.N   R1,??Reveal__Handler_0
   \   00000020   0xB001             ADD      SP,SP,#+4
   \   00000022   0xF85D 0xEB04      POP      {LR}
   \   00000026   0x214C             MOVS     R1,#+76
   \   00000028   0xF200 0x6034      ADDW     R0,R0,#+1588
   \   0000002C   0x.... 0x....      B.W      __aeabi_memclr4
    288          }
   \                     ??Reveal__Handler_0: (+1)
   \   00000030   0xB001             ADD      SP,SP,#+4
   \   00000032   0xBD00             POP      {PC}             ;; return
    289          
    290          //---------------------------------------------------------------------------------------------------------------------
    291          /**
    292           * @brief This API manages the 1ms Heart-beat
    293           */

   \                                 In section .text, align 4, keep-with-next
    294          void Reveal__Handler1ms(void)
    295          {
   \                     Reveal__Handler1ms: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    296          #if (REVEAL_1S_EXTERNAL_REFFERENCE == DISABLED)
    297              Reveal_1s++;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000006   0xF8B4 0x061E      LDRH     R0,[R4, #+1566]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0xF8A4 0x061E      STRH     R0,[R4, #+1566]
    298              if (Reveal_1s >= REVEAL_1S_TICKS)
   \   00000010   0xB280             UXTH     R0,R0
   \   00000012   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000016   0xF2C0 0x807D      BLT.W    ??Reveal__Handler1ms_0
    299              {
    300                  Reveal_1s = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF8A4 0x061E      STRH     R0,[R4, #+1566]
    301                  Reveal1sTasks();
   \   00000020   0xF8B4 0x061A      LDRH     R0,[R4, #+1562]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD075             BEQ.N    ??Reveal__Handler1ms_0
   \   00000028   0xF8B4 0x161C      LDRH     R1,[R4, #+1564]
   \   0000002C   0x1C49             ADDS     R1,R1,#+1
   \   0000002E   0xF8A4 0x161C      STRH     R1,[R4, #+1564]
   \   00000032   0xB289             UXTH     R1,R1
   \   00000034   0x4281             CMP      R1,R0
   \   00000036   0xD353             BCC.N    ??Reveal__Handler1ms_1
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF8A4 0x061C      STRH     R0,[R4, #+1564]
   \   0000003E   0xF8B4 0x0622      LDRH     R0,[R4, #+1570]
   \   00000042   0xB198             CBZ.N    R0,??Reveal__Handler1ms_2
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable20_1
   \   00000048   0xF05F 0x0001      MOVS.W   R0,#+1
   \                     ??Reveal__Handler1ms_3: (+1)
   \   0000004C   0xF811 0x2B01      LDRB     R2,[R1], #+1
   \   00000050   0x2A01             CMP      R2,#+1
   \   00000052   0xBF1C             ITT      NE 
   \   00000054   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   00000058   0x2A01             CMPNE    R2,#+1
   \   0000005A   0xBF1C             ITT      NE 
   \   0000005C   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   00000060   0x2A01             CMPNE    R2,#+1
   \   00000062   0xD003             BEQ.N    ??Reveal__Handler1ms_2
   \   00000064   0x1CC0             ADDS     R0,R0,#+3
   \   00000066   0xB2C0             UXTB     R0,R0
   \   00000068   0x2813             CMP      R0,#+19
   \   0000006A   0xD3EF             BCC.N    ??Reveal__Handler1ms_3
   \                     ??Reveal__Handler1ms_2: (+1)
   \   0000006C   0xF894 0x060C      LDRB     R0,[R4, #+1548]
   \   00000070   0x1C41             ADDS     R1,R0,#+1
   \   00000072   0xB2C9             UXTB     R1,R1
   \   00000074   0x290F             CMP      R1,#+15
   \   00000076   0xBFA8             IT       GE 
   \   00000078   0x2100             MOVGE    R1,#+0
   \   0000007A   0xF884 0x1615      STRB     R1,[R4, #+1557]
   \   0000007E   0xF894 0x160D      LDRB     R1,[R4, #+1549]
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xBF27             ITTEE    CS 
   \   00000086   0xF1C0 0x000E      RSBCS    R0,R0,#+14
   \   0000008A   0x1808             ADDCS    R0,R1,R0
   \   0000008C   0x1A08             SUBCC    R0,R1,R0
   \   0000008E   0x1E40             SUBCC    R0,R0,#+1
   \   00000090   0xF894 0x2616      LDRB     R2,[R4, #+1558]
   \   00000094   0xB2C0             UXTB     R0,R0
   \   00000096   0x4290             CMP      R0,R2
   \   00000098   0xBF88             IT       HI 
   \   0000009A   0x4610             MOVHI    R0,R2
   \   0000009C   0xF884 0x0616      STRB     R0,[R4, #+1558]
   \   000000A0   0xF894 0x0615      LDRB     R0,[R4, #+1557]
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD01B             BEQ.N    ??Reveal__Handler1ms_1
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x2022             MOVS     R0,#+34
   \   000000B2   0xF884 0x004D      STRB     R0,[R4, #+77]
   \   000000B6   0xF884 0x104F      STRB     R1,[R4, #+79]
   \   000000BA   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000BE   0xF040 0x000F      ORR      R0,R0,#0xF
   \   000000C2   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C6   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000CA   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000CE   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000D2   0xF104 0x004C      ADD      R0,R4,#+76
   \   000000D6   0x.... 0x....      BL       Reveal__QueueCommand
    302          
    303                  if (Reveal_Heartbeat_Timer > 0)
   \   000000DA   0xF8B4 0x061A      LDRH     R0,[R4, #+1562]
   \   000000DE   0xB1C8             CBZ.N    R0,??Reveal__Handler1ms_0
    304                  {
    305                      uint8 nd;
    306                      for(nd=0;nd<sizeof(Reveal_Heartbeat_Node_Counter);nd++)
   \                     ??Reveal__Handler1ms_1: (+1)
   \   000000E0   0xF05F 0x0500      MOVS.W   R5,#+0
   \   000000E4   0xF204 0x6624      ADDW     R6,R4,#+1572
    307                      {
    308                          if (nd != LLC_OWN_ADDRESS)
   \                     ??Reveal__Handler1ms_4: (+1)
   \   000000E8   0x.... 0x....      BL       Win__GetAddress
   \   000000EC   0x4285             CMP      R5,R0
   \   000000EE   0xBF1C             ITT      NE 
    309                          {
    310                              if (Reveal_Heartbeat_Node_Counter[nd] > 0)
   \   000000F0   0x7830             LDRBNE   R0,[R6, #+0]
   \   000000F2   0x2800             CMPNE    R0,#+0
   \   000000F4   0xD00A             BEQ.N    ??Reveal__Handler1ms_5
    311                              {
    312                                  Reveal_Heartbeat_Node_Counter[nd]--;
   \   000000F6   0x1E40             SUBS     R0,R0,#+1
   \   000000F8   0x7030             STRB     R0,[R6, #+0]
    313                                  if (Reveal_Heartbeat_Node_Counter[nd] == 0)
   \   000000FA   0xB2C0             UXTB     R0,R0
   \   000000FC   0xB930             CBNZ.N   R0,??Reveal__Handler1ms_5
    314                                  {
    315                                      // Fault detected
    316                                      BIT_CLR(Reveal_Node_Status,nd);
   \   000000FE   0xF8B4 0x0620      LDRH     R0,[R4, #+1568]
   \   00000102   0x2101             MOVS     R1,#+1
   \   00000104   0x40A9             LSLS     R1,R1,R5
   \   00000106   0x4388             BICS     R0,R0,R1
   \   00000108   0xF8A4 0x0620      STRH     R0,[R4, #+1568]
    317                                  }
    318                              }
    319                          }
    320                      }
   \                     ??Reveal__Handler1ms_5: (+1)
   \   0000010C   0x1C6D             ADDS     R5,R5,#+1
   \   0000010E   0x1C76             ADDS     R6,R6,#+1
   \   00000110   0x2D0F             CMP      R5,#+15
   \   00000112   0xD3E9             BCC.N    ??Reveal__Handler1ms_4
    321                  }
    322              }
    323          #endif
    324          }
   \                     ??Reveal__Handler1ms_0: (+1)
   \   00000114   0xBD70             POP      {R4-R6,PC}       ;; return
    325          
    326          //---------------------------------------------------------------------------------------------------------------------
    327          #if ((REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_INTERNAL_EXTERNAL) && (REVEAL_DYNAMIC_ROUTER_FEATURE == ENABLED))
    328          /**
    329           * @brief This method is used for system that require dynamic configuration for the router
    330           * @param node
    331           * @param routing
    332           */
    333          void Reveal__SetRouterMode(uint8 node,REVEAL_ROUTING_MODE_TYPE routing)
    334          {
    335              if (node < sizeof(Reveal_Routing))
    336              {
    337                  Reveal_Routing[node] = routing;
    338              }
    339          }
    340          //---------------------------------------------------------------------------------------------------------------------
    341          /**
    342           * @brief This method is used for system to get dynamic configuration of the router.
    343           * @param node
    344           * @return router type.
    345           */
    346          uint8 Reveal__GetRouterMode(uint8 node)
    347          {
    348              uint8 router_type;
    349              //router_type = REVEAL_ROUTING_EXTERNAL_DEF;
    350              if (node < sizeof(Reveal_Routing))
    351              {
    352                  router_type = Reveal_Routing[node];
    353              }
    354              return router_type;
    355          }
    356          #endif
    357          //---------------------------------------------------------------------------------------------------------------------
    358          /**
    359           *    @brief    Creates a empty Reveal message and them populate api, opcode and node fields and by default set the feedback flag.
    360           *
    361           *    @details  This function should be called whenever a new outgoing Reveal feedback message is desired.
    362           *              Object creation of a new message is simulated by returning a pointer into a queue of structures.
    363           *              The specified api and opcode are set for the new message and the length is initialized to 0.
    364           *
    365           *    @param    api - the api id of the command
    366           *    @param    opcode - the opcode of the command
    367           *    @param    node - the node id to send the message to
    368           *    @param    size - size of the data byte to be transfered excluding the API and OPCODE
    369           *    @return   REVEAL_COMMAND_TYPE* - a pointer to the reveal message structure
    370           */

   \                                 In section .text, align 4, keep-with-next
    371          REVEAL_COMMAND_TYPE * Reveal__NewFeedback(uint8 api, uint8 opcode, uint8 node,uint8 size)
                                                                                                     ^
Remark[Pe826]: parameter "size" was never referenced
    372          {
   \                     Reveal__NewFeedback: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    373              uint8 take_message;
    374              uint8 aux;
    375              take_message = FALSE;
    376          
    377              // Determine if the message is currently blocked
    378              // Rely on short circuit evaluation to increase possibility of shorter execution time
    379              if (!((MESSAGE_BLOCKING_ACTIVE() == TRUE) &&
    380                    (IsMessageBlocked(api, opcode) == TRUE)))
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable20
   \   00000006   0xF8B3 0x4622      LDRH     R4,[R3, #+1570]
   \   0000000A   0xB304             CBZ.N    R4,??Reveal__NewFeedback_0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0x2803             CMP      R0,#+3
   \   00000010   0xD015             BEQ.N    ??Reveal__NewFeedback_1
   \   00000012   0x2401             MOVS     R4,#+1
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable20_1
   \                     ??Reveal__NewFeedback_2: (+1)
   \   00000018   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   0000001C   0x42B0             CMP      R0,R6
   \   0000001E   0xBF1E             ITTT     NE 
   \   00000020   0x1C64             ADDNE    R4,R4,#+1
   \   00000022   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000026   0x42B0             CMPNE    R0,R6
   \   00000028   0xBF1E             ITTT     NE 
   \   0000002A   0x1C64             ADDNE    R4,R4,#+1
   \   0000002C   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000030   0x42B0             CMPNE    R0,R6
   \   00000032   0xD004             BEQ.N    ??Reveal__NewFeedback_1
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \   00000036   0xB2E4             UXTB     R4,R4
   \   00000038   0x2C13             CMP      R4,#+19
   \   0000003A   0xD3ED             BCC.N    ??Reveal__NewFeedback_2
   \   0000003C   0xE007             B.N      ??Reveal__NewFeedback_0
   \                     ??Reveal__NewFeedback_1: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4
   \   00000040   0xEB03 0x0484      ADD      R4,R3,R4, LSL #+2
   \   00000044   0xF8D4 0x4634      LDR      R4,[R4, #+1588]
   \   00000048   0x40CC             LSRS     R4,R4,R1
   \   0000004A   0x07E4             LSLS     R4,R4,#+31
   \   0000004C   0xD438             BMI.N    ??Reveal__NewFeedback_3
    381              {
    382                  if (node <= REVEAL_BROADCAST_NODE)
   \                     ??Reveal__NewFeedback_0: (+1)
   \   0000004E   0x2A10             CMP      R2,#+16
   \   00000050   0xDA36             BGE.N    ??Reveal__NewFeedback_3
    383                  {
    384                      #if (REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_DISABLED)
    385          
    386                          Reveal_Aux = (uint8)(Reveal_Queue_Write + 1);
   \   00000052   0xF893 0x460C      LDRB     R4,[R3, #+1548]
   \   00000056   0x1C65             ADDS     R5,R4,#+1
    387                          if (Reveal_Aux >= REVEAL_QUEUE_SIZE)
   \   00000058   0xB2ED             UXTB     R5,R5
   \   0000005A   0x2D0F             CMP      R5,#+15
   \   0000005C   0xBFA8             IT       GE 
    388                          {
    389                              Reveal_Aux = 0;
   \   0000005E   0x2500             MOVGE    R5,#+0
   \   00000060   0xF883 0x5615      STRB     R5,[R3, #+1557]
    390                          }
    391          
    392                          #if (REVEAL_QUEUE_DEBUG == ENABLED)
    393                              if (Reveal_Queue_Write >= Reveal_Queue_Read)
   \   00000064   0xF893 0x560D      LDRB     R5,[R3, #+1549]
   \   00000068   0x42AC             CMP      R4,R5
   \   0000006A   0xBF27             ITTEE    CS 
    394                              {
    395                                  aux = REVEAL_QUEUE_SIZE - 1 - (   Reveal_Queue_Write  - Reveal_Queue_Read);
   \   0000006C   0xF1C4 0x040E      RSBCS    R4,R4,#+14
   \   00000070   0x192C             ADDCS    R4,R5,R4
    396                              }
    397                              else
    398                              {
    399                                  aux = Reveal_Queue_Read - Reveal_Queue_Write - 1;
   \   00000072   0x1B2C             SUBCC    R4,R5,R4
   \   00000074   0x1E64             SUBCC    R4,R4,#+1
    400                              }
    401          
    402                              if (Reveal_Min_Space > aux)
   \   00000076   0xF893 0x6616      LDRB     R6,[R3, #+1558]
   \   0000007A   0xB2E4             UXTB     R4,R4
   \   0000007C   0x42B4             CMP      R4,R6
   \   0000007E   0xBF88             IT       HI 
   \   00000080   0x4634             MOVHI    R4,R6
   \   00000082   0xF883 0x4616      STRB     R4,[R3, #+1558]
    403                              {
    404                                  Reveal_Min_Space = aux;
    405                              }
    406                          #endif
    407          
    408          
    409                          if (Reveal_Aux != Reveal_Queue_Read)
   \   00000086   0xF893 0x4615      LDRB     R4,[R3, #+1557]
   \   0000008A   0x42AC             CMP      R4,R5
   \   0000008C   0xD018             BEQ.N    ??Reveal__NewFeedback_3
    410                          {
    411                              take_message = TRUE;
    412                          }
    413                      #elif (REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_INTERNAL_ONLY)
    414                          take_message = TRUE;
    415                      #else
    416                          // internal / external message
    417                          if (node < REVEAL_BROADCAST_NODE)
    418                          {
    419                              if (Reveal_Routing[node] == REVEAL_ROUTING_INTERNAL)
    420                              {
    421                                  // internal message is always accepted
    422                                  take_message = TRUE;
    423                              }
    424                              else
    425                              {
    426                                  // external message depends on the queue available space
    427                                  Reveal_Aux = (uint8)(Reveal_Queue_Write + 1);
    428                                  if (Reveal_Aux >= REVEAL_QUEUE_SIZE)
    429                                  {
    430                                      Reveal_Aux = 0;
    431                                  }
    432          
    433                                  #if (REVEAL_QUEUE_DEBUG == ENABLED)
    434                                      if (Reveal_Queue_Write > Reveal_Queue_Read)
    435                                      {
    436                                          aux = REVEAL_QUEUE_SIZE - 1 - (   Reveal_Queue_Write  - Reveal_Queue_Read);
    437                                      }
    438                                      else
    439                                      {
    440                                          aux = Reveal_Queue_Write  + (REVEAL_QUEUE_SIZE - Reveal_Queue_Read - 1);
    441                                      }
    442          
    443                                      if (Reveal_Min_Space > aux)
    444                                      {
    445                                          Reveal_Min_Space = aux;
    446                                      }
    447                                  #endif
    448          
    449                                  if (Reveal_Aux != Reveal_Queue_Read)
    450                                  {
    451                                      take_message = TRUE;
    452                                  }
    453                              }
    454                          }
    455                          else
    456                          {
    457                              take_message = TRUE;
    458                          }
    459                      #endif
    460                  }
    461                  if (take_message == TRUE)
    462                  {
    463                      Reveal_Single_Queue.api = api;
   \   0000008E   0xF883 0x004C      STRB     R0,[R3, #+76]
    464                      Reveal_Single_Queue.opcode = opcode;
   \   00000092   0xF883 0x104D      STRB     R1,[R3, #+77]
    465                      Reveal_Single_Queue.node = node;
   \   00000096   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   0000009A   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   0000009E   0xF883 0x004E      STRB     R0,[R3, #+78]
    466                      Reveal_Single_Queue.length = 0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0xF883 0x004F      STRB     R0,[R3, #+79]
    467                      Reveal_Single_Queue.priority = FALSE;
    468                      Reveal_Single_Queue.feedback  =1;
    469                      Reveal_Single_Queue.timeout = 0;
   \   000000A8   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   000000AC   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000B0   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000B4   0xF883 0x004E      STRB     R0,[R3, #+78]
    470                      return (&Reveal_Single_Queue);
   \   000000B8   0xF103 0x004C      ADD      R0,R3,#+76
   \   000000BC   0xBC70             POP      {R4-R6}
   \   000000BE   0x4770             BX       LR
    471                  }
    472                  else
    473                  {
    474                      REVEAL_QUEUE_OVERFLOW_NORMAL_EXCEPTION(api,opcode);
    475                  }
    476              }
    477              // else, message is currently blocked
    478          
    479              return ((REVEAL_COMMAND_TYPE *)NULL);
   \                     ??Reveal__NewFeedback_3: (+1)
   \   000000C0   0xBC70             POP      {R4-R6}
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x4770             BX       LR               ;; return
    480          }
    481          
    482          //---------------------------------------------------------------------------------------------------------------------
    483          /**
    484           *    @brief    Calls Reveal__NewFeedback with the feedback parameter to a command format
    485           *              and adds it to the message queue.
    486           *
    487           *    @details  This function should be called whenever a new outgoing Reveal command message is desired.
    488           *              Object creation of a new message is simulated by returning a pointer into a queue of structures.
    489           *              The specified api and opcode are set for the new message and the length is initialized to 0.
    490           *
    491           *    @param    api - the api id of the command
    492           *    @param    opcode - the opcode of the command
    493           *    @param    node - the node id to send the message to
    494           *    @param    size - size of the data byte to be transfered excluding the API and OPCODE
    495           *    @return   REVEAL_COMMAND_TYPE* - a pointer to the reveal message structure
    496           */

   \                                 In section .text, align 4, keep-with-next
    497          REVEAL_COMMAND_TYPE * Reveal__NewCommand(uint8 api, uint8 opcode, uint8 node, uint8 size)
    498          {
   \                     Reveal__NewCommand: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    499              REVEAL_COMMAND_TYPE * pt;
    500              pt = Reveal__NewFeedback(api,opcode,node,size);
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable20
   \   00000006   0xF8B3 0x4622      LDRH     R4,[R3, #+1570]
   \   0000000A   0xB304             CBZ.N    R4,??Reveal__NewCommand_0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0x2803             CMP      R0,#+3
   \   00000010   0xD015             BEQ.N    ??Reveal__NewCommand_1
   \   00000012   0x2401             MOVS     R4,#+1
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable20_1
   \                     ??Reveal__NewCommand_2: (+1)
   \   00000018   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   0000001C   0x42B0             CMP      R0,R6
   \   0000001E   0xBF1E             ITTT     NE 
   \   00000020   0x1C64             ADDNE    R4,R4,#+1
   \   00000022   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000026   0x42B0             CMPNE    R0,R6
   \   00000028   0xBF1E             ITTT     NE 
   \   0000002A   0x1C64             ADDNE    R4,R4,#+1
   \   0000002C   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000030   0x42B0             CMPNE    R0,R6
   \   00000032   0xD004             BEQ.N    ??Reveal__NewCommand_1
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \   00000036   0xB2E4             UXTB     R4,R4
   \   00000038   0x2C13             CMP      R4,#+19
   \   0000003A   0xD3ED             BCC.N    ??Reveal__NewCommand_2
   \   0000003C   0xE007             B.N      ??Reveal__NewCommand_0
   \                     ??Reveal__NewCommand_1: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4
   \   00000040   0xEB03 0x0484      ADD      R4,R3,R4, LSL #+2
   \   00000044   0xF8D4 0x4634      LDR      R4,[R4, #+1588]
   \   00000048   0x40CC             LSRS     R4,R4,R1
   \   0000004A   0x07E4             LSLS     R4,R4,#+31
   \   0000004C   0xD43C             BMI.N    ??Reveal__NewCommand_3
   \                     ??Reveal__NewCommand_0: (+1)
   \   0000004E   0x2A10             CMP      R2,#+16
   \   00000050   0xDA3A             BGE.N    ??Reveal__NewCommand_3
   \   00000052   0xF893 0x460C      LDRB     R4,[R3, #+1548]
   \   00000056   0x1C65             ADDS     R5,R4,#+1
   \   00000058   0xB2ED             UXTB     R5,R5
   \   0000005A   0x2D0F             CMP      R5,#+15
   \   0000005C   0xBFA8             IT       GE 
   \   0000005E   0x2500             MOVGE    R5,#+0
   \   00000060   0xF883 0x5615      STRB     R5,[R3, #+1557]
   \   00000064   0xF893 0x560D      LDRB     R5,[R3, #+1549]
   \   00000068   0x42AC             CMP      R4,R5
   \   0000006A   0xBF27             ITTEE    CS 
   \   0000006C   0xF1C4 0x040E      RSBCS    R4,R4,#+14
   \   00000070   0x192C             ADDCS    R4,R5,R4
   \   00000072   0x1B2C             SUBCC    R4,R5,R4
   \   00000074   0x1E64             SUBCC    R4,R4,#+1
   \   00000076   0xF893 0x6616      LDRB     R6,[R3, #+1558]
   \   0000007A   0xB2E4             UXTB     R4,R4
   \   0000007C   0x42B4             CMP      R4,R6
   \   0000007E   0xBF88             IT       HI 
   \   00000080   0x4634             MOVHI    R4,R6
   \   00000082   0xF883 0x4616      STRB     R4,[R3, #+1558]
   \   00000086   0xF893 0x4615      LDRB     R4,[R3, #+1557]
   \   0000008A   0x42AC             CMP      R4,R5
   \   0000008C   0xD01C             BEQ.N    ??Reveal__NewCommand_3
   \   0000008E   0xF883 0x004C      STRB     R0,[R3, #+76]
   \   00000092   0xF883 0x104D      STRB     R1,[R3, #+77]
   \   00000096   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   0000009A   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   0000009E   0xF883 0x004E      STRB     R0,[R3, #+78]
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0xF883 0x004F      STRB     R0,[R3, #+79]
   \   000000A8   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   000000AC   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000B0   0xF040 0x0110      ORR      R1,R0,#0x10
   \   000000B4   0xF883 0x104E      STRB     R1,[R3, #+78]
   \   000000B8   0xF103 0x004C      ADD      R0,R3,#+76
    501              if (pt != (REVEAL_COMMAND_TYPE *)NULL)
    502              {
    503                  pt->feedback = 0;
   \   000000BC   0xF001 0x01EF      AND      R1,R1,#0xEF
   \   000000C0   0xF883 0x104E      STRB     R1,[R3, #+78]
    504              }
    505              return (pt);
   \   000000C4   0xBC70             POP      {R4-R6}
   \   000000C6   0x4770             BX       LR
   \                     ??Reveal__NewCommand_3: (+1)
   \   000000C8   0xBC70             POP      {R4-R6}
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x4770             BX       LR               ;; return
    506          }
    507          
    508          
    509          //---------------------------------------------------------------------------------------------------------------------
    510          /**
    511           *    @brief    Creates a empty Reveal message and them populate api, opcode and node fields and by default set the feedback flag.
    512           *
    513           *    @details  This function should be called whenever a new outgoing Reveal feedback message is desired.
    514           *              Object creation of a new message is simulated by returning a pointer into a queue of structures.
    515           *              The specified api and opcode are set for the new message and the length is initialized to 0.
    516           *
    517           *    @param    api - the api id of the command
    518           *    @param    opcode - the opcode of the command
    519           *    @param    node - the node id to send the message to
    520           *    @param    size - size of the data byte to be transfered excluding the API and OPCODE
    521           *    @return   REVEAL_COMMAND_TYPE* - a pointer to the reveal message structure
    522           */

   \                                 In section .text, align 2, keep-with-next
    523          REVEAL_COMMAND_TYPE * Reveal__PriorityNewFeedback(uint8 api, uint8 opcode, uint8 node, uint8 size)
                                                                                                              ^
Remark[Pe826]: parameter "size" was never referenced
    524          {
   \                     Reveal__PriorityNewFeedback: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    525          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
    526              uint8 take_message;
    527              uint8 aux;
    528              take_message = FALSE;
    529              if (node <= REVEAL_BROADCAST_NODE)
   \   00000002   0x2A10             CMP      R2,#+16
   \   00000004   0xDA38             BGE.N    ??Reveal__PriorityNewFeedback_0
    530              {
    531                  #if (REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_DISABLED)
    532          
    533                      Reveal_Aux = (uint8)(Reveal_Queue_Priority_Write + 1);
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable21
   \   0000000A   0xF893 0x460F      LDRB     R4,[R3, #+1551]
   \   0000000E   0x1C65             ADDS     R5,R4,#+1
    534                      if (Reveal_Aux >= REVEAL_QUEUE_PRIORITY_SIZE)
   \   00000010   0xB2ED             UXTB     R5,R5
   \   00000012   0x2D05             CMP      R5,#+5
   \   00000014   0xBFA8             IT       GE 
    535                      {
    536                          Reveal_Aux = 0;
   \   00000016   0x2500             MOVGE    R5,#+0
   \   00000018   0xF883 0x5615      STRB     R5,[R3, #+1557]
    537                      }
    538          
    539                      #if (REVEAL_QUEUE_DEBUG == ENABLED)
    540                          if (Reveal_Queue_Priority_Write >= Reveal_Queue_Priority_Read)
   \   0000001C   0xF893 0x5610      LDRB     R5,[R3, #+1552]
   \   00000020   0x42AC             CMP      R4,R5
   \   00000022   0xBF27             ITTEE    CS 
    541                          {
    542                              aux = REVEAL_QUEUE_PRIORITY_SIZE - 1 - (   Reveal_Queue_Priority_Write  - Reveal_Queue_Priority_Read);
   \   00000024   0xF1C4 0x0404      RSBCS    R4,R4,#+4
   \   00000028   0x192C             ADDCS    R4,R5,R4
    543                          }
    544                          else
    545                          {
    546                              aux = Reveal_Queue_Priority_Read - Reveal_Queue_Priority_Write  - 1;
   \   0000002A   0x1B2C             SUBCC    R4,R5,R4
   \   0000002C   0x1E64             SUBCC    R4,R4,#+1
    547                          }
    548          
    549                          if (Reveal_Priority_Min_Space > aux)
   \   0000002E   0xF893 0x6611      LDRB     R6,[R3, #+1553]
   \   00000032   0xB2E4             UXTB     R4,R4
   \   00000034   0x42B4             CMP      R4,R6
   \   00000036   0xBF88             IT       HI 
   \   00000038   0x4634             MOVHI    R4,R6
   \   0000003A   0xF883 0x4611      STRB     R4,[R3, #+1553]
    550                          {
    551                              Reveal_Priority_Min_Space = aux;
    552                          }
    553                      #endif
    554          
    555                      if (Reveal_Aux != Reveal_Queue_Priority_Read)
   \   0000003E   0xF893 0x4615      LDRB     R4,[R3, #+1557]
   \   00000042   0x42AC             CMP      R4,R5
   \   00000044   0xD018             BEQ.N    ??Reveal__PriorityNewFeedback_0
    556                      {
    557                          take_message = TRUE;
    558                      }
    559                  #elif (REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_INTERNAL_ONLY)
    560                      take_message = TRUE;
    561                  #else
    562                      // internal / external message
    563                      if (node < REVEAL_BROADCAST_NODE)
    564                      {
    565                          if (Reveal_Routing[node] == REVEAL_ROUTING_INTERNAL)
    566                          {
    567                              // internal message is always accepted
    568                              take_message = TRUE;
    569                          }
    570                          else
    571                          {
    572                              // external message depends on the queue available space
    573                              Reveal_Aux = (uint8)(Reveal_Queue_Priority_Write + 1);
    574                              if (Reveal_Aux >= REVEAL_QUEUE_SIZE)
    575                              {
    576                                  Reveal_Aux = 0;
    577                              }
    578          
    579                              #if (REVEAL_QUEUE_DEBUG == ENABLED)
    580                                  if (Reveal_Queue_Priority_Write > Reveal_Queue_Priority_Read)
    581                                  {
    582                                      aux = REVEAL_QUEUE_PRIORITY_SIZE - 1 - (   Reveal_Queue_Priority_Write  - Reveal_Queue_Priority_Read);
    583                                  }
    584                                  else
    585                                  {
    586                                      aux = Reveal_Queue_Priority_Write  + (REVEAL_QUEUE_PRIORITY_SIZE - Reveal_Queue_Priority_Read - 1);
    587                                  }
    588          
    589                                  if (Reveal_Priority_Min_Space > aux)
    590                                  {
    591                                      Reveal_Priority_Min_Space = aux;
    592                                  }
    593                              #endif
    594          
    595                              if (Reveal_Aux != Reveal_Queue_Priority_Read)
    596                              {
    597                                  take_message = TRUE;
    598                              }
    599                          }
    600                      }
    601                      else
    602                      {
    603                          take_message = TRUE;
    604                      }
    605                  #endif
    606               }
    607              if (take_message == TRUE)
    608              {
    609                  Reveal_Single_Queue.api = api;
   \   00000046   0xF883 0x004C      STRB     R0,[R3, #+76]
    610                  Reveal_Single_Queue.opcode = opcode;
   \   0000004A   0xF883 0x104D      STRB     R1,[R3, #+77]
    611                  Reveal_Single_Queue.node = node;
   \   0000004E   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   00000052   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   00000056   0xF883 0x004E      STRB     R0,[R3, #+78]
    612                  Reveal_Single_Queue.length = 0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xF883 0x004F      STRB     R0,[R3, #+79]
    613                  Reveal_Single_Queue.priority = TRUE;
    614                  Reveal_Single_Queue.feedback  =1;
    615                  Reveal_Single_Queue.timeout = 0;
   \   00000060   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   00000064   0xF000 0x00DF      AND      R0,R0,#0xDF
   \   00000068   0xF040 0x0050      ORR      R0,R0,#0x50
   \   0000006C   0xF883 0x004E      STRB     R0,[R3, #+78]
    616                  return (&Reveal_Single_Queue);
   \   00000070   0xF103 0x004C      ADD      R0,R3,#+76
   \   00000074   0xBC70             POP      {R4-R6}
   \   00000076   0x4770             BX       LR
    617              }
    618              else
    619              {
    620                  REVEAL_QUEUE_OVERFLOW_PRIORITY_EXCEPTION(api,opcode);
    621                  return ((REVEAL_COMMAND_TYPE *)NULL);
   \                     ??Reveal__PriorityNewFeedback_0: (+1)
   \   00000078   0xBC70             POP      {R4-R6}
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x4770             BX       LR               ;; return
    622              }
    623          #else
    624              return (Reveal__NewFeedback(api,opcode,node,size));
    625          #endif
    626          }
    627          
    628          //---------------------------------------------------------------------------------------------------------------------
    629          /**
    630           *    @brief    Calls Reveal__NewProrityFeedback with  the feedback parameter to a command format
    631           *              and adds it to the message queue.
    632           *
    633           *    @details  This function should be called whenever a new outgoing Reveal command message is desired.
    634           *              Object creation of a new message is simulated by returning a pointer into a queue of structures.
    635           *              The specified api and opcode are set for the new message and the length is initialized to 0.
    636           *
    637           *    @param    api - the api id of the command
    638           *    @param    opcode - the opcode of the command
    639           *    @param    node - the node id to send the message to
    640           *    @param    size - size of the data byte to be transfered excluding the API and OPCODE
    641           *    @return   REVEAL_COMMAND_TYPE* - a pointer to the reveal message structure
    642           */

   \                                 In section .text, align 2, keep-with-next
    643          REVEAL_COMMAND_TYPE * Reveal__PriorityNewCommand(uint8 api, uint8 opcode, uint8 node, uint8 size)
    644          {
   \                     Reveal__PriorityNewCommand: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    645          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
    646              REVEAL_COMMAND_TYPE * pt;
    647              pt = Reveal__PriorityNewFeedback(api, opcode, node, size);
   \   00000002   0x2A10             CMP      R2,#+16
   \   00000004   0xDA3C             BGE.N    ??Reveal__PriorityNewCommand_0
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable21
   \   0000000A   0xF893 0x460F      LDRB     R4,[R3, #+1551]
   \   0000000E   0x1C65             ADDS     R5,R4,#+1
   \   00000010   0xB2ED             UXTB     R5,R5
   \   00000012   0x2D05             CMP      R5,#+5
   \   00000014   0xBFA8             IT       GE 
   \   00000016   0x2500             MOVGE    R5,#+0
   \   00000018   0xF883 0x5615      STRB     R5,[R3, #+1557]
   \   0000001C   0xF893 0x5610      LDRB     R5,[R3, #+1552]
   \   00000020   0x42AC             CMP      R4,R5
   \   00000022   0xBF27             ITTEE    CS 
   \   00000024   0xF1C4 0x0404      RSBCS    R4,R4,#+4
   \   00000028   0x192C             ADDCS    R4,R5,R4
   \   0000002A   0x1B2C             SUBCC    R4,R5,R4
   \   0000002C   0x1E64             SUBCC    R4,R4,#+1
   \   0000002E   0xF893 0x6611      LDRB     R6,[R3, #+1553]
   \   00000032   0xB2E4             UXTB     R4,R4
   \   00000034   0x42B4             CMP      R4,R6
   \   00000036   0xBF88             IT       HI 
   \   00000038   0x4634             MOVHI    R4,R6
   \   0000003A   0xF883 0x4611      STRB     R4,[R3, #+1553]
   \   0000003E   0xF893 0x4615      LDRB     R4,[R3, #+1557]
   \   00000042   0x42AC             CMP      R4,R5
   \   00000044   0xD01C             BEQ.N    ??Reveal__PriorityNewCommand_0
   \   00000046   0xF883 0x004C      STRB     R0,[R3, #+76]
   \   0000004A   0xF883 0x104D      STRB     R1,[R3, #+77]
   \   0000004E   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   00000052   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   00000056   0xF883 0x004E      STRB     R0,[R3, #+78]
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xF883 0x004F      STRB     R0,[R3, #+79]
   \   00000060   0xF893 0x004E      LDRB     R0,[R3, #+78]
   \   00000064   0xF000 0x00DF      AND      R0,R0,#0xDF
   \   00000068   0xF040 0x0150      ORR      R1,R0,#0x50
   \   0000006C   0xF883 0x104E      STRB     R1,[R3, #+78]
   \   00000070   0xF103 0x004C      ADD      R0,R3,#+76
    648              if (pt != (REVEAL_COMMAND_TYPE *)NULL)
    649              {
    650                  pt->feedback = 0;
   \   00000074   0xF001 0x01EF      AND      R1,R1,#0xEF
   \   00000078   0xF883 0x104E      STRB     R1,[R3, #+78]
    651              }
    652              return (pt);
   \   0000007C   0xBC70             POP      {R4-R6}
   \   0000007E   0x4770             BX       LR
   \                     ??Reveal__PriorityNewCommand_0: (+1)
   \   00000080   0xBC70             POP      {R4-R6}
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x4770             BX       LR               ;; return
    653          #else
    654              return (Reveal__NewCommand(api,opcode,node,size));
    655          #endif
    656          }
    657          
    658          //---------------------------------------------------------------------------------------------------------------------
    659          /**
    660           * @brief This method is used to debug the minimum space available in the Reveal queue over time.
    661           * @return uint8 which represents the minimum space available in the Reveal Queue
    662           */

   \                                 In section .text, align 2, keep-with-next
    663          uint8 Reveal__GetMinimumQueueSpace(void)
    664          {
    665          #if (REVEAL_QUEUE_DEBUG == ENABLED)
    666              return (Reveal_Min_Space);                      // return the minimum available space
   \                     Reveal__GetMinimumQueueSpace: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0xF890 0x0616      LDRB     R0,[R0, #+1558]
   \   00000008   0x4770             BX       LR               ;; return
    667          #else
    668              return (0);                                     // debug code disabled reports no space available
    669          #endif
    670          }
    671          
    672          //---------------------------------------------------------------------------------------------------------------------
    673          /**
    674           * @brief This method is used to debug the minimum space available in the Reveal queue over time.
    675           * @return uint8 which represents the minimum space available in the priority Reveal Queue
    676           */

   \                                 In section .text, align 2, keep-with-next
    677          uint8 Reveal__GetMinimumPriorityQueueSpace(void)
    678          {
    679          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
    680              #if (REVEAL_QUEUE_DEBUG == ENABLED)
    681                  return (Reveal_Priority_Min_Space);         // return the minimum available space
   \                     Reveal__GetMinimumPriorityQueueSpace: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0xF890 0x0611      LDRB     R0,[R0, #+1553]
   \   00000008   0x4770             BX       LR               ;; return
    682              #else
    683                  return (0);                                 // debug code disabled reports no space available
    684              #endif
    685          #else
    686              return (0);                                     // priority queue disabled reports no space available
    687          #endif
    688          }
    689          
    690          //---------------------------------------------------------------------------------------------------------------------
    691          /**
    692           *    @brief    Add an 8-bit uint8 data type to a Reveal message.
    693           *
    694           *    @details  This function adds the specified data type to a Reveal queue driver message. This is a
    695           *              memory endianess independent method that will result in a big endian message. This function
    696           *              should be called in order each time another piece of data needs to be packed into the
    697           *              message structure.
    698           *
    699           *    @param    command* - pointer to the reveal message structure
    700           *    @param    u8 - the data byte to add to the message
    701           *    @return   PASS_FAIL_TYPE
    702           */

   \                                 In section .text, align 2, keep-with-next
    703          PASS_FAIL_TYPE Reveal__AddDataU8(REVEAL_COMMAND_TYPE * command, uint8 u8)
    704          {
    705              PASS_FAIL_TYPE retval;
    706              retval = FAIL;
   \                     Reveal__AddDataU8: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    707              if (command != (REVEAL_COMMAND_TYPE *)NULL)
   \   00000002   0xB140             CBZ.N    R0,??Reveal__AddDataU8_0
    708              {
    709                  if (command->length < REVEAL_PAYLOAD_SIZE)
   \   00000004   0x78C3             LDRB     R3,[R0, #+3]
   \   00000006   0x2B41             CMP      R3,#+65
   \   00000008   0xDA05             BGE.N    ??Reveal__AddDataU8_0
    710                  {
    711                      command->data[command->length ] = u8;
   \   0000000A   0x181A             ADDS     R2,R3,R0
   \   0000000C   0x7111             STRB     R1,[R2, #+4]
    712                      command->length += 1;
    713                      retval = PASS;
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x78C1             LDRB     R1,[R0, #+3]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x70C1             STRB     R1,[R0, #+3]
    714                  }
    715              }
    716              return (retval);
   \                     ??Reveal__AddDataU8_0: (+1)
   \   00000016   0x4610             MOV      R0,R2
   \   00000018   0x4770             BX       LR               ;; return
    717          }
    718          
    719          //---------------------------------------------------------------------------------------------------------------------
    720          /**
    721           *    @brief    Add a character buffer to a Reveal message.
    722           *
    723           *    @details  This function is a helper method and should only be used when a a character buffer
    724           *              is to be added to a message. It should be used with caution as it does not manage
    725           *              endianess like the other AddData functions in this module. The maximum size of a
    726           *              buffer to add is equal to the max REVEAL_PAYLOAD_SIZE.
    727           *
    728           *    @param    *command - pointer to the reveal message struct
    729           *    @param    *u8_buffer - pointer to the character buffer to add to the message
    730           *    @param    length - length of the character buffer
    731           *    @return   void
    732           */

   \                                 In section .text, align 2, keep-with-next
    733          PASS_FAIL_TYPE Reveal__AddDataU8Buffer(REVEAL_COMMAND_TYPE* command, uint8 *u8_buffer, uint8 length)
    734          {
   \                     Reveal__AddDataU8Buffer: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4616             MOV      R6,R2
    735              PASS_FAIL_TYPE retval;
    736              retval = FAIL;
   \   00000006   0x2500             MOVS     R5,#+0
    737          
    738              if (command != (REVEAL_COMMAND_TYPE *)NULL)
   \   00000008   0xB18C             CBZ.N    R4,??Reveal__AddDataU8Buffer_0
    739              {
    740                  retval = PASS;
    741                  if(length > (REVEAL_PAYLOAD_SIZE - command->length))
   \   0000000A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000000C   0x2501             MOVS     R5,#+1
   \   0000000E   0xF1C0 0x0241      RSB      R2,R0,#+65
   \   00000012   0x42B2             CMP      R2,R6
   \   00000014   0xBFBC             ITT      LT 
    742                  {
    743                      length = (uint8)(REVEAL_PAYLOAD_SIZE - command->length);
   \   00000016   0xF1C0 0x0641      RSBLT    R6,R0,#+65
    744                      retval = FAIL;
   \   0000001A   0x2500             MOVLT    R5,#+0
    745                  }
    746                  memcpy(&command->data[command->length],u8_buffer,length);
   \   0000001C   0xB2F6             UXTB     R6,R6
   \   0000001E   0x1900             ADDS     R0,R0,R4
   \   00000020   0x4632             MOV      R2,R6
   \   00000022   0x1D00             ADDS     R0,R0,#+4
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy
    747                  command->length += length;
   \   00000028   0x78E0             LDRB     R0,[R4, #+3]
   \   0000002A   0x1830             ADDS     R0,R6,R0
   \   0000002C   0x70E0             STRB     R0,[R4, #+3]
    748          
    749              }
    750              return (retval);
   \                     ??Reveal__AddDataU8Buffer_0: (+1)
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
    751          }
    752          
    753          //---------------------------------------------------------------------------------------------------------------------
    754          /**
    755           *    @brief    Add a 16-bit uint16 data type to a Reveal message.
    756           *
    757           *    @details  This function adds the specified data type to a Reveal queue driver message. This is a
    758           *              memory endianess independent method that will result in a big endian message. This function
    759           *              should be called in order each time another piece of data needs to be packed into the
    760           *              message structure.
    761           *
    762           *    @param    command* - pointer to the reveal message structure
    763           *    @param    u16 - the 16-bit data to add to the message
    764           *    @return   void
    765           */

   \                                 In section .text, align 2, keep-with-next
    766          PASS_FAIL_TYPE Reveal__AddDataU16(REVEAL_COMMAND_TYPE* command, uint16 u16)
    767          {
    768              uint8 index;
    769              PASS_FAIL_TYPE retval;
    770              retval = FAIL;
   \                     Reveal__AddDataU16: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    771          
    772              if (command != (REVEAL_COMMAND_TYPE *)NULL)
   \   00000002   0xB150             CBZ.N    R0,??Reveal__AddDataU16_0
    773              {
    774                  index = command->length;
   \   00000004   0x78C3             LDRB     R3,[R0, #+3]
    775                  if (index < (REVEAL_PAYLOAD_SIZE - 1))
   \   00000006   0x2B40             CMP      R3,#+64
   \   00000008   0xDA07             BGE.N    ??Reveal__AddDataU16_0
    776                  {
    777                      command->data[ index   ] = (uint8)(u16>>8);
   \   0000000A   0x181A             ADDS     R2,R3,R0
   \   0000000C   0x0A0B             LSRS     R3,R1,#+8
   \   0000000E   0x7113             STRB     R3,[R2, #+4]
    778                      command->data[(index)+1] = (uint8) u16;
   \   00000010   0x7151             STRB     R1,[R2, #+5]
    779                      command->length += 2;
    780                      retval = PASS;
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x78C1             LDRB     R1,[R0, #+3]
   \   00000016   0x1C89             ADDS     R1,R1,#+2
   \   00000018   0x70C1             STRB     R1,[R0, #+3]
    781                  }
    782              }
    783          
    784              return (retval);
   \                     ??Reveal__AddDataU16_0: (+1)
   \   0000001A   0x4610             MOV      R0,R2
   \   0000001C   0x4770             BX       LR               ;; return
    785          }
    786          
    787          //---------------------------------------------------------------------------------------------------------------------
    788          /**
    789           *    @brief    Add a 16-bit sint16 data type to a Reveal message.
    790           *
    791           *    @details  This function adds the specified data type to a Reveal queue driver message. This is a
    792           *              memory endianness independent method that will result in a big endian message. This function
    793           *              should be called in order each time another piece of data needs to be packed into the
    794           *              message structure.
    795           *
    796           *    @param    command* - pointer to the reveal message structure
    797           *    @param    s16 - the 16-bit data to add to the message
    798           *    @return   void
    799           */

   \                                 In section .text, align 2, keep-with-next
    800          PASS_FAIL_TYPE Reveal__AddDataS16(REVEAL_COMMAND_TYPE* command, sint16 s16)
    801          {
    802              uint8 index;
    803              PASS_FAIL_TYPE retval;
    804              retval = FAIL;
   \                     Reveal__AddDataS16: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    805              if (command != (REVEAL_COMMAND_TYPE *)NULL)
   \   00000002   0xB158             CBZ.N    R0,??Reveal__AddDataS16_0
    806              {
    807                  index = command->length;
   \   00000004   0x78C3             LDRB     R3,[R0, #+3]
    808                  if (index < (REVEAL_PAYLOAD_SIZE - 1))
   \   00000006   0x2B40             CMP      R3,#+64
   \   00000008   0xDA08             BGE.N    ??Reveal__AddDataS16_0
    809                  {
    810                      command->data[ index   ] = (uint8)(((uint16)s16 & 0xFF00) >> 8);
   \   0000000A   0x181A             ADDS     R2,R3,R0
   \   0000000C   0xB289             UXTH     R1,R1
   \   0000000E   0x0A0B             LSRS     R3,R1,#+8
   \   00000010   0x7113             STRB     R3,[R2, #+4]
    811                      command->data[(index)+1] =  (uint8)((uint16)s16 & 0x00FF);
   \   00000012   0x7151             STRB     R1,[R2, #+5]
    812                      command->length += 2;
    813                      retval = PASS;
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x78C1             LDRB     R1,[R0, #+3]
   \   00000018   0x1C89             ADDS     R1,R1,#+2
   \   0000001A   0x70C1             STRB     R1,[R0, #+3]
    814                  }
    815              }
    816              return (retval);
   \                     ??Reveal__AddDataS16_0: (+1)
   \   0000001C   0x4610             MOV      R0,R2
   \   0000001E   0x4770             BX       LR               ;; return
    817          }
    818          
    819          //---------------------------------------------------------------------------------------------------------------------
    820          /**
    821           *    @brief    Add a 32-bit uint32 data type to a Reveal message.
    822           *
    823           *    @details  This function adds the specified data type to a Reveal queue driver message. This is a
    824           *              memory Endianess independent method that will result in a big endian message. This function
    825           *              should be called in order each time another piece of data needs to be packed into the
    826           *              message structure.
    827           *
    828           *    @param    command* - pointer to the reveal message structure
    829           *    @param    u32 - the 32-bit data to add to the message
    830           *    @return   void
    831           */

   \                                 In section .text, align 2, keep-with-next
    832          PASS_FAIL_TYPE Reveal__AddDataU32(REVEAL_COMMAND_TYPE* command, uint32 u32)
    833          {
    834              uint8 index;
    835              PASS_FAIL_TYPE retval;
    836              retval = FAIL;
   \                     Reveal__AddDataU32: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    837              if (command != (REVEAL_COMMAND_TYPE *)NULL)
   \   00000002   0xB170             CBZ.N    R0,??Reveal__AddDataU32_0
    838              {
    839                  index = command->length;
   \   00000004   0x78C3             LDRB     R3,[R0, #+3]
    840                  if (index < (REVEAL_PAYLOAD_SIZE - 3))
   \   00000006   0x2B3E             CMP      R3,#+62
   \   00000008   0xDA0B             BGE.N    ??Reveal__AddDataU32_0
    841                  {
    842                      command->data[ index   ] = (uint8)(u32>>24);
   \   0000000A   0x181A             ADDS     R2,R3,R0
   \   0000000C   0x0E0B             LSRS     R3,R1,#+24
   \   0000000E   0x7113             STRB     R3,[R2, #+4]
    843                      command->data[(index)+1] = (uint8)(u32>>16);
   \   00000010   0x0C0B             LSRS     R3,R1,#+16
   \   00000012   0x7153             STRB     R3,[R2, #+5]
    844                      command->data[(index)+2] = (uint8)(u32>>8 );
   \   00000014   0x0A0B             LSRS     R3,R1,#+8
   \   00000016   0x7193             STRB     R3,[R2, #+6]
    845                      command->data[(index)+3] = (uint8) u32;
   \   00000018   0x71D1             STRB     R1,[R2, #+7]
    846                      command->length += 4;
    847                      retval = PASS;
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x78C1             LDRB     R1,[R0, #+3]
   \   0000001E   0x1D09             ADDS     R1,R1,#+4
   \   00000020   0x70C1             STRB     R1,[R0, #+3]
    848                  }
    849              }
    850              return (retval);
   \                     ??Reveal__AddDataU32_0: (+1)
   \   00000022   0x4610             MOV      R0,R2
   \   00000024   0x4770             BX       LR               ;; return
    851          }
    852          
    853          //---------------------------------------------------------------------------------------------------------------------
    854          /**
    855           *    @brief    Adds a completed message to the Reveal queue for transmission on the LLC bus.
    856           *
    857           *    @details  Once a Reveal message structure is created and its bytes are added this function
    858           *              should be called as the final step for transmitting a message.
    859           *
    860           *    @param   command
    861           *    @return  success / fail
    862           */

   \                                 In section .text, align 4, keep-with-next
    863          BOOL_TYPE Reveal__QueueCommand(REVEAL_COMMAND_TYPE * command)
    864          {
   \                     Reveal__QueueCommand: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4601             MOV      R1,R0
    865              BOOL_TYPE retval;
    866          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_DISABLED)
    867              REVEAL_MSG_TYPE Reveal_Transfer_Buffer;
    868              REVEAL_RECIPE_STATUS_TYPE reasoncode;
    869              uint8 send_internal;
    870              #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
    871                  uint8 send_external;
    872                  send_external = TRUE;                           //Set by default external routing to TRUE
    873              #endif
    874          #endif
    875              retval = FALSE;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0xB081             SUB      SP,SP,#+4
    876              if ((command != (REVEAL_COMMAND_TYPE *)NULL) &&
    877                  (!((MESSAGE_BLOCKING_ACTIVE() == TRUE) &&
    878                  (IsMessageBlocked(command->api, command->opcode) == TRUE))))
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD065             BEQ.N    ??Reveal__QueueCommand_0
   \   0000000C   0x.... 0x....      LDR.W    R5,??DataTable20
   \   00000010   0xF8B5 0x0622      LDRH     R0,[R5, #+1570]
   \   00000014   0xB320             CBZ.N    R0,??Reveal__QueueCommand_1
   \   00000016   0x780A             LDRB     R2,[R1, #+0]
   \   00000018   0x7848             LDRB     R0,[R1, #+1]
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x2A03             CMP      R2,#+3
   \   0000001E   0xD016             BEQ.N    ??Reveal__QueueCommand_2
   \   00000020   0xF05F 0x0301      MOVS.W   R3,#+1
   \   00000024   0x.... 0x....      LDR.W    R6,??DataTable20_1
   \                     ??Reveal__QueueCommand_3: (+1)
   \   00000028   0xF816 0x7B01      LDRB     R7,[R6], #+1
   \   0000002C   0x42BA             CMP      R2,R7
   \   0000002E   0xBF1E             ITTT     NE 
   \   00000030   0x1C5B             ADDNE    R3,R3,#+1
   \   00000032   0xF816 0x7B01      LDRBNE   R7,[R6], #+1
   \   00000036   0x42BA             CMPNE    R2,R7
   \   00000038   0xBF1E             ITTT     NE 
   \   0000003A   0x1C5B             ADDNE    R3,R3,#+1
   \   0000003C   0xF816 0x7B01      LDRBNE   R7,[R6], #+1
   \   00000040   0x42BA             CMPNE    R2,R7
   \   00000042   0xD004             BEQ.N    ??Reveal__QueueCommand_2
   \   00000044   0x1C5B             ADDS     R3,R3,#+1
   \   00000046   0xB2DB             UXTB     R3,R3
   \   00000048   0x2B13             CMP      R3,#+19
   \   0000004A   0xD3ED             BCC.N    ??Reveal__QueueCommand_3
   \   0000004C   0xE008             B.N      ??Reveal__QueueCommand_1
   \                     ??Reveal__QueueCommand_2: (+1)
   \   0000004E   0xB2DB             UXTB     R3,R3
   \   00000050   0xEB05 0x0283      ADD      R2,R5,R3, LSL #+2
   \   00000054   0xF8D2 0x2634      LDR      R2,[R2, #+1588]
   \   00000058   0xFA22 0xF000      LSR      R0,R2,R0
   \   0000005C   0x07C0             LSLS     R0,R0,#+31
   \   0000005E   0xD43B             BMI.N    ??Reveal__QueueCommand_0
    879              {
    880                  #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_DISABLED)
    881                      send_internal = TRUE;
    882          
    883                  #if (REVEAL_ROUTER_FEATURE == REVEAL_ROUTER_INTERNAL_EXTERNAL)
    884          
    885                          if (command->node < REVEAL_BROADCAST_NODE)         //Check destination node is lesser than REVEAL_BROADCAST_NODE '15'
    886                          {
    887                              if (Reveal_Routing[command->node] == REVEAL_ROUTING_INTERNAL)
    888                              {
    889                                  send_external = FALSE;          //Routing Internally
    890                              }
    891                              else
    892                              {
    893                                  send_internal = FALSE;          //Routing externally
    894                              }
    895                          }
    896                      #if (REVEAL_ROUTERING_BROADCAST_EXTERNAL == DISABLED)
    897                          else
    898                          {
    899                              send_external = FALSE;
    900                          }
    901                      #endif
    902          
    903                  #endif
    904                          ////////////////////////////Start of Internal Routing ////////////////////////////////
    905                      if (send_internal == TRUE)
    906                      {
    907                          Reveal_Transfer_Buffer.destination = command->node;
    908                          Reveal_Transfer_Buffer.node_id  = 0xF;
    909                          Reveal_Transfer_Buffer.sdu_length = (uint8)(command->length + 2);
    910                          Reveal_Transfer_Buffer.sap = REVEAL_SAP;
    911                          Reveal_Transfer_Buffer.api_id = command->api;
    912                          // it copies: opcode, frag, mmp and feedback
    913                          Reveal_Transfer_Buffer.op_code = (command->opcode & 0x1F);
    914          
    915                          Reveal_Transfer_Buffer.cmd_fb = 0;
    916                          Reveal_Transfer_Buffer.frag = 0;
    917                          Reveal_Transfer_Buffer.mmp = 0;
    918          
    919                          if (BIT_TEST((command->opcode), 5))
    920                          {
    921                          Reveal_Transfer_Buffer.cmd_fb = 1;
    922                          }
    923          
    924                          if (BIT_TEST((command->opcode), 6))
    925                          {
    926                          Reveal_Transfer_Buffer.frag = 1;
    927                          }
    928          
    929                          if (BIT_TEST((command->opcode), 7))
    930                          {
    931                          Reveal_Transfer_Buffer.mmp = 1;
    932                          }
    933                          // it overwrites the feedback
    934                          Reveal_Transfer_Buffer.cmd_fb = command->feedback;
    935                          memcpy(Reveal_Transfer_Buffer.payload,command->data,command->length);
    936                          Reveal_Transfer_Buffer.size = command->length;
    937          
    938          
    939                          if (Reveal_Queue_Reentry_Counter < REVEAL_QUEUE_MAX_REENTRIES)
    940                          {
    941                              Reveal_Queue_Reentry_Counter++;
    942          
    943                              reasoncode = RevealHandleParser(&Reveal_Transfer_Buffer,Reveal_Transfer_Buffer.cmd_fb, TRUE, REVEAL_FULL_SERACH_INTERNAL);
    944                              if (Reveal_Transfer_Buffer.cmd_fb == 0)
    945                              {
    946                                  // Command
    947                                  RevealHandleAckParser(Reveal_Transfer_Buffer.node_id,Reveal_Transfer_Buffer.api_id,Reveal_Transfer_Buffer.op_code,reasoncode,TRUE);
    948                              }
    949          
    950                              Reveal_Queue_Reentry_Counter--;
    951                              retval = TRUE;
    952                          }
    953                          else
    954                          {
    955                              retval = FALSE;
    956                              REVEAL_EXCEPTION_REENTRY_CNT_OVERLOADED(Reveal_Transfer_Buffer.api_id,Reveal_Transfer_Buffer.op_code);
    957                          }
    958                      }
    959                      ////////////////////////////End of Internal Routing ////////////////////////////////
    960          
    961                    #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
    962                      ////////////////////////////Start of External Routing ////////////////////////////////
    963                      if (send_external == TRUE)
    964                    #endif
    965                  #endif
    966                  #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
    967                      {
    968                          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
    969                              if (command->priority == TRUE)
   \                     ??Reveal__QueueCommand_1: (+1)
   \   00000060   0x788A             LDRB     R2,[R1, #+2]
   \   00000062   0x2045             MOVS     R0,#+69
   \   00000064   0xF3C2 0x1280      UBFX     R2,R2,#+6,#+1
   \   00000068   0x2A00             CMP      R2,#+0
   \   0000006A   0x78CA             LDRB     R2,[R1, #+3]
   \   0000006C   0xD01A             BEQ.N    ??Reveal__QueueCommand_4
    970                              {
    971                                  memcpy((uint8 *)&Reveal_Queue_Priority[Reveal_Queue_Priority_Write],(uint8 *)command,REVEAL_MSG_OVERHEAD + command->length);
   \   0000006E   0xF895 0x360F      LDRB     R3,[R5, #+1551]
   \   00000072   0xFB10 0x5003      SMLABB   R0,R0,R3,R5
   \   00000076   0x1D12             ADDS     R2,R2,#+4
   \   00000078   0xF500 0x6096      ADD      R0,R0,#+1200
   \   0000007C   0x.... 0x....      BL       __aeabi_memcpy
    972          
    973          
    974                                  // High Priority
    975                                  Reveal_Aux = Reveal_Queue_Priority_Write;
    976                                  Reveal_Aux++;
   \   00000080   0xF895 0x060F      LDRB     R0,[R5, #+1551]
   \   00000084   0x1C40             ADDS     R0,R0,#+1
    977                                  if (Reveal_Aux >= REVEAL_QUEUE_PRIORITY_SIZE)
   \   00000086   0xB2C0             UXTB     R0,R0
   \   00000088   0x2805             CMP      R0,#+5
   \   0000008A   0xBFA8             IT       GE 
    978                                  {
    979                                      Reveal_Aux = 0;
   \   0000008C   0x2000             MOVGE    R0,#+0
   \   0000008E   0xF885 0x0615      STRB     R0,[R5, #+1557]
    980                                  }
    981                                  if (Reveal_Aux != Reveal_Queue_Priority_Read)
   \   00000092   0xF895 0x1610      LDRB     R1,[R5, #+1552]
   \   00000096   0xF895 0x0615      LDRB     R0,[R5, #+1557]
   \   0000009A   0x4288             CMP      R0,R1
   \   0000009C   0xD01C             BEQ.N    ??Reveal__QueueCommand_0
    982                                  {
    983                                      Reveal_Queue_Priority_Write = Reveal_Aux;
   \   0000009E   0xF885 0x060F      STRB     R0,[R5, #+1551]
    984                                      retval = TRUE;
   \   000000A2   0xE018             B.N      ??Reveal__QueueCommand_5
    985                                  }
    986                                  else
    987                                  {
    988                                      REVEAL_QUEUE_OVERFLOW_PRIORITY_EXCEPTION(command->api,command->opcode);
    989                                  }
    990                              }
    991                              else
    992                          #endif
    993                              {
    994                                  memcpy(&Reveal_Queue[Reveal_Queue_Write],command,REVEAL_MSG_OVERHEAD + command->length);
   \                     ??Reveal__QueueCommand_4: (+1)
   \   000000A4   0xF895 0x360C      LDRB     R3,[R5, #+1548]
   \   000000A8   0xFB10 0x5003      SMLABB   R0,R0,R3,R5
   \   000000AC   0x1D12             ADDS     R2,R2,#+4
   \   000000AE   0x30A4             ADDS     R0,R0,#+164
   \   000000B0   0x.... 0x....      BL       __aeabi_memcpy
    995          
    996                                  Reveal_Aux = Reveal_Queue_Write;
    997                                  Reveal_Aux++;
   \   000000B4   0xF895 0x060C      LDRB     R0,[R5, #+1548]
   \   000000B8   0x1C40             ADDS     R0,R0,#+1
    998                                  if (Reveal_Aux >= REVEAL_QUEUE_SIZE)
   \   000000BA   0xB2C0             UXTB     R0,R0
   \   000000BC   0x280F             CMP      R0,#+15
   \   000000BE   0xBFA8             IT       GE 
    999                                  {
   1000                                      Reveal_Aux = 0;
   \   000000C0   0x2000             MOVGE    R0,#+0
   \   000000C2   0xF885 0x0615      STRB     R0,[R5, #+1557]
   1001                                  }
   1002                                  if (Reveal_Aux != Reveal_Queue_Read)
   \   000000C6   0xF895 0x160D      LDRB     R1,[R5, #+1549]
   \   000000CA   0xF895 0x0615      LDRB     R0,[R5, #+1557]
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xD002             BEQ.N    ??Reveal__QueueCommand_0
   1003                                  {
   1004                                      Reveal_Queue_Write = Reveal_Aux;
   \   000000D2   0xF885 0x060C      STRB     R0,[R5, #+1548]
   1005                                      retval = TRUE;
   \                     ??Reveal__QueueCommand_5: (+1)
   \   000000D6   0x2401             MOVS     R4,#+1
   1006                                  }
   1007                                  else
   1008                                  {
   1009                                      REVEALQUEUE_QUEUE_OVERFLOW_NORMAL_EXCEPTION(command->api,command->opcode);
   1010                                  }
   1011                              }
   1012                      }
   1013                      ////////////////////////////End of External Routing ////////////////////////////////
   1014                  #endif
   1015              }
   1016              return (retval);
   \                     ??Reveal__QueueCommand_0: (+1)
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0xB001             ADD      SP,SP,#+4
   \   000000DC   0xBDF0             POP      {R4-R7,PC}       ;; return
   1017          }
   1018          //---------------------------------------------------------------------------------------------------------------------
   1019          /**
   1020           * @brief This function returns the free space in the queue
   1021           * @return return free space in the priority queue
   1022           */

   \                                 In section .text, align 2, keep-with-next
   1023          uint8 Reveal__GetFreeQueueSpace(void)
   1024          {
   1025              uint8 retval;
   1026              retval = 0;
   1027          
   1028              if (Reveal_Queue_Write >= Reveal_Queue_Read)
   \                     Reveal__GetFreeQueueSpace: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0xF890 0x160D      LDRB     R1,[R0, #+1549]
   \   00000008   0xF890 0x060C      LDRB     R0,[R0, #+1548]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xBF27             ITTEE    CS 
   1029              {
   1030                  retval = REVEAL_QUEUE_SIZE - 1 - (   Reveal_Queue_Write  - Reveal_Queue_Read);
   \   00000010   0xF1C0 0x000E      RSBCS    R0,R0,#+14
   \   00000014   0x1808             ADDCS    R0,R1,R0
   1031              }
   1032              else
   1033              {
   1034                  retval = Reveal_Queue_Read - Reveal_Queue_Write - 1;
   \   00000016   0x1A08             SUBCC    R0,R1,R0
   \   00000018   0x1E40             SUBCC    R0,R0,#+1
   1035              }
   1036          
   1037              return(retval);
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x4770             BX       LR               ;; return
   1038          
   1039          }
   1040          //---------------------------------------------------------------------------------------------------------------------
   1041          /**
   1042           * @brief This Function returns the number of messages in the queue
   1043           * @return number of messages in queue
   1044           */

   \                                 In section .text, align 2, keep-with-next
   1045          uint8 Reveal__GetNumMessagesQueue(void)
   1046          {
   1047              uint8 retval;
   1048              retval = 0;
   1049          
   1050              if (Reveal_Queue_Write >= Reveal_Queue_Read)
   \                     Reveal__GetNumMessagesQueue: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0xF890 0x160D      LDRB     R1,[R0, #+1549]
   \   00000008   0xF890 0x060C      LDRB     R0,[R0, #+1548]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xBF2E             ITEE     CS 
   1051              {
   1052                  retval = Reveal_Queue_Write  - Reveal_Queue_Read;
   \   00000010   0x1A40             SUBCS    R0,R0,R1
   1053              }
   1054              else
   1055              {
   1056                  retval = REVEAL_QUEUE_SIZE - Reveal_Queue_Read + Reveal_Queue_Write;
   \   00000012   0xF1C1 0x010F      RSBCC    R1,R1,#+15
   \   00000016   0x1840             ADDCC    R0,R0,R1
   1057              }
   1058          
   1059              return(retval);
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0x4770             BX       LR               ;; return
   1060          }
   1061          //---------------------------------------------------------------------------------------------------------------------
   1062          /**
   1063           * @brief This function returns the free space in the priority queue
   1064           * @return return free space in the priority queue, if the priority queue is disable returns '0'
   1065           */

   \                                 In section .text, align 2, keep-with-next
   1066          uint8 Reveal__GetFreePriorityQueueSpace(void)
   1067          {
   1068              uint8 retval;
   1069              retval = 0;
   1070          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1071              if (Reveal_Queue_Priority_Write >= Reveal_Queue_Priority_Read)
   \                     Reveal__GetFreePriorityQueueSpace: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0xF890 0x1610      LDRB     R1,[R0, #+1552]
   \   00000008   0xF890 0x060F      LDRB     R0,[R0, #+1551]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xBF27             ITTEE    CS 
   1072              {
   1073                  retval = REVEAL_QUEUE_PRIORITY_SIZE - 1 - (   Reveal_Queue_Priority_Write  - Reveal_Queue_Priority_Read);
   \   00000010   0xF1C0 0x0004      RSBCS    R0,R0,#+4
   \   00000014   0x1808             ADDCS    R0,R1,R0
   1074              }
   1075              else
   1076              {
   1077                  retval = Reveal_Queue_Priority_Read - Reveal_Queue_Priority_Write - 1;
   \   00000016   0x1A08             SUBCC    R0,R1,R0
   \   00000018   0x1E40             SUBCC    R0,R0,#+1
   1078              }
   1079          #endif
   1080          
   1081              return(retval);
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x4770             BX       LR               ;; return
   1082          
   1083          }
   1084          //---------------------------------------------------------------------------------------------------------------------
   1085          /**
   1086           * @brief This Function returns the number of messages in the priority queue
   1087           * @return number of messages in priority queue, if the priority queue is disable returns '0'
   1088           */

   \                                 In section .text, align 2, keep-with-next
   1089          uint8 Reveal__GetNumMessagesPriorityQueue(void)
   1090          {
   1091              uint8 retval;
   1092              retval = 0;
   1093          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1094              if (Reveal_Queue_Priority_Write >= Reveal_Queue_Priority_Read)
   \                     Reveal__GetNumMessagesPriorityQueue: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0xF890 0x1610      LDRB     R1,[R0, #+1552]
   \   00000008   0xF890 0x060F      LDRB     R0,[R0, #+1551]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xBF2E             ITEE     CS 
   1095              {
   1096                  retval = Reveal_Queue_Priority_Write  - Reveal_Queue_Priority_Read;
   \   00000010   0x1A40             SUBCS    R0,R0,R1
   1097              }
   1098              else
   1099              {
   1100                  retval = REVEAL_QUEUE_PRIORITY_SIZE - Reveal_Queue_Priority_Read + Reveal_Queue_Priority_Write;
   \   00000012   0xF1C1 0x0105      RSBCC    R1,R1,#+5
   \   00000016   0x1840             ADDCC    R0,R0,R1
   1101              }
   1102          #endif
   1103          
   1104              return(retval);
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0x4770             BX       LR               ;; return
   1105          }
   1106          
   1107          //---------------------------------------------------------------------------------------------------------------------
   1108          /**
   1109           * @brief Send the command to configure the heartbeat time in another node.
   1110           * @param node
   1111           * @param time
   1112           */

   \                                 In section .text, align 4, keep-with-next
   1113          void Reveal__SetNodeHeartBeat(uint8 node, uint16 time)
   1114          {
   1115              REVEAL_COMMAND_TYPE * ptr;
   1116              if (node < 0xF)
   \                     Reveal__SetNodeHeartBeat: (+1)
   \   00000000   0x280F             CMP      R0,#+15
   \   00000002   0xDB00             BLT.N    ??Reveal__SetNodeHeartBeat_0
   \   00000004   0x4770             BX       LR
   1117              {
   1118                  ptr = Reveal__NewCommand(API001CORE_NUM,API001_SET_HEARTBEAT,node,2);
   \                     ??Reveal__SetNodeHeartBeat_0: (+1)
   \   00000006   0xB530             PUSH     {R4,R5,LR}
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable21
   \   0000000C   0xF8B4 0x2622      LDRH     R2,[R4, #+1570]
   \   00000010   0xB081             SUB      SP,SP,#+4
   \   00000012   0xB1EA             CBZ.N    R2,??Reveal__SetNodeHeartBeat_1
   \   00000014   0xF05F 0x0201      MOVS.W   R2,#+1
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable22
   \                     ??Reveal__SetNodeHeartBeat_2: (+1)
   \   0000001C   0xF813 0x5B01      LDRB     R5,[R3], #+1
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xBF1E             ITTT     NE 
   \   00000024   0x1C52             ADDNE    R2,R2,#+1
   \   00000026   0xF813 0x5B01      LDRBNE   R5,[R3], #+1
   \   0000002A   0x2D01             CMPNE    R5,#+1
   \   0000002C   0xBF1E             ITTT     NE 
   \   0000002E   0x1C52             ADDNE    R2,R2,#+1
   \   00000030   0xF813 0x5B01      LDRBNE   R5,[R3], #+1
   \   00000034   0x2D01             CMPNE    R5,#+1
   \   00000036   0xD004             BEQ.N    ??Reveal__SetNodeHeartBeat_3
   \   00000038   0x1C52             ADDS     R2,R2,#+1
   \   0000003A   0xB2D2             UXTB     R2,R2
   \   0000003C   0x2A13             CMP      R2,#+19
   \   0000003E   0xD3ED             BCC.N    ??Reveal__SetNodeHeartBeat_2
   \   00000040   0xE006             B.N      ??Reveal__SetNodeHeartBeat_1
   \                     ??Reveal__SetNodeHeartBeat_3: (+1)
   \   00000042   0xB2D2             UXTB     R2,R2
   \   00000044   0xEB04 0x0282      ADD      R2,R4,R2, LSL #+2
   \   00000048   0xF892 0x2634      LDRB     R2,[R2, #+1588]
   \   0000004C   0x0712             LSLS     R2,R2,#+28
   \   0000004E   0xD43A             BMI.N    ??Reveal__SetNodeHeartBeat_4
   \                     ??Reveal__SetNodeHeartBeat_1: (+1)
   \   00000050   0xF894 0x260C      LDRB     R2,[R4, #+1548]
   \   00000054   0x1C53             ADDS     R3,R2,#+1
   \   00000056   0xB2DB             UXTB     R3,R3
   \   00000058   0x2B0F             CMP      R3,#+15
   \   0000005A   0xBFA8             IT       GE 
   \   0000005C   0x2300             MOVGE    R3,#+0
   \   0000005E   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000062   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   00000066   0x429A             CMP      R2,R3
   \   00000068   0xBF27             ITTEE    CS 
   \   0000006A   0xF1C2 0x020E      RSBCS    R2,R2,#+14
   \   0000006E   0x189A             ADDCS    R2,R3,R2
   \   00000070   0x1A9A             SUBCC    R2,R3,R2
   \   00000072   0x1E52             SUBCC    R2,R2,#+1
   \   00000074   0xF894 0x5616      LDRB     R5,[R4, #+1558]
   \   00000078   0xB2D2             UXTB     R2,R2
   \   0000007A   0x42AA             CMP      R2,R5
   \   0000007C   0xBF88             IT       HI 
   \   0000007E   0x462A             MOVHI    R2,R5
   \   00000080   0xF884 0x2616      STRB     R2,[R4, #+1558]
   \   00000084   0xF894 0x2615      LDRB     R2,[R4, #+1557]
   \   00000088   0x429A             CMP      R2,R3
   \   0000008A   0xD01C             BEQ.N    ??Reveal__SetNodeHeartBeat_4
   \   0000008C   0x2201             MOVS     R2,#+1
   \   0000008E   0xF884 0x204C      STRB     R2,[R4, #+76]
   \   00000092   0x2203             MOVS     R2,#+3
   \   00000094   0xF884 0x204D      STRB     R2,[R4, #+77]
   \   00000098   0xF894 0x204E      LDRB     R2,[R4, #+78]
   \   0000009C   0xF360 0x0203      BFI      R2,R0,#+0,#+4
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   000000A6   0xF884 0x204E      STRB     R2,[R4, #+78]
   \   000000AA   0xF002 0x008F      AND      R0,R2,#0x8F
   \   000000AE   0xF884 0x004E      STRB     R0,[R4, #+78]
   1119                  if (ptr!=(REVEAL_COMMAND_TYPE *)NULL)
   1120                  {
   1121                      Reveal__AddDataU16(ptr,time);
   \   000000B2   0xF104 0x004C      ADD      R0,R4,#+76
   \   000000B6   0x.... 0x....      BL       Reveal__AddDataU16
   1122                      Reveal__QueueCommand(ptr);
   \   000000BA   0xF104 0x004C      ADD      R0,R4,#+76
   \   000000BE   0xB001             ADD      SP,SP,#+4
   \   000000C0   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   000000C4   0x....             B.N      Reveal__QueueCommand
   1123                  }
   1124              }
   1125          }
   \                     ??Reveal__SetNodeHeartBeat_4: (+1)
   \   000000C6   0xB001             ADD      SP,SP,#+4
   \   000000C8   0xBD30             POP      {R4,R5,PC}       ;; return
   1126          
   1127          //---------------------------------------------------------------------------------------------------------------------
   1128          /**
   1129           * @brief This method exposes the status of the nodes based on Reveal messages.
   1130           * @return
   1131           */

   \                                 In section .text, align 2, keep-with-next
   1132          uint16 Reveal__GetNodestatus(void)
   1133          {
   1134              return (Reveal_Node_Status);
   \                     Reveal__GetNodestatus: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0xF8B0 0x0620      LDRH     R0,[R0, #+1568]
   \   00000008   0x4770             BX       LR               ;; return
   1135          }
   1136          
   1137          #if (REVEAL_1S_EXTERNAL_REFFERENCE == ENABLED)
   1138          //---------------------------------------------------------------------------------------------------------------------
   1139          /**
   1140           * @brief External procedure to be called every 1s in order to generate the heart beat
   1141           */
   1142          void Reveal__1sHandler(void)
   1143          {
   1144              Reveal1sTasks();
   1145          
   1146              if (Reveal_Heartbeat_Timer > 0)
   1147              {
   1148                  uint8 nd;
   1149          
   1150                  for(nd=0;nd<sizeof(Reveal_Heartbeat_Node_Counter);nd++)
   1151                  {
   1152                      if (nd != LLC_OWN_ADDRESS)
   1153                      {
   1154                          if (Reveal_Heartbeat_Node_Counter[nd] > 0)
   1155                          {
   1156                              Reveal_Heartbeat_Node_Counter[nd]--;
   1157                              if (Reveal_Heartbeat_Node_Counter[nd] == 0)
   1158                              {
   1159                                  // Fault detected
   1160                                  BIT_CLR(Reveal_Node_Status,nd);
   1161                              }
   1162                          }
   1163                      }
   1164                  }
   1165              }
   1166          }
   1167          #endif
   1168          
   1169          //---------------------------------------------------------------------------------------------------------------------
   1170          /**
   1171           * @brief Add an 8-bit uint8 data type to a Reveal message.
   1172           * @param api - the api id of the command
   1173           * @param opcode - the opcode of the command
   1174           * @param node - the node id to send the message to
   1175           * @param is_command - TRUE = Command, FALSE = Feedback
   1176           * @param is_priority TRUE = Priority, FALSE = Normal
   1177            * @return result of the operation
   1178           *  @retval TRUE - Message was successfully queued
   1179           *  @retval FALSE - Message failed to queued
   1180           */

   \                                 In section .text, align 4, keep-with-next
   1181          BOOL_TYPE Reveal__QueueMessageNoData(uint8 api, uint8 opcode, uint8 node,BOOL_TYPE is_command, BOOL_TYPE is_priority )
                                                                                                                          ^
Remark[Pe826]: parameter "is_priority" was never referenced
   1182          {
   \                     Reveal__QueueMessageNoData: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1183              REVEAL_COMMAND_TYPE * ptr;
   1184              if(is_command == TRUE)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000006   0xF8B4 0x5622      LDRH     R5,[R4, #+1570]
   \   0000000A   0x2B01             CMP      R3,#+1
   \   0000000C   0xD15F             BNE.N    ??Reveal__QueueMessageNoData_0
   1185              {
   1186                  ptr = Reveal__NewCommand(api, opcode, node,0);
   \   0000000E   0xB305             CBZ.N    R5,??Reveal__QueueMessageNoData_1
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD015             BEQ.N    ??Reveal__QueueMessageNoData_2
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageNoData_3: (+1)
   \   0000001C   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xBF1E             ITTT     NE 
   \   00000024   0x1C5B             ADDNE    R3,R3,#+1
   \   00000026   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   0000002A   0x42B0             CMPNE    R0,R6
   \   0000002C   0xBF1E             ITTT     NE 
   \   0000002E   0x1C5B             ADDNE    R3,R3,#+1
   \   00000030   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000034   0x42B0             CMPNE    R0,R6
   \   00000036   0xD004             BEQ.N    ??Reveal__QueueMessageNoData_2
   \   00000038   0x1C5B             ADDS     R3,R3,#+1
   \   0000003A   0xB2DB             UXTB     R3,R3
   \   0000003C   0x2B13             CMP      R3,#+19
   \   0000003E   0xD3ED             BCC.N    ??Reveal__QueueMessageNoData_3
   \   00000040   0xE007             B.N      ??Reveal__QueueMessageNoData_1
   \                     ??Reveal__QueueMessageNoData_2: (+1)
   \   00000042   0xB2DB             UXTB     R3,R3
   \   00000044   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000048   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000004C   0x40CB             LSRS     R3,R3,R1
   \   0000004E   0x07DB             LSLS     R3,R3,#+31
   \   00000050   0xD43B             BMI.N    ??Reveal__QueueMessageNoData_4
   \                     ??Reveal__QueueMessageNoData_1: (+1)
   \   00000052   0x2A10             CMP      R2,#+16
   \   00000054   0xDA39             BGE.N    ??Reveal__QueueMessageNoData_4
   \   00000056   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000005A   0x1C6B             ADDS     R3,R5,#+1
   \   0000005C   0xB2DB             UXTB     R3,R3
   \   0000005E   0x2B0F             CMP      R3,#+15
   \   00000060   0xBFA8             IT       GE 
   \   00000062   0x2300             MOVGE    R3,#+0
   \   00000064   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000068   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000006C   0x429D             CMP      R5,R3
   \   0000006E   0xBF27             ITTEE    CS 
   \   00000070   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000074   0x195D             ADDCS    R5,R3,R5
   \   00000076   0x1B5D             SUBCC    R5,R3,R5
   \   00000078   0x1E6D             SUBCC    R5,R5,#+1
   \   0000007A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000007E   0xB2ED             UXTB     R5,R5
   \   00000080   0x42B5             CMP      R5,R6
   \   00000082   0xBF88             IT       HI 
   \   00000084   0x4635             MOVHI    R5,R6
   \   00000086   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000008A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000008E   0x429D             CMP      R5,R3
   \   00000090   0xD01B             BEQ.N    ??Reveal__QueueMessageNoData_4
   \   00000092   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000096   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000009A   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   0000009E   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   000000A2   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   000000AC   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000B0   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000B4   0xF040 0x0110      ORR      R1,R0,#0x10
   \   000000B8   0xF884 0x104E      STRB     R1,[R4, #+78]
   \   000000BC   0xF104 0x004C      ADD      R0,R4,#+76
   \   000000C0   0xF001 0x01EF      AND      R1,R1,#0xEF
   \   000000C4   0xF884 0x104E      STRB     R1,[R4, #+78]
   \   000000C8   0xE05A             B.N      ??Reveal__QueueMessageNoData_5
   \                     ??Reveal__QueueMessageNoData_4: (+1)
   \   000000CA   0x2000             MOVS     R0,#+0
   1187              }
   \   000000CC   0xE058             B.N      ??Reveal__QueueMessageNoData_5
   1188              else
   1189              {
   1190                  ptr = Reveal__NewFeedback(api, opcode, node,0);
   \                     ??Reveal__QueueMessageNoData_0: (+1)
   \   000000CE   0xB305             CBZ.N    R5,??Reveal__QueueMessageNoData_6
   \   000000D0   0x2300             MOVS     R3,#+0
   \   000000D2   0x2803             CMP      R0,#+3
   \   000000D4   0xD015             BEQ.N    ??Reveal__QueueMessageNoData_7
   \   000000D6   0x2301             MOVS     R3,#+1
   \   000000D8   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageNoData_8: (+1)
   \   000000DC   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   000000E0   0x42B0             CMP      R0,R6
   \   000000E2   0xBF1E             ITTT     NE 
   \   000000E4   0x1C5B             ADDNE    R3,R3,#+1
   \   000000E6   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000EA   0x42B0             CMPNE    R0,R6
   \   000000EC   0xBF1E             ITTT     NE 
   \   000000EE   0x1C5B             ADDNE    R3,R3,#+1
   \   000000F0   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000F4   0x42B0             CMPNE    R0,R6
   \   000000F6   0xD004             BEQ.N    ??Reveal__QueueMessageNoData_7
   \   000000F8   0x1C5B             ADDS     R3,R3,#+1
   \   000000FA   0xB2DB             UXTB     R3,R3
   \   000000FC   0x2B13             CMP      R3,#+19
   \   000000FE   0xD3ED             BCC.N    ??Reveal__QueueMessageNoData_8
   \   00000100   0xE007             B.N      ??Reveal__QueueMessageNoData_6
   \                     ??Reveal__QueueMessageNoData_7: (+1)
   \   00000102   0xB2DB             UXTB     R3,R3
   \   00000104   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000108   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000010C   0x40CB             LSRS     R3,R3,R1
   \   0000010E   0x07DB             LSLS     R3,R3,#+31
   \   00000110   0xD43B             BMI.N    ??Reveal__QueueMessageNoData_9
   \                     ??Reveal__QueueMessageNoData_6: (+1)
   \   00000112   0x2A10             CMP      R2,#+16
   \   00000114   0xDA39             BGE.N    ??Reveal__QueueMessageNoData_9
   \   00000116   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000011A   0x1C6B             ADDS     R3,R5,#+1
   \   0000011C   0xB2DB             UXTB     R3,R3
   \   0000011E   0x2B0F             CMP      R3,#+15
   \   00000120   0xBFA8             IT       GE 
   \   00000122   0x2300             MOVGE    R3,#+0
   \   00000124   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000128   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000012C   0x429D             CMP      R5,R3
   \   0000012E   0xBF27             ITTEE    CS 
   \   00000130   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000134   0x195D             ADDCS    R5,R3,R5
   \   00000136   0x1B5D             SUBCC    R5,R3,R5
   \   00000138   0x1E6D             SUBCC    R5,R5,#+1
   \   0000013A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000013E   0xB2ED             UXTB     R5,R5
   \   00000140   0x42B5             CMP      R5,R6
   \   00000142   0xBF88             IT       HI 
   \   00000144   0x4635             MOVHI    R5,R6
   \   00000146   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000014A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000014E   0x429D             CMP      R5,R3
   \   00000150   0xD01B             BEQ.N    ??Reveal__QueueMessageNoData_9
   \   00000152   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000156   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000015A   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   0000015E   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   00000162   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   0000016C   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000170   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000174   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000178   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   0000017C   0xF104 0x004C      ADD      R0,R4,#+76
   1191              }
   1192              if (ptr != (REVEAL_COMMAND_TYPE *) NULL)
   \                     ??Reveal__QueueMessageNoData_5: (+1)
   \   00000180   0xB118             CBZ.N    R0,??Reveal__QueueMessageNoData_9
   1193              {
   1194                  Reveal__QueueCommand(ptr);
   \   00000182   0x.... 0x....      BL       Reveal__QueueCommand
   1195                  return (TRUE);
   \   00000186   0x2001             MOVS     R0,#+1
   \   00000188   0xBD70             POP      {R4-R6,PC}
   1196              }
   1197              else
   1198              {
   1199                  return(FALSE);
   \                     ??Reveal__QueueMessageNoData_9: (+1)
   \   0000018A   0x2000             MOVS     R0,#+0
   \   0000018C   0xBD70             POP      {R4-R6,PC}       ;; return
   1200              }
   1201          
   1202          
   1203          }
   1204          
   1205          //---------------------------------------------------------------------------------------------------------------------
   1206          /**
   1207           * @brief Add an 8-bit uint8 data type to a Reveal message.
   1208           * @param api - the api id of the command
   1209           * @param opcode - the opcode of the command
   1210           * @param node - the node id to send the message to
   1211           * @param is_command - TRUE = Command, FALSE = Feedback
   1212           * @param is_priority TRUE = Priority, FALSE = Normal
   1213           * @param data - the data byte to add to the message
   1214           * @return result of the operation
   1215           *  @retval TRUE - Message was successfully queued
   1216           *  @retval FALSE - Message failed to queued
   1217           */

   \                                 In section .text, align 4, keep-with-next
   1218          BOOL_TYPE Reveal__QueueMessageU8(uint8 api, uint8 opcode, uint8 node,BOOL_TYPE is_command, BOOL_TYPE is_priority,uint8 data )
                                                                                                                      ^
Remark[Pe826]: parameter "is_priority" was never referenced
   1219          {
   \                     Reveal__QueueMessageU8: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1220              REVEAL_COMMAND_TYPE * ptr;
   1221              if(is_command == TRUE)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000006   0xF8B4 0x5622      LDRH     R5,[R4, #+1570]
   \   0000000A   0x2B01             CMP      R3,#+1
   \   0000000C   0xD15F             BNE.N    ??Reveal__QueueMessageU8_0
   1222              {
   1223                  ptr = Reveal__NewCommand(api, opcode, node,1);
   \   0000000E   0xB305             CBZ.N    R5,??Reveal__QueueMessageU8_1
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD015             BEQ.N    ??Reveal__QueueMessageU8_2
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageU8_3: (+1)
   \   0000001C   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xBF1E             ITTT     NE 
   \   00000024   0x1C5B             ADDNE    R3,R3,#+1
   \   00000026   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   0000002A   0x42B0             CMPNE    R0,R6
   \   0000002C   0xBF1E             ITTT     NE 
   \   0000002E   0x1C5B             ADDNE    R3,R3,#+1
   \   00000030   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000034   0x42B0             CMPNE    R0,R6
   \   00000036   0xD004             BEQ.N    ??Reveal__QueueMessageU8_2
   \   00000038   0x1C5B             ADDS     R3,R3,#+1
   \   0000003A   0xB2DB             UXTB     R3,R3
   \   0000003C   0x2B13             CMP      R3,#+19
   \   0000003E   0xD3ED             BCC.N    ??Reveal__QueueMessageU8_3
   \   00000040   0xE007             B.N      ??Reveal__QueueMessageU8_1
   \                     ??Reveal__QueueMessageU8_2: (+1)
   \   00000042   0xB2DB             UXTB     R3,R3
   \   00000044   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000048   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000004C   0x40CB             LSRS     R3,R3,R1
   \   0000004E   0x07DB             LSLS     R3,R3,#+31
   \   00000050   0xD43B             BMI.N    ??Reveal__QueueMessageU8_4
   \                     ??Reveal__QueueMessageU8_1: (+1)
   \   00000052   0x2A10             CMP      R2,#+16
   \   00000054   0xDA39             BGE.N    ??Reveal__QueueMessageU8_4
   \   00000056   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000005A   0x1C6B             ADDS     R3,R5,#+1
   \   0000005C   0xB2DB             UXTB     R3,R3
   \   0000005E   0x2B0F             CMP      R3,#+15
   \   00000060   0xBFA8             IT       GE 
   \   00000062   0x2300             MOVGE    R3,#+0
   \   00000064   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000068   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000006C   0x429D             CMP      R5,R3
   \   0000006E   0xBF27             ITTEE    CS 
   \   00000070   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000074   0x195D             ADDCS    R5,R3,R5
   \   00000076   0x1B5D             SUBCC    R5,R3,R5
   \   00000078   0x1E6D             SUBCC    R5,R5,#+1
   \   0000007A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000007E   0xB2ED             UXTB     R5,R5
   \   00000080   0x42B5             CMP      R5,R6
   \   00000082   0xBF88             IT       HI 
   \   00000084   0x4635             MOVHI    R5,R6
   \   00000086   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000008A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000008E   0x429D             CMP      R5,R3
   \   00000090   0xD01B             BEQ.N    ??Reveal__QueueMessageU8_4
   \   00000092   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000096   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000009A   0xF104 0x014C      ADD      R1,R4,#+76
   \   0000009E   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000A2   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   000000A6   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   000000B0   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000B4   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000B8   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000BC   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C0   0xF000 0x00EF      AND      R0,R0,#0xEF
   \   000000C4   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C8   0xE05A             B.N      ??Reveal__QueueMessageU8_5
   \                     ??Reveal__QueueMessageU8_4: (+1)
   \   000000CA   0x2100             MOVS     R1,#+0
   1224              }
   \   000000CC   0xE058             B.N      ??Reveal__QueueMessageU8_5
   1225              else
   1226              {
   1227                  ptr = Reveal__NewFeedback(api, opcode, node,1);
   \                     ??Reveal__QueueMessageU8_0: (+1)
   \   000000CE   0xB305             CBZ.N    R5,??Reveal__QueueMessageU8_6
   \   000000D0   0x2300             MOVS     R3,#+0
   \   000000D2   0x2803             CMP      R0,#+3
   \   000000D4   0xD015             BEQ.N    ??Reveal__QueueMessageU8_7
   \   000000D6   0x2301             MOVS     R3,#+1
   \   000000D8   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageU8_8: (+1)
   \   000000DC   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   000000E0   0x42B0             CMP      R0,R6
   \   000000E2   0xBF1E             ITTT     NE 
   \   000000E4   0x1C5B             ADDNE    R3,R3,#+1
   \   000000E6   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000EA   0x42B0             CMPNE    R0,R6
   \   000000EC   0xBF1E             ITTT     NE 
   \   000000EE   0x1C5B             ADDNE    R3,R3,#+1
   \   000000F0   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000F4   0x42B0             CMPNE    R0,R6
   \   000000F6   0xD004             BEQ.N    ??Reveal__QueueMessageU8_7
   \   000000F8   0x1C5B             ADDS     R3,R3,#+1
   \   000000FA   0xB2DB             UXTB     R3,R3
   \   000000FC   0x2B13             CMP      R3,#+19
   \   000000FE   0xD3ED             BCC.N    ??Reveal__QueueMessageU8_8
   \   00000100   0xE007             B.N      ??Reveal__QueueMessageU8_6
   \                     ??Reveal__QueueMessageU8_7: (+1)
   \   00000102   0xB2DB             UXTB     R3,R3
   \   00000104   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000108   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000010C   0x40CB             LSRS     R3,R3,R1
   \   0000010E   0x07DB             LSLS     R3,R3,#+31
   \   00000110   0xD445             BMI.N    ??Reveal__QueueMessageU8_9
   \                     ??Reveal__QueueMessageU8_6: (+1)
   \   00000112   0x2A10             CMP      R2,#+16
   \   00000114   0xDA43             BGE.N    ??Reveal__QueueMessageU8_9
   \   00000116   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000011A   0x1C6B             ADDS     R3,R5,#+1
   \   0000011C   0xB2DB             UXTB     R3,R3
   \   0000011E   0x2B0F             CMP      R3,#+15
   \   00000120   0xBFA8             IT       GE 
   \   00000122   0x2300             MOVGE    R3,#+0
   \   00000124   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000128   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000012C   0x429D             CMP      R5,R3
   \   0000012E   0xBF27             ITTEE    CS 
   \   00000130   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000134   0x195D             ADDCS    R5,R3,R5
   \   00000136   0x1B5D             SUBCC    R5,R3,R5
   \   00000138   0x1E6D             SUBCC    R5,R5,#+1
   \   0000013A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000013E   0xB2ED             UXTB     R5,R5
   \   00000140   0x42B5             CMP      R5,R6
   \   00000142   0xBF88             IT       HI 
   \   00000144   0x4635             MOVHI    R5,R6
   \   00000146   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000014A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000014E   0x429D             CMP      R5,R3
   \   00000150   0xD025             BEQ.N    ??Reveal__QueueMessageU8_9
   \   00000152   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000156   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000015A   0xF104 0x014C      ADD      R1,R4,#+76
   \   0000015E   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000162   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   00000166   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   00000170   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000174   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000178   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000017C   0xF884 0x004E      STRB     R0,[R4, #+78]
   1228              }
   1229              if (ptr != (REVEAL_COMMAND_TYPE *) NULL)
   \                     ??Reveal__QueueMessageU8_5: (+1)
   \   00000180   0xB169             CBZ.N    R1,??Reveal__QueueMessageU8_9
   1230              {
   1231                  Reveal__AddDataU8(ptr, data);
   \   00000182   0x78CA             LDRB     R2,[R1, #+3]
   \   00000184   0x2A41             CMP      R2,#+65
   \   00000186   0xDA05             BGE.N    ??Reveal__QueueMessageU8_10
   \   00000188   0x9805             LDR      R0,[SP, #+20]
   \   0000018A   0x1852             ADDS     R2,R2,R1
   \   0000018C   0x7110             STRB     R0,[R2, #+4]
   \   0000018E   0x78C8             LDRB     R0,[R1, #+3]
   \   00000190   0x1C40             ADDS     R0,R0,#+1
   \   00000192   0x70C8             STRB     R0,[R1, #+3]
   1232                  Reveal__QueueCommand(ptr);
   \                     ??Reveal__QueueMessageU8_10: (+1)
   \   00000194   0x4608             MOV      R0,R1
   \   00000196   0x.... 0x....      BL       Reveal__QueueCommand
   1233                  return (TRUE);
   \   0000019A   0x2001             MOVS     R0,#+1
   \   0000019C   0xBD70             POP      {R4-R6,PC}
   1234              }
   1235              else
   1236              {
   1237                  return(FALSE);
   \                     ??Reveal__QueueMessageU8_9: (+1)
   \   0000019E   0x2000             MOVS     R0,#+0
   \   000001A0   0xBD70             POP      {R4-R6,PC}       ;; return
   1238              }
   1239          
   1240          
   1241          }
   1242          
   1243          //---------------------------------------------------------------------------------------------------------------------
   1244          /**
   1245           * @brief Add a 16-bit uint16 data type to a Reveal message.
   1246           * @param api - the api id of the command
   1247           * @param opcode - the opcode of the command
   1248           * @param node - the node id to send the message to
   1249           * @param is_command TRUE = Command, FALSE = Feedback
   1250           * @param is_priority TRUE = Priority, FALSE = Normal
   1251           * @param data - the 16-bit data to add to the message
   1252           * @return result of the operation
   1253           *  @retval TRUE - Message was successfully queued
   1254           *  @retval FALSE - Message failed to queued
   1255           */

   \                                 In section .text, align 4, keep-with-next
   1256          BOOL_TYPE Reveal__QueueMessageU16(uint8 api, uint8 opcode, uint8 node,BOOL_TYPE is_command ,BOOL_TYPE is_priority, uint16 data)
                                                                                                                       ^
Remark[Pe826]: parameter "is_priority" was never referenced
   1257          {
   \                     Reveal__QueueMessageU16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1258              REVEAL_COMMAND_TYPE * ptr;
   1259              if(is_command == TRUE)
   \   00000002   0x....             LDR.N    R4,??DataTable21
   \   00000004   0xF8B4 0x5622      LDRH     R5,[R4, #+1570]
   \   00000008   0x2B01             CMP      R3,#+1
   \   0000000A   0xD160             BNE.N    ??Reveal__QueueMessageU16_0
   1260              {
   1261                  ptr = Reveal__NewCommand(api, opcode, node,2);
   \   0000000C   0xB30D             CBZ.N    R5,??Reveal__QueueMessageU16_1
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD016             BEQ.N    ??Reveal__QueueMessageU16_2
   \   00000014   0xF05F 0x0301      MOVS.W   R3,#+1
   \   00000018   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageU16_3: (+1)
   \   0000001C   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xBF1E             ITTT     NE 
   \   00000024   0x1C5B             ADDNE    R3,R3,#+1
   \   00000026   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   0000002A   0x42B0             CMPNE    R0,R6
   \   0000002C   0xBF1E             ITTT     NE 
   \   0000002E   0x1C5B             ADDNE    R3,R3,#+1
   \   00000030   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000034   0x42B0             CMPNE    R0,R6
   \   00000036   0xD004             BEQ.N    ??Reveal__QueueMessageU16_2
   \   00000038   0x1C5B             ADDS     R3,R3,#+1
   \   0000003A   0xB2DB             UXTB     R3,R3
   \   0000003C   0x2B13             CMP      R3,#+19
   \   0000003E   0xD3ED             BCC.N    ??Reveal__QueueMessageU16_3
   \   00000040   0xE007             B.N      ??Reveal__QueueMessageU16_1
   \                     ??Reveal__QueueMessageU16_2: (+1)
   \   00000042   0xB2DB             UXTB     R3,R3
   \   00000044   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000048   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000004C   0x40CB             LSRS     R3,R3,R1
   \   0000004E   0x07DB             LSLS     R3,R3,#+31
   \   00000050   0xD43B             BMI.N    ??Reveal__QueueMessageU16_4
   \                     ??Reveal__QueueMessageU16_1: (+1)
   \   00000052   0x2A10             CMP      R2,#+16
   \   00000054   0xDA39             BGE.N    ??Reveal__QueueMessageU16_4
   \   00000056   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000005A   0x1C6B             ADDS     R3,R5,#+1
   \   0000005C   0xB2DB             UXTB     R3,R3
   \   0000005E   0x2B0F             CMP      R3,#+15
   \   00000060   0xBFA8             IT       GE 
   \   00000062   0x2300             MOVGE    R3,#+0
   \   00000064   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000068   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000006C   0x429D             CMP      R5,R3
   \   0000006E   0xBF27             ITTEE    CS 
   \   00000070   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000074   0x195D             ADDCS    R5,R3,R5
   \   00000076   0x1B5D             SUBCC    R5,R3,R5
   \   00000078   0x1E6D             SUBCC    R5,R5,#+1
   \   0000007A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000007E   0xB2ED             UXTB     R5,R5
   \   00000080   0x42B5             CMP      R5,R6
   \   00000082   0xBF88             IT       HI 
   \   00000084   0x4635             MOVHI    R5,R6
   \   00000086   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000008A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000008E   0x429D             CMP      R5,R3
   \   00000090   0xD01B             BEQ.N    ??Reveal__QueueMessageU16_4
   \   00000092   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000096   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000009A   0xF104 0x054C      ADD      R5,R4,#+76
   \   0000009E   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000A2   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   000000A6   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   000000B0   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000B4   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000B8   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000BC   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C0   0xF000 0x00EF      AND      R0,R0,#0xEF
   \   000000C4   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C8   0xE05A             B.N      ??Reveal__QueueMessageU16_5
   \                     ??Reveal__QueueMessageU16_4: (+1)
   \   000000CA   0x2500             MOVS     R5,#+0
   1262              }
   \   000000CC   0xE058             B.N      ??Reveal__QueueMessageU16_5
   1263              else
   1264              {
   1265                  ptr = Reveal__NewFeedback(api, opcode, node,2);
   \                     ??Reveal__QueueMessageU16_0: (+1)
   \   000000CE   0xB305             CBZ.N    R5,??Reveal__QueueMessageU16_6
   \   000000D0   0x2300             MOVS     R3,#+0
   \   000000D2   0x2803             CMP      R0,#+3
   \   000000D4   0xD015             BEQ.N    ??Reveal__QueueMessageU16_7
   \   000000D6   0x2301             MOVS     R3,#+1
   \   000000D8   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageU16_8: (+1)
   \   000000DC   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   000000E0   0x42B0             CMP      R0,R6
   \   000000E2   0xBF1E             ITTT     NE 
   \   000000E4   0x1C5B             ADDNE    R3,R3,#+1
   \   000000E6   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000EA   0x42B0             CMPNE    R0,R6
   \   000000EC   0xBF1E             ITTT     NE 
   \   000000EE   0x1C5B             ADDNE    R3,R3,#+1
   \   000000F0   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000F4   0x42B0             CMPNE    R0,R6
   \   000000F6   0xD004             BEQ.N    ??Reveal__QueueMessageU16_7
   \   000000F8   0x1C5B             ADDS     R3,R3,#+1
   \   000000FA   0xB2DB             UXTB     R3,R3
   \   000000FC   0x2B13             CMP      R3,#+19
   \   000000FE   0xD3ED             BCC.N    ??Reveal__QueueMessageU16_8
   \   00000100   0xE007             B.N      ??Reveal__QueueMessageU16_6
   \                     ??Reveal__QueueMessageU16_7: (+1)
   \   00000102   0xB2DB             UXTB     R3,R3
   \   00000104   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000108   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000010C   0x40CB             LSRS     R3,R3,R1
   \   0000010E   0x07DB             LSLS     R3,R3,#+31
   \   00000110   0xD440             BMI.N    ??Reveal__QueueMessageU16_9
   \                     ??Reveal__QueueMessageU16_6: (+1)
   \   00000112   0x2A10             CMP      R2,#+16
   \   00000114   0xDA3E             BGE.N    ??Reveal__QueueMessageU16_9
   \   00000116   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000011A   0x1C6B             ADDS     R3,R5,#+1
   \   0000011C   0xB2DB             UXTB     R3,R3
   \   0000011E   0x2B0F             CMP      R3,#+15
   \   00000120   0xBFA8             IT       GE 
   \   00000122   0x2300             MOVGE    R3,#+0
   \   00000124   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000128   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000012C   0x429D             CMP      R5,R3
   \   0000012E   0xBF27             ITTEE    CS 
   \   00000130   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000134   0x195D             ADDCS    R5,R3,R5
   \   00000136   0x1B5D             SUBCC    R5,R3,R5
   \   00000138   0x1E6D             SUBCC    R5,R5,#+1
   \   0000013A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000013E   0xB2ED             UXTB     R5,R5
   \   00000140   0x42B5             CMP      R5,R6
   \   00000142   0xBF88             IT       HI 
   \   00000144   0x4635             MOVHI    R5,R6
   \   00000146   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000014A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000014E   0x429D             CMP      R5,R3
   \   00000150   0xD020             BEQ.N    ??Reveal__QueueMessageU16_9
   \   00000152   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000156   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000015A   0xF104 0x054C      ADD      R5,R4,#+76
   \   0000015E   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000162   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   00000166   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   00000170   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000174   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000178   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000017C   0xF884 0x004E      STRB     R0,[R4, #+78]
   1266              }
   1267              if (ptr != (REVEAL_COMMAND_TYPE *) NULL)
   \                     ??Reveal__QueueMessageU16_5: (+1)
   \   00000180   0xB145             CBZ.N    R5,??Reveal__QueueMessageU16_9
   1268              {
   1269                  Reveal__AddDataU16(ptr, data);
   \   00000182   0x4628             MOV      R0,R5
   \   00000184   0x9905             LDR      R1,[SP, #+20]
   \   00000186   0x.... 0x....      BL       Reveal__AddDataU16
   1270                  Reveal__QueueCommand(ptr);
   \   0000018A   0x4628             MOV      R0,R5
   \   0000018C   0x.... 0x....      BL       Reveal__QueueCommand
   1271                  return(TRUE);
   \   00000190   0x2001             MOVS     R0,#+1
   \   00000192   0xBD70             POP      {R4-R6,PC}
   1272              }
   1273              else
   1274              {
   1275                  return(FALSE);
   \                     ??Reveal__QueueMessageU16_9: (+1)
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0xBD70             POP      {R4-R6,PC}       ;; return
   1276              }
   1277          }
   1278          
   1279          //---------------------------------------------------------------------------------------------------------------------
   1280          /**
   1281           * @brief Add a 16-bit sint16 data type to a Reveal message.
   1282           * @param api - the api id of the command
   1283           * @param opcode - the opcode of the command
   1284           * @param node - the node id to send the message to
   1285           * @param is_command TRUE = Command, FALSE = Feedback
   1286           * @param is_priority TRUE = Priority, FALSE = Normal
   1287           * @param data - the 16-bit data to add to the message
   1288           * @return result of the operation
   1289           *  @retval TRUE - Message was successfully queued
   1290           *  @retval FALSE - Message failed to queued
   1291           */

   \                                 In section .text, align 4, keep-with-next
   1292          BOOL_TYPE Reveal__QueueMessageS16(uint8 api, uint8 opcode, uint8 node,BOOL_TYPE is_command ,BOOL_TYPE is_priority, sint16 data)
                                                                                                                       ^
Remark[Pe826]: parameter "is_priority" was never referenced
   1293          {
   \                     Reveal__QueueMessageS16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1294              REVEAL_COMMAND_TYPE * ptr;
   1295              if(is_command == TRUE)
   \   00000002   0x....             LDR.N    R4,??DataTable21
   \   00000004   0xF8B4 0x5622      LDRH     R5,[R4, #+1570]
   \   00000008   0x2B01             CMP      R3,#+1
   \   0000000A   0xD15E             BNE.N    ??Reveal__QueueMessageS16_0
   1296              {
   1297                  ptr = Reveal__NewCommand(api, opcode, node,2);
   \   0000000C   0xB1FD             CBZ.N    R5,??Reveal__QueueMessageS16_1
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD014             BEQ.N    ??Reveal__QueueMessageS16_2
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0x....             LDR.N    R5,??DataTable22
   \                     ??Reveal__QueueMessageS16_3: (+1)
   \   00000018   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   0000001C   0x42B0             CMP      R0,R6
   \   0000001E   0xBF1E             ITTT     NE 
   \   00000020   0x1C5B             ADDNE    R3,R3,#+1
   \   00000022   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000026   0x42B0             CMPNE    R0,R6
   \   00000028   0xBF1E             ITTT     NE 
   \   0000002A   0x1C5B             ADDNE    R3,R3,#+1
   \   0000002C   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000030   0x42B0             CMPNE    R0,R6
   \   00000032   0xD004             BEQ.N    ??Reveal__QueueMessageS16_2
   \   00000034   0x1C5B             ADDS     R3,R3,#+1
   \   00000036   0xB2DB             UXTB     R3,R3
   \   00000038   0x2B13             CMP      R3,#+19
   \   0000003A   0xD3ED             BCC.N    ??Reveal__QueueMessageS16_3
   \   0000003C   0xE007             B.N      ??Reveal__QueueMessageS16_1
   \                     ??Reveal__QueueMessageS16_2: (+1)
   \   0000003E   0xB2DB             UXTB     R3,R3
   \   00000040   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000044   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   00000048   0x40CB             LSRS     R3,R3,R1
   \   0000004A   0x07DB             LSLS     R3,R3,#+31
   \   0000004C   0xD43B             BMI.N    ??Reveal__QueueMessageS16_4
   \                     ??Reveal__QueueMessageS16_1: (+1)
   \   0000004E   0x2A10             CMP      R2,#+16
   \   00000050   0xDA39             BGE.N    ??Reveal__QueueMessageS16_4
   \   00000052   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   00000056   0x1C6B             ADDS     R3,R5,#+1
   \   00000058   0xB2DB             UXTB     R3,R3
   \   0000005A   0x2B0F             CMP      R3,#+15
   \   0000005C   0xBFA8             IT       GE 
   \   0000005E   0x2300             MOVGE    R3,#+0
   \   00000060   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000064   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   00000068   0x429D             CMP      R5,R3
   \   0000006A   0xBF27             ITTEE    CS 
   \   0000006C   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000070   0x195D             ADDCS    R5,R3,R5
   \   00000072   0x1B5D             SUBCC    R5,R3,R5
   \   00000074   0x1E6D             SUBCC    R5,R5,#+1
   \   00000076   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000007A   0xB2ED             UXTB     R5,R5
   \   0000007C   0x42B5             CMP      R5,R6
   \   0000007E   0xBF88             IT       HI 
   \   00000080   0x4635             MOVHI    R5,R6
   \   00000082   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   00000086   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000008A   0x429D             CMP      R5,R3
   \   0000008C   0xD01B             BEQ.N    ??Reveal__QueueMessageS16_4
   \   0000008E   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000092   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   00000096   0xF104 0x054C      ADD      R5,R4,#+76
   \   0000009A   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   0000009E   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   000000A2   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   000000AC   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000B0   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000B4   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000B8   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000BC   0xF000 0x00EF      AND      R0,R0,#0xEF
   \   000000C0   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C4   0xE05A             B.N      ??Reveal__QueueMessageS16_5
   \                     ??Reveal__QueueMessageS16_4: (+1)
   \   000000C6   0x2500             MOVS     R5,#+0
   1298              }
   \   000000C8   0xE058             B.N      ??Reveal__QueueMessageS16_5
   1299              else
   1300              {
   1301                  ptr = Reveal__NewFeedback(api, opcode, node,2);
   \                     ??Reveal__QueueMessageS16_0: (+1)
   \   000000CA   0xB305             CBZ.N    R5,??Reveal__QueueMessageS16_6
   \   000000CC   0x2300             MOVS     R3,#+0
   \   000000CE   0x2803             CMP      R0,#+3
   \   000000D0   0xD015             BEQ.N    ??Reveal__QueueMessageS16_7
   \   000000D2   0x2301             MOVS     R3,#+1
   \   000000D4   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageS16_8: (+1)
   \   000000D8   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   000000DC   0x42B0             CMP      R0,R6
   \   000000DE   0xBF1E             ITTT     NE 
   \   000000E0   0x1C5B             ADDNE    R3,R3,#+1
   \   000000E2   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000E6   0x42B0             CMPNE    R0,R6
   \   000000E8   0xBF1E             ITTT     NE 
   \   000000EA   0x1C5B             ADDNE    R3,R3,#+1
   \   000000EC   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000F0   0x42B0             CMPNE    R0,R6
   \   000000F2   0xD004             BEQ.N    ??Reveal__QueueMessageS16_7
   \   000000F4   0x1C5B             ADDS     R3,R3,#+1
   \   000000F6   0xB2DB             UXTB     R3,R3
   \   000000F8   0x2B13             CMP      R3,#+19
   \   000000FA   0xD3ED             BCC.N    ??Reveal__QueueMessageS16_8
   \   000000FC   0xE007             B.N      ??Reveal__QueueMessageS16_6
   \                     ??Reveal__QueueMessageS16_7: (+1)
   \   000000FE   0xB2DB             UXTB     R3,R3
   \   00000100   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000104   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   00000108   0x40CB             LSRS     R3,R3,R1
   \   0000010A   0x07DB             LSLS     R3,R3,#+31
   \   0000010C   0xD441             BMI.N    ??Reveal__QueueMessageS16_9
   \                     ??Reveal__QueueMessageS16_6: (+1)
   \   0000010E   0x2A10             CMP      R2,#+16
   \   00000110   0xDA3F             BGE.N    ??Reveal__QueueMessageS16_9
   \   00000112   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   00000116   0x1C6B             ADDS     R3,R5,#+1
   \   00000118   0xB2DB             UXTB     R3,R3
   \   0000011A   0x2B0F             CMP      R3,#+15
   \   0000011C   0xBFA8             IT       GE 
   \   0000011E   0x2300             MOVGE    R3,#+0
   \   00000120   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000124   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   00000128   0x429D             CMP      R5,R3
   \   0000012A   0xBF27             ITTEE    CS 
   \   0000012C   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000130   0x195D             ADDCS    R5,R3,R5
   \   00000132   0x1B5D             SUBCC    R5,R3,R5
   \   00000134   0x1E6D             SUBCC    R5,R5,#+1
   \   00000136   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000013A   0xB2ED             UXTB     R5,R5
   \   0000013C   0x42B5             CMP      R5,R6
   \   0000013E   0xBF88             IT       HI 
   \   00000140   0x4635             MOVHI    R5,R6
   \   00000142   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   00000146   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000014A   0x429D             CMP      R5,R3
   \   0000014C   0xD021             BEQ.N    ??Reveal__QueueMessageS16_9
   \   0000014E   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000152   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   00000156   0xF104 0x054C      ADD      R5,R4,#+76
   \   0000015A   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   0000015E   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   00000162   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   0000016C   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000170   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000174   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000178   0xF884 0x004E      STRB     R0,[R4, #+78]
   1302              }
   1303              if (ptr != (REVEAL_COMMAND_TYPE *) NULL)
   \                     ??Reveal__QueueMessageS16_5: (+1)
   \   0000017C   0xB14D             CBZ.N    R5,??Reveal__QueueMessageS16_9
   1304              {
   1305                  Reveal__AddDataS16(ptr, data);
   \   0000017E   0x4628             MOV      R0,R5
   \   00000180   0xF9BD 0x1014      LDRSH    R1,[SP, #+20]
   \   00000184   0x.... 0x....      BL       Reveal__AddDataS16
   1306                  Reveal__QueueCommand(ptr);
   \   00000188   0x4628             MOV      R0,R5
   \   0000018A   0x.... 0x....      BL       Reveal__QueueCommand
   1307                  return(TRUE);
   \   0000018E   0x2001             MOVS     R0,#+1
   \   00000190   0xBD70             POP      {R4-R6,PC}
   1308              }
   1309              else
   1310              {
   1311                  return(FALSE);
   \                     ??Reveal__QueueMessageS16_9: (+1)
   \   00000192   0x2000             MOVS     R0,#+0
   \   00000194   0xBD70             POP      {R4-R6,PC}       ;; return
   1312              }
   1313          }
   1314          
   1315          //---------------------------------------------------------------------------------------------------------------------
   1316          /**
   1317           * @brief Add a 32-bit uint32 data type to a Reveal message.
   1318           * @param api - the api id of the command
   1319           * @param opcode - the opcode of the command
   1320           * @param node - the node id to send the message to
   1321           * @param is_command TRUE = Command, FALSE = Feedback
   1322           * @param is_priority TRUE = Priority, FALSE = Normal
   1323           * @param data - the 32-bit data to add to the message
   1324           * @return result of the operation
   1325           *  @retval TRUE - Message was successfully queued
   1326           *  @retval FALSE - Message failed to queued
   1327           */

   \                                 In section .text, align 4, keep-with-next
   1328          BOOL_TYPE Reveal__QueueMessageU32(uint8 api, uint8 opcode, uint8 node,BOOL_TYPE is_command ,BOOL_TYPE is_priority, uint32 data)
                                                                                                                       ^
Remark[Pe826]: parameter "is_priority" was never referenced
   1329          {
   \                     Reveal__QueueMessageU32: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1330              REVEAL_COMMAND_TYPE * ptr;
   1331              if(is_command == TRUE)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable24
   \   00000006   0xF8B4 0x5622      LDRH     R5,[R4, #+1570]
   \   0000000A   0x2B01             CMP      R3,#+1
   \   0000000C   0xD15F             BNE.N    ??Reveal__QueueMessageU32_0
   1332              {
   1333                  ptr = Reveal__NewCommand(api, opcode, node,4);
   \   0000000E   0xB305             CBZ.N    R5,??Reveal__QueueMessageU32_1
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD015             BEQ.N    ??Reveal__QueueMessageU32_2
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x.... 0x....      LDR.W    R5,??DataTable22
   \                     ??Reveal__QueueMessageU32_3: (+1)
   \   0000001C   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xBF1E             ITTT     NE 
   \   00000024   0x1C5B             ADDNE    R3,R3,#+1
   \   00000026   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   0000002A   0x42B0             CMPNE    R0,R6
   \   0000002C   0xBF1E             ITTT     NE 
   \   0000002E   0x1C5B             ADDNE    R3,R3,#+1
   \   00000030   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   00000034   0x42B0             CMPNE    R0,R6
   \   00000036   0xD004             BEQ.N    ??Reveal__QueueMessageU32_2
   \   00000038   0x1C5B             ADDS     R3,R3,#+1
   \   0000003A   0xB2DB             UXTB     R3,R3
   \   0000003C   0x2B13             CMP      R3,#+19
   \   0000003E   0xD3ED             BCC.N    ??Reveal__QueueMessageU32_3
   \   00000040   0xE007             B.N      ??Reveal__QueueMessageU32_1
   \                     ??Reveal__QueueMessageU32_2: (+1)
   \   00000042   0xB2DB             UXTB     R3,R3
   \   00000044   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000048   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000004C   0x40CB             LSRS     R3,R3,R1
   \   0000004E   0x07DB             LSLS     R3,R3,#+31
   \   00000050   0xD43B             BMI.N    ??Reveal__QueueMessageU32_4
   \                     ??Reveal__QueueMessageU32_1: (+1)
   \   00000052   0x2A10             CMP      R2,#+16
   \   00000054   0xDA39             BGE.N    ??Reveal__QueueMessageU32_4
   \   00000056   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000005A   0x1C6B             ADDS     R3,R5,#+1
   \   0000005C   0xB2DB             UXTB     R3,R3
   \   0000005E   0x2B0F             CMP      R3,#+15
   \   00000060   0xBFA8             IT       GE 
   \   00000062   0x2300             MOVGE    R3,#+0
   \   00000064   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000068   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000006C   0x429D             CMP      R5,R3
   \   0000006E   0xBF27             ITTEE    CS 
   \   00000070   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000074   0x195D             ADDCS    R5,R3,R5
   \   00000076   0x1B5D             SUBCC    R5,R3,R5
   \   00000078   0x1E6D             SUBCC    R5,R5,#+1
   \   0000007A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000007E   0xB2ED             UXTB     R5,R5
   \   00000080   0x42B5             CMP      R5,R6
   \   00000082   0xBF88             IT       HI 
   \   00000084   0x4635             MOVHI    R5,R6
   \   00000086   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000008A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000008E   0x429D             CMP      R5,R3
   \   00000090   0xD01B             BEQ.N    ??Reveal__QueueMessageU32_4
   \   00000092   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000096   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000009A   0xF104 0x054C      ADD      R5,R4,#+76
   \   0000009E   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000A2   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   000000A6   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   000000B0   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   000000B4   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000000B8   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000BC   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C0   0xF000 0x00EF      AND      R0,R0,#0xEF
   \   000000C4   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   000000C8   0xE05A             B.N      ??Reveal__QueueMessageU32_5
   \                     ??Reveal__QueueMessageU32_4: (+1)
   \   000000CA   0x2500             MOVS     R5,#+0
   1334              }
   \   000000CC   0xE058             B.N      ??Reveal__QueueMessageU32_5
   1335              else
   1336              {
   1337                  ptr = Reveal__NewFeedback(api, opcode, node,4);
   \                     ??Reveal__QueueMessageU32_0: (+1)
   \   000000CE   0xB305             CBZ.N    R5,??Reveal__QueueMessageU32_6
   \   000000D0   0x2300             MOVS     R3,#+0
   \   000000D2   0x2803             CMP      R0,#+3
   \   000000D4   0xD015             BEQ.N    ??Reveal__QueueMessageU32_7
   \   000000D6   0x2301             MOVS     R3,#+1
   \   000000D8   0x.... 0x....      ADR.W    R5,POSSIBLE_BLOCKED_APIS_LIST+0x1
   \                     ??Reveal__QueueMessageU32_8: (+1)
   \   000000DC   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   000000E0   0x42B0             CMP      R0,R6
   \   000000E2   0xBF1E             ITTT     NE 
   \   000000E4   0x1C5B             ADDNE    R3,R3,#+1
   \   000000E6   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000EA   0x42B0             CMPNE    R0,R6
   \   000000EC   0xBF1E             ITTT     NE 
   \   000000EE   0x1C5B             ADDNE    R3,R3,#+1
   \   000000F0   0xF815 0x6B01      LDRBNE   R6,[R5], #+1
   \   000000F4   0x42B0             CMPNE    R0,R6
   \   000000F6   0xD004             BEQ.N    ??Reveal__QueueMessageU32_7
   \   000000F8   0x1C5B             ADDS     R3,R3,#+1
   \   000000FA   0xB2DB             UXTB     R3,R3
   \   000000FC   0x2B13             CMP      R3,#+19
   \   000000FE   0xD3ED             BCC.N    ??Reveal__QueueMessageU32_8
   \   00000100   0xE007             B.N      ??Reveal__QueueMessageU32_6
   \                     ??Reveal__QueueMessageU32_7: (+1)
   \   00000102   0xB2DB             UXTB     R3,R3
   \   00000104   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000108   0xF8D3 0x3634      LDR      R3,[R3, #+1588]
   \   0000010C   0x40CB             LSRS     R3,R3,R1
   \   0000010E   0x07DB             LSLS     R3,R3,#+31
   \   00000110   0xD440             BMI.N    ??Reveal__QueueMessageU32_9
   \                     ??Reveal__QueueMessageU32_6: (+1)
   \   00000112   0x2A10             CMP      R2,#+16
   \   00000114   0xDA3E             BGE.N    ??Reveal__QueueMessageU32_9
   \   00000116   0xF894 0x560C      LDRB     R5,[R4, #+1548]
   \   0000011A   0x1C6B             ADDS     R3,R5,#+1
   \   0000011C   0xB2DB             UXTB     R3,R3
   \   0000011E   0x2B0F             CMP      R3,#+15
   \   00000120   0xBFA8             IT       GE 
   \   00000122   0x2300             MOVGE    R3,#+0
   \   00000124   0xF884 0x3615      STRB     R3,[R4, #+1557]
   \   00000128   0xF894 0x360D      LDRB     R3,[R4, #+1549]
   \   0000012C   0x429D             CMP      R5,R3
   \   0000012E   0xBF27             ITTEE    CS 
   \   00000130   0xF1C5 0x050E      RSBCS    R5,R5,#+14
   \   00000134   0x195D             ADDCS    R5,R3,R5
   \   00000136   0x1B5D             SUBCC    R5,R3,R5
   \   00000138   0x1E6D             SUBCC    R5,R5,#+1
   \   0000013A   0xF894 0x6616      LDRB     R6,[R4, #+1558]
   \   0000013E   0xB2ED             UXTB     R5,R5
   \   00000140   0x42B5             CMP      R5,R6
   \   00000142   0xBF88             IT       HI 
   \   00000144   0x4635             MOVHI    R5,R6
   \   00000146   0xF884 0x5616      STRB     R5,[R4, #+1558]
   \   0000014A   0xF894 0x5615      LDRB     R5,[R4, #+1557]
   \   0000014E   0x429D             CMP      R5,R3
   \   00000150   0xD020             BEQ.N    ??Reveal__QueueMessageU32_9
   \   00000152   0xF884 0x004C      STRB     R0,[R4, #+76]
   \   00000156   0xF884 0x104D      STRB     R1,[R4, #+77]
   \   0000015A   0xF104 0x054C      ADD      R5,R4,#+76
   \   0000015E   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000162   0xF362 0x0003      BFI      R0,R2,#+0,#+4
   \   00000166   0xF884 0x004E      STRB     R0,[R4, #+78]
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0xF884 0x004F      STRB     R0,[R4, #+79]
   \   00000170   0xF894 0x004E      LDRB     R0,[R4, #+78]
   \   00000174   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000178   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000017C   0xF884 0x004E      STRB     R0,[R4, #+78]
   1338              }
   1339              if (ptr != (REVEAL_COMMAND_TYPE *) NULL)
   \                     ??Reveal__QueueMessageU32_5: (+1)
   \   00000180   0xB145             CBZ.N    R5,??Reveal__QueueMessageU32_9
   1340              {
   1341                  Reveal__AddDataU32(ptr, data);
   \   00000182   0x4628             MOV      R0,R5
   \   00000184   0x9905             LDR      R1,[SP, #+20]
   \   00000186   0x.... 0x....      BL       Reveal__AddDataU32
   1342                  Reveal__QueueCommand(ptr);
   \   0000018A   0x4628             MOV      R0,R5
   \   0000018C   0x.... 0x....      BL       Reveal__QueueCommand
   1343                  return(TRUE);
   \   00000190   0x2001             MOVS     R0,#+1
   \   00000192   0xBD70             POP      {R4-R6,PC}
   1344              }
   1345              else
   1346              {
   1347                  return(FALSE);
   \                     ??Reveal__QueueMessageU32_9: (+1)
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0xBD70             POP      {R4-R6,PC}       ;; return
   1348              }
   1349          }
   1350          
   1351          //=====================================================================================================================
   1352          //-------------------------------------- Private Functions ------------------------------------------------------------
   1353          //=====================================================================================================================
   1354          
   1355          
   1356          //---------------------------------------------------------------------------------------------------------------------
   1357          /**
   1358           *    @brief    Determines if the combination of api and opcode are currently blocked
   1359           *
   1360           *    @param    api - the api id of the command
   1361           *    @param    opcode - the opcode of the command
   1362           *
   1363           *    @return  TRUE if the message is blocked, else FALSE
   1364           */
   1365          static BOOL_TYPE IsMessageBlocked(uint8 api, uint8 opcode)
   1366          {
   1367              BOOL_TYPE is_message_blocked = FALSE;
   1368          
   1369              // Walk the POSSIBLE_BLOCKED_APIS_LIST table to find the index that corresponds to Reveal_Blocked_Messages array
   1370              for (uint8 index = 0; index < ELEMENTS_IN_ARRAY(POSSIBLE_BLOCKED_APIS_LIST); index++)
   1371              {
   1372                  if (api == POSSIBLE_BLOCKED_APIS_LIST[index])
   1373                  {
   1374                      // Found index in POSSIBLE_BLOCKED_APIS_LIST table with the API
   1375                      // Check bit that corresponds to the opcode to know if it is currently blocked
   1376                      is_message_blocked = (BOOL_TYPE)(BIT_TEST(Reveal_Blocked_Messages[index], opcode));
   1377                      break;
   1378                  }
   1379              }
   1380          
   1381              return(is_message_blocked);
   1382          }
   1383          
   1384          //---------------------------------------------------------------------------------------------------------------------
   1385          /**
   1386           * @brief This method handles the incoming messages
   1387           * @details This method shall be called every5ms
   1388           */

   \                                 In section .text, align 4, keep-with-next
   1389          static void RevealHandlerIncomming(void)
   1390          {
   \                     RevealHandlerIncomming: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   1391          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
   1392              REVEAL_RECIPE_STATUS_TYPE reason_code;
   1393              PT_RX_TYPE * pt;
   1394              REVEAL_COMMAND_TYPE * new_msg;
   1395              uint8 api;
   1396              uint8 op_code;
   1397              uint8 index;
   1398              uint8 count;
   1399              uint8 feedback;
   1400              uint32 opcode_bitmap;
   1401          #if (REVEAL_READ_EEPROM_FEATURE == ENABLED)
   1402              uint32 eeprom_address;
   1403              uint16 eeprom_size;
   1404          #endif
   1405          
   1406          #if (REVEAL_READ_MEMORY_FEATURE == ENABLED)
   1407              #if (REVEAL_READ_MEMORY_END > 0xFFFF)
   1408                  #ifndef FAR
   1409                      #define FAR
   1410                  #endif
   1411          
   1412                  #define REVEAL_MEM_POINTER_CAST FAR
   1413              #else
   1414                  #ifndef NEAR
   1415                      #define NEAR
   1416                  #endif
   1417                  #define REVEAL_MEM_POINTER_CAST NEAR
   1418              #endif
   1419              uint32 memory_idx;
   1420              uint8 memory_size;
   1421          #endif
   1422          
   1423              // Handle Incoming message
   1424              reason_code = NVO_RS_UNSUPPORTED;
   \   00000006   0x2404             MOVS     R4,#+4
   1425              pt = GET__MESSAGE(REVEAL_SAP);
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       Win__GetIncomingMessage
   \   0000000E   0x0006             MOVS     R6,R0
   1426              if (pt != (PT_RX_TYPE *)NULL)
   \   00000010   0xF000 0x844F      BEQ.W    ??RevealHandlerIncomming_1
   1427              {
   1428          
   1429                  BIT_SET(Reveal_Node_Status,pt->source);
   \   00000014   0x78B0             LDRB     R0,[R6, #+2]
   \   00000016   0x.... 0x....      LDR.W    R9,??DataTable24
   \   0000001A   0xF8B9 0x1620      LDRH     R1,[R9, #+1568]
   \   0000001E   0x0902             LSRS     R2,R0,#+4
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xFA00 0xF302      LSL      R3,R0,R2
   \   00000026   0x4319             ORRS     R1,R3,R1
   1430          
   1431                  if (Reveal_Heartbeat_Timer > 0)
   \   00000028   0xF8B9 0x361A      LDRH     R3,[R9, #+1562]
   \   0000002C   0xF8A9 0x1620      STRH     R1,[R9, #+1568]
   \   00000030   0xB13B             CBZ.N    R3,??RevealHandlerIncomming_2
   1432                  {
   1433                      // We reload the heartbeat even if the message is not a heartbeat.
   1434                      // the point is to if we see communication for a node that means that node is alive.
   1435                      // This implementation intend to reduce SIR for no communication when there is communication.
   1436                      if (pt->source < sizeof(Reveal_Heartbeat_Node_Counter))
   \   00000032   0x2A0F             CMP      R2,#+15
   \   00000034   0xD205             BCS.N    ??RevealHandlerIncomming_2
   1437                      {
   1438                          Reveal_Heartbeat_Node_Counter[pt->source] = (Reveal_Heartbeat_Timer * 3) + 1;
   \   00000036   0xEB03 0x0343      ADD      R3,R3,R3, LSL #+1
   \   0000003A   0x444A             ADD      R2,R2,R9
   \   0000003C   0x1C5B             ADDS     R3,R3,#+1
   \   0000003E   0xF882 0x3624      STRB     R3,[R2, #+1572]
   1439                      }
   1440                  }
   1441          
   1442                  api = pt->payload[0];
   \                     ??RevealHandlerIncomming_2: (+1)
   \   00000042   0xF896 0x8005      LDRB     R8,[R6, #+5]
   1443                  op_code = (uint8)(pt->payload[1] & 0x1F);
   \   00000046   0x79B2             LDRB     R2,[R6, #+6]
   \   00000048   0xF002 0x051F      AND      R5,R2,#0x1F
   1444                  feedback = (uint8)((pt->payload[1] >> 5) & 1);
   \   0000004C   0xF3C2 0x1740      UBFX     R7,R2,#+5,#+1
   1445                  if (api == 0x1)
   \   00000050   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000054   0xF040 0x83AE      BNE.W    ??RevealHandlerIncomming_3
   1446                  {
   1447                      if(feedback == TRUE)
   \   00000058   0x2F00             CMP      R7,#+0
   \   0000005A   0xF000 0x8112      BEQ.W    ??RevealHandlerIncomming_4
   1448                      {
   1449                          // Feedback
   1450                          switch (op_code)
   \   0000005E   0x2D01             CMP      R5,#+1
   \   00000060   0xD00E             BEQ.N    ??RevealHandlerIncomming_5
   \   00000062   0x2D02             CMP      R5,#+2
   \   00000064   0xF000 0x83FF      BEQ.W    ??RevealHandlerIncomming_6
   \   00000068   0x2D11             CMP      R5,#+17
   \   0000006A   0xF000 0x8104      BEQ.W    ??RevealHandlerIncomming_7
   \   0000006E   0x2D1E             CMP      R5,#+30
   \   00000070   0xF000 0x808F      BEQ.W    ??RevealHandlerIncomming_8
   \   00000074   0x2D1F             CMP      R5,#+31
   \   00000076   0xF000 0x80F5      BEQ.W    ??RevealHandlerIncomming_9
   1451                          {
   1452                              case API001_PUBLISH_ACK: // ACK
   1453                                  if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_TIMING)
   1454                                  {
   1455                                     if ((Reveal_Queue[Reveal_Queue_Read].api == pt->payload[3]) &&
   1456                                         (Reveal_Queue[Reveal_Queue_Read].opcode == pt->payload[4]))
   1457                                     {
   1458                                         // Command acknowledge
   1459                                         DropMessageFromQueue(FALSE);
   1460                                         Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_IDLE;
   1461                                         RevealHandleAckParser(pt->source, pt->payload[3], pt->payload[4],(REVEAL_RECIPE_STATUS_TYPE)pt->payload[2],FALSE);
   1462                                     }
   1463                                  }
   1464                              #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1465                                  else if (Reveal_Outgoing_State  == REVEAL_OUTGOING_STATE_TIMING_PRIORITY)
   1466                                  {
   1467                                      if ((Reveal_Queue_Priority[Reveal_Queue_Priority_Read].api == pt->payload[3]) &&
   1468                                          (Reveal_Queue_Priority[Reveal_Queue_Priority_Read].opcode == pt->payload[4]))
   1469                                      {
   1470                                          // Command acknowledge
   1471                                          DropMessageFromQueue(TRUE);
   1472                                          Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_IDLE;
   1473                                          RevealHandleAckParser(pt->source, pt->payload[3], pt->payload[4],(REVEAL_RECIPE_STATUS_TYPE)pt->payload[2],FALSE);
   1474                                      }
   1475                                  }
   1476                              #endif
   1477                                  break;
   1478                              case API001_PUBLISH_HEARTBEAT: // Heart-beat
   1479                                  REVEAL_HEARTBEAT_CALLBACK(pt->source);
   1480                                  break;
   1481                              case API001_PUBLISH_WAKEUP:
   1482          
   1483                                  new_msg = Reveal__NewFeedback(0x1,API001_PUBLISH_ACK_WAKEUP, REVEAL_BROADCAST_NODE,1);
   1484                                  if (new_msg != (REVEAL_COMMAND_TYPE *)NULL)
   1485                                  {
   1486                                     Reveal__AddDataU8(new_msg,pt->source);
   1487                                     Reveal__QueueCommand(new_msg);
   1488                                  }
   1489          
   1490                                  break;
   1491                              case API001_PUBLISH_ACK_WAKEUP:
   1492                                  if (pt->payload[2] < 15)
   1493                                  {
   1494                                      BIT_SET(Reveal_Node_Status,pt->payload[2]);
   1495                                  }
   1496                                  break;
   1497                              case API001_MAX_MESSAGE_SIZE:
   1498                                  REVEAL_MAX_PAYLOAD_CALLBACK(pt->source,pt->payload[2]);
   1499                                  break;
   1500                              default:
   1501                                  reason_code = NVO_RS_UNSUP_OP_CODE;
   1502                                  break;
   1503                          }
   1504                      }
   1505                      else
   1506                      {
   1507                          // Command
   1508                          switch ((API001CORE_OPCODE_TYPE)op_code)
   1509                          {
   1510                              case API001_SET_HEARTBEAT: // Set Heart-beat
   1511                                  reason_code = NVO_RS_READY;
   1512                                  Reveal_Heartbeat_Timer = (((uint16)(pt->payload[2])) <<8) + (uint16)(pt->payload[3]);
   1513                                  new_msg = Reveal__NewFeedback(0x1,API001_PUBLISH_HEARTBEAT_PERIOD, 0xF,2);
   1514                                  if (new_msg != (REVEAL_COMMAND_TYPE *)NULL)
   1515                                  {
   1516                                      Reveal__AddDataU8(new_msg,pt->payload[2]);
   1517                                      Reveal__AddDataU8(new_msg,pt->payload[3]);
   1518                                      Reveal__QueueCommand(new_msg);
   1519                                  }
   1520                                  break;
   1521          #if (REVEAL_READ_EEPROM_FEATURE == ENABLED)
   1522                              case API001_READ_EE:  // Read eeprom
   1523                                  reason_code = NVO_RS_READY;
   1524                                  eeprom_address = ( ((uint32)pt->payload[2])<<16 );
   1525                                  eeprom_address +=( ((uint32)pt->payload[3])<<8 );
   1526                                  eeprom_address +=( ((uint32)pt->payload[4]) );
   1527                                  eeprom_size =( ((uint32)pt->payload[3])<<8 );
   1528                                  eeprom_size +=( ((uint32)pt->payload[4]) );
   1529                                  REVEAL_EEPROM_READ(pt->source,eeprom_address,eeprom_size);
   1530          
   1531                                  break;
   1532          #endif
   1533                              case API001_SEND_EVENTS: // Send Events
   1534                                  count = pt->sdu_length - 3; // remove API, OPCODE and API Id
   1535                                  while (count > 0)
   1536                                  {
   1537                                      REVEAL__SENDEVENTS(pt->payload[2],pt->payload[2+count]);
   1538                                      count--;
   1539                                  }
   1540                                  reason_code = NVO_RS_READY;
   1541                                  break;
   1542                          #if (REVEAL_READ_MEMORY_FEATURE == ENABLED)
   1543          
   1544                              #if (REVEAL_READ_MEMORY_END < 0x1FFFFFF)
   1545                                  case API001_READ_MEM_24B: // Read memory
   1546          
   1547                                      if ((pt->payload[5] > 0) ||
   1548                                          (pt->payload[6] > REVEAL_PAYLOAD_SIZE))
   1549                                      {
   1550                                          memory_size = REVEAL_PAYLOAD_SIZE;
   1551                                      }
   1552                                      else
   1553                                      {
   1554                                          memory_size = pt->payload[6];
   1555                                      }
   1556                                      memory_idx = ( ((uint32)pt->payload[2])<<16 );
   1557                                      memory_idx +=( ((uint32)pt->payload[3])<<8 );
   1558                                      memory_idx +=( ((uint32)pt->payload[4]) );
   1559                                      if (
   1560                                          #if (REVEAL_READ_MEMORY_START > 0)
   1561                                              (memory_idx < (uint32)REVEAL_READ_MEMORY_START) ||
   1562                                          #endif
   1563                                          (REVEAL_READ_MEMORY_END < memory_idx) ||
   1564                                          ((REVEAL_READ_MEMORY_END - memory_idx) < memory_size) ||
   1565                                          (memory_size == 0))
   1566                                      {
   1567                                          reason_code = NVO_RS_UNSUP_INVALID_PARAM;
   1568                                      }
   1569                                      else
   1570                                      {
   1571                                          new_msg = Reveal__NewFeedback(0x1,0x4, pt->source);
   1572                                          if (new_msg != NULL)
   1573                                          {
   1574                                              for (count=0;count<memory_size;count++)
   1575                                              {
   1576                                                  Reveal__AddDataU8(new_msg,*((REVEAL_MEM_POINTER_CAST uint8 *)memory_idx));
   1577                                                  memory_idx++;
   1578                                              }
   1579                                              Reveal__QueueCommand(new_msg);
   1580                                          }
   1581                                          reason_code = NVO_RS_READY;
   1582                                      }
   1583                                      break;
   1584                              #else
   1585          
   1586                                  case API001_READ_MEM_32B:
   1587                                      if ((pt->payload[6] > 0) ||
   1588                                          (pt->payload[7] > REVEAL_PAYLOAD_SIZE))
   1589                                      {
   1590                                          memory_size = REVEAL_PAYLOAD_SIZE;
   1591                                      }
   1592                                      else
   1593                                      {
   1594                                          memory_size = pt->payload[7];
   1595                                      }
   1596                                      memory_idx = ( ((uint32)pt->payload[2])<<24 );
   1597                                      memory_idx +=( ((uint32)pt->payload[3])<<16 );
   1598                                      memory_idx +=( ((uint32)pt->payload[4])<<8 );
   1599                                      memory_idx +=( ((uint32)pt->payload[5]) );
   1600                                      if (
   1601                                          #if (REVEAL_READ_MEMORY_START > 0)
   1602                                              (memory_idx < (uint32)REVEAL_READ_MEMORY_START) ||
   1603                                          #endif
   1604                                          #if (REVEAL_READ_MEMORY_END < 0xFFFFFFFF)
   1605                                              (REVEAL_READ_MEMORY_END < memory_idx) ||
   1606                                          #endif
   1607                                          ((REVEAL_READ_MEMORY_END - memory_idx + 1) < memory_size) ||
   1608                                          (memory_size == 0))
   1609                                      {
   1610                                          reason_code = NVO_RS_UNSUP_INVALID_PARAM;
   1611                                      }
   1612                                      else
   1613                                      {
   1614                                          new_msg = Reveal__NewFeedback(0x1,0x4, pt->source,memory_size);
   1615                                          if (new_msg != NULL)
   1616                                          {
   1617                                              for (count=0;count<memory_size;count++)
   1618                                              {
   1619                                                  Reveal__AddDataU8(new_msg,*((REVEAL_MEM_POINTER_CAST uint8 *)memory_idx));  //lint !e923 Suppress Info: cast from unsigned long to pointer [Encompasses MISRA 2004 Rule 11.1], [MISRA 2004 Rule 11.3]
   1620                                                  memory_idx++;
   1621                                              }
   1622                                              Reveal__QueueCommand(new_msg);
   1623                                          }
   1624                                          reason_code = NVO_RS_READY;
   1625                                      }
   1626                                      break;
   1627                                  case API001_MAX_MESSAGE_SIZE:
   1628                                      new_msg = Reveal__NewFeedback(0x1,API001_MAX_MESSAGE_SIZE, REVEAL_BROADCAST_NODE,2);
   1629                                      if (new_msg != NULL)
   1630                                      {
   1631                                          Reveal__AddDataU8(new_msg,REVEAL_PAYLOAD_SIZE);
   1632                                          Reveal__AddDataU8(new_msg,REVEAL_PAYLOAD_INCOMING_SIZE);
   1633          
   1634                                          Reveal__QueueCommand(new_msg);
   1635                                          reason_code = NVO_RS_READY;
   1636                                      }
   1637                                      else
   1638                                      {
   1639                                          reason_code = NVO_RS_BUSY;
   1640                                      }
   1641          
   1642                                      break;
   1643                                  case API001_BLOCK_MESSAGES:
   1644                                      //......................................................
   1645                                      // payload[2] = time to block the api(s) and opcode(s) in seconds
   1646                                      // payload[3] = api
   1647                                      // payload[4] = opcode bitmap byte (MSB)
   1648                                      // payload[5] = opcode bitmap byte
   1649                                      // payload[6] = opcode bitmap byte
   1650                                      // payload[7] = opcode bitmap byte (LSB)
   1651                                      // payload[8] = api
   1652                                      // payload[9] = opcode bitmap byte (MSB)
   1653                                      // payload[10] = .............
   1654                                      // pattern repeats as much or as little as required
   1655                                      //......................................................
   1656                                      // if a time of 0 is specified, un-block all apis and opcodes ELSE
   1657                                      // if first api is 0xFF and opcode is 0xFFFFFFFF, block all apis and opcodes
   1658                                      //......................................................
   1659          
   1660          
   1661                                      reason_code = NVO_RS_UNSUP_INVALID_PARAM;
   1662          
   1663                                      if (pt->sdu_length > 2)        // An empty payload is invalid
   1664                                      {
   1665                                          if (pt->payload[2] == 0)
   1666                                          {
   1667                                              // Clear all blocked api/opcodes
   1668                                              // No need to look at any other bytes in the payload
   1669                                              memset(Reveal_Blocked_Messages, 0, sizeof(Reveal_Blocked_Messages));
   1670          
   1671                                              Reveal_Blocked_Messages_Remaining_Time = 0;
   1672                                              reason_code = NVO_RS_READY;
   1673                                          }
   1674                                          else if ((pt->sdu_length > BLOCKED_API_OPCODE_BYTE_OFFSET_START) &&                                         // A payload with a non-zero blocking time but no api and opcodes to block is invalid
   1675                                                   (((pt->sdu_length - BLOCKED_API_OPCODE_BYTE_OFFSET_START) % BLOCKED_API_OPCODE_NUM_BYTES) == 0))   // A payload with the wrong number of bytes for the api and opcodes is invalid
   1676                                          {
   1677                                              // Check if the request is to block all APIs and Opcodes
   1678                                              if ((pt->payload[3] == 0xFF) &&
   1679                                                  (pt->payload[4] == 0xFF) &&
   1680                                                  (pt->payload[5] == 0xFF) &&
   1681                                                  (pt->payload[6] == 0xFF) &&
   1682                                                  (pt->payload[7] == 0xFF))
   1683                                              {
   1684                                                  // Block all api/opcodes (except API 1)
   1685                                                  memset(Reveal_Blocked_Messages, 0xFF, sizeof(Reveal_Blocked_Messages));
   1686          
   1687                                                  reason_code = NVO_RS_READY;
   1688                                              }
   1689                                              else if (RequestedAPIsCanBeBlocked(&(pt->payload[BLOCKED_API_OPCODE_BYTE_OFFSET_START]), (pt->sdu_length - BLOCKED_API_OPCODE_BYTE_OFFSET_START)) == TRUE) // Specific api(s) and opcode(s) requested to be blocked
   1690                                              {
   1691                                                  reason_code = NVO_RS_READY;
   1692          
   1693                                                  // Clear blocked api/opcodes
   1694                                                  memset(Reveal_Blocked_Messages, 0, sizeof(Reveal_Blocked_Messages));
   1695          
   1696                                                  // Set the opcodes that should be blocked for each API/Opcode pair in the payload
   1697                                                  // Starting at index BLOCKED_API_OPCODE_BYTE_OFFSET_START to skip over content at beginning of the payload
   1698                                                  // Incrementing by BLOCKED_API_OPCODE_NUM_BYTES to skip over api/opcode pairs which are BLOCKED_API_OPCODE_NUM_BYTES bytes each
   1699                                                  for (count = BLOCKED_API_OPCODE_BYTE_OFFSET_START; count < pt->sdu_length; count+=BLOCKED_API_OPCODE_NUM_BYTES)
   1700                                                  {
   1701                                                      // Walk the POSSIBLE_BLOCKED_APIS_LIST table to find the index that corresponds to Reveal_Blocked_Messages array
   1702                                                      for (index = 0; index < ELEMENTS_IN_ARRAY(POSSIBLE_BLOCKED_APIS_LIST); index++)
   1703                                                      {
   1704                                                          if (pt->payload[count] == POSSIBLE_BLOCKED_APIS_LIST[index])
   1705                                                          {
   1706                                                              opcode_bitmap  = (uint32)pt->payload[count + 1] << 24;
   1707                                                              opcode_bitmap += (uint32)pt->payload[count + 2] << 16;
   1708                                                              opcode_bitmap += (uint32)pt->payload[count + 3] << 8;
   1709                                                              opcode_bitmap += (uint32)pt->payload[count + 4];
   1710          
   1711                                                              Reveal_Blocked_Messages[index] |= opcode_bitmap;
   1712                                                              break;
   1713                                                          }
   1714                                                          //else, did not match API in POSSIBLE_BLOCKED_APIS_LIST, need to check next one
   1715                                                      }
   1716                                                  }
   1717                                              }
   1718          
   1719                                              if (reason_code == NVO_RS_READY)
   1720                                              {
   1721                                                  // Only set the blocking time if the message was successfully processed
   1722                                                  Reveal_Blocked_Messages_Remaining_Time = pt->payload[2];
   1723          
   1724                                                  // Convert time from seconds to 5ms increments based on call rate of Reveal__Handler()
   1725                                                  Reveal_Blocked_Messages_Remaining_Time *= REVEAL_BLOCKED_MESSAGES_TIME_TO_TICKS;
   1726                                              }
   1727                                          }
   1728                                      }
   1729          
   1730                                      break;
   1731          
   1732                              #endif
   1733                          #endif
   1734                              default:
   1735                                  reason_code = NVO_RS_UNSUP_OP_CODE;
   \   0000007A   0x2405             MOVS     R4,#+5
   1736                                  break;
   \   0000007C   0xF000 0xBBF3      B.W      ??RevealHandlerIncomming_6
   \                     ??RevealHandlerIncomming_5: (+1)
   \   00000080   0xF899 0x0614      LDRB     R0,[R9, #+1556]
   \   00000084   0x2802             CMP      R0,#+2
   \   00000086   0xD140             BNE.N    ??RevealHandlerIncomming_10
   \   00000088   0xF899 0x060D      LDRB     R0,[R9, #+1549]
   \   0000008C   0xF896 0x8008      LDRB     R8,[R6, #+8]
   \   00000090   0x2145             MOVS     R1,#+69
   \   00000092   0xFB11 0x9100      SMLABB   R1,R1,R0,R9
   \   00000096   0xF891 0x20A4      LDRB     R2,[R1, #+164]
   \   0000009A   0x4542             CMP      R2,R8
   \   0000009C   0xBF02             ITTT     EQ 
   \   0000009E   0x7A74             LDRBEQ   R4,[R6, #+9]
   \   000000A0   0xF891 0x10A5      LDRBEQ   R1,[R1, #+165]
   \   000000A4   0x42A1             CMPEQ    R1,R4
   \   000000A6   0xF040 0x83FE      BNE.W    ??RevealHandlerIncomming_11
   \   000000AA   0xF899 0x160C      LDRB     R1,[R9, #+1548]
   \   000000AE   0x4288             CMP      R0,R1
   \   000000B0   0xD008             BEQ.N    ??RevealHandlerIncomming_12
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0xF889 0x060D      STRB     R0,[R9, #+1549]
   \   000000B8   0xB2C0             UXTB     R0,R0
   \   000000BA   0x280F             CMP      R0,#+15
   \   000000BC   0xBFA4             ITT      GE 
   \   000000BE   0x2000             MOVGE    R0,#+0
   \   000000C0   0xF889 0x060D      STRBGE   R0,[R9, #+1549]
   \                     ??RevealHandlerIncomming_12: (+1)
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0xF889 0x0614      STRB     R0,[R9, #+1556]
   \   000000CA   0x2500             MOVS     R5,#+0
   \   000000CC   0xF896 0x9007      LDRB     R9,[R6, #+7]
   \   000000D0   0x78B0             LDRB     R0,[R6, #+2]
   \   000000D2   0x.... 0x....      ADR.W    R7,REVEAL_PARSER+0x1
   \   000000D6   0x0906             LSRS     R6,R0,#+4
   \                     ??RevealHandlerIncomming_13: (+1)
   \   000000D8   0x7838             LDRB     R0,[R7, #+0]
   \   000000DA   0x4540             CMP      R0,R8
   \   000000DC   0xBF18             IT       NE 
   \   000000DE   0x2800             CMPNE    R0,#+0
   \   000000E0   0xD10D             BNE.N    ??RevealHandlerIncomming_14
   \   000000E2   0xF8D7 0xC00B      LDR      R12,[R7, #+11]
   \   000000E6   0xF1BC 0x0F00      CMP      R12,#+0
   \   000000EA   0xD004             BEQ.N    ??RevealHandlerIncomming_15
   \   000000EC   0x464B             MOV      R3,R9
   \   000000EE   0x4622             MOV      R2,R4
   \   000000F0   0x4641             MOV      R1,R8
   \   000000F2   0x4630             MOV      R0,R6
   \   000000F4   0x47E0             BLX      R12
   \                     ??RevealHandlerIncomming_15: (+1)
   \   000000F6   0x7838             LDRB     R0,[R7, #+0]
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xF040 0x83D4      BNE.W    ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_14: (+1)
   \   000000FE   0x1C68             ADDS     R0,R5,#+1
   \   00000100   0xB2C5             UXTB     R5,R0
   \   00000102   0x3710             ADDS     R7,R7,#+16
   \   00000104   0x2D0A             CMP      R5,#+10
   \   00000106   0xD3E7             BCC.N    ??RevealHandlerIncomming_13
   \   00000108   0xE3CD             B.N      ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_10: (+1)
   \   0000010A   0x2804             CMP      R0,#+4
   \   0000010C   0xF040 0x83CB      BNE.W    ??RevealHandlerIncomming_11
   \   00000110   0xF899 0x0610      LDRB     R0,[R9, #+1552]
   \   00000114   0xF896 0x8008      LDRB     R8,[R6, #+8]
   \   00000118   0x2145             MOVS     R1,#+69
   \   0000011A   0xFB11 0x9100      SMLABB   R1,R1,R0,R9
   \   0000011E   0xF891 0x24B0      LDRB     R2,[R1, #+1200]
   \   00000122   0x4542             CMP      R2,R8
   \   00000124   0xBF02             ITTT     EQ 
   \   00000126   0x7A74             LDRBEQ   R4,[R6, #+9]
   \   00000128   0xF891 0x14B1      LDRBEQ   R1,[R1, #+1201]
   \   0000012C   0x42A1             CMPEQ    R1,R4
   \   0000012E   0xF040 0x83BA      BNE.W    ??RevealHandlerIncomming_11
   \   00000132   0xF899 0x160F      LDRB     R1,[R9, #+1551]
   \   00000136   0x4288             CMP      R0,R1
   \   00000138   0xD008             BEQ.N    ??RevealHandlerIncomming_16
   \   0000013A   0x1C40             ADDS     R0,R0,#+1
   \   0000013C   0xF889 0x0610      STRB     R0,[R9, #+1552]
   \   00000140   0xB2C0             UXTB     R0,R0
   \   00000142   0x2805             CMP      R0,#+5
   \   00000144   0xBFA4             ITT      GE 
   \   00000146   0x2000             MOVGE    R0,#+0
   \   00000148   0xF889 0x0610      STRBGE   R0,[R9, #+1552]
   \                     ??RevealHandlerIncomming_16: (+1)
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0xF889 0x0614      STRB     R0,[R9, #+1556]
   \   00000152   0x2500             MOVS     R5,#+0
   \   00000154   0xF896 0x9007      LDRB     R9,[R6, #+7]
   \   00000158   0x78B0             LDRB     R0,[R6, #+2]
   \   0000015A   0x.... 0x....      ADR.W    R7,REVEAL_PARSER+0x1
   \   0000015E   0x0906             LSRS     R6,R0,#+4
   \                     ??RevealHandlerIncomming_17: (+1)
   \   00000160   0x7838             LDRB     R0,[R7, #+0]
   \   00000162   0x4540             CMP      R0,R8
   \   00000164   0xBF18             IT       NE 
   \   00000166   0x2800             CMPNE    R0,#+0
   \   00000168   0xD10D             BNE.N    ??RevealHandlerIncomming_18
   \   0000016A   0xF8D7 0xC00B      LDR      R12,[R7, #+11]
   \   0000016E   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000172   0xD004             BEQ.N    ??RevealHandlerIncomming_19
   \   00000174   0x464B             MOV      R3,R9
   \   00000176   0x4622             MOV      R2,R4
   \   00000178   0x4641             MOV      R1,R8
   \   0000017A   0x4630             MOV      R0,R6
   \   0000017C   0x47E0             BLX      R12
   \                     ??RevealHandlerIncomming_19: (+1)
   \   0000017E   0x7838             LDRB     R0,[R7, #+0]
   \   00000180   0x2800             CMP      R0,#+0
   \   00000182   0xF040 0x8390      BNE.W    ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_18: (+1)
   \   00000186   0x1C68             ADDS     R0,R5,#+1
   \   00000188   0xB2C5             UXTB     R5,R0
   \   0000018A   0x3710             ADDS     R7,R7,#+16
   \   0000018C   0x2D0A             CMP      R5,#+10
   \   0000018E   0xD3E7             BCC.N    ??RevealHandlerIncomming_17
   \   00000190   0xE389             B.N      ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_8: (+1)
   \   00000192   0xF8B9 0x0622      LDRH     R0,[R9, #+1570]
   \   00000196   0xB1F0             CBZ.N    R0,??RevealHandlerIncomming_20
   \   00000198   0xF05F 0x0001      MOVS.W   R0,#+1
   \   0000019C   0x.... 0x....      ADR.W    R1,POSSIBLE_BLOCKED_APIS_LIST+0x1
   \                     ??RevealHandlerIncomming_21: (+1)
   \   000001A0   0xF811 0x2B01      LDRB     R2,[R1], #+1
   \   000001A4   0x2A01             CMP      R2,#+1
   \   000001A6   0xBF1E             ITTT     NE 
   \   000001A8   0x1C40             ADDNE    R0,R0,#+1
   \   000001AA   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   000001AE   0x2A01             CMPNE    R2,#+1
   \   000001B0   0xBF1E             ITTT     NE 
   \   000001B2   0x1C40             ADDNE    R0,R0,#+1
   \   000001B4   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   000001B8   0x2A01             CMPNE    R2,#+1
   \   000001BA   0xD004             BEQ.N    ??RevealHandlerIncomming_22
   \   000001BC   0x1C40             ADDS     R0,R0,#+1
   \   000001BE   0xB2C0             UXTB     R0,R0
   \   000001C0   0x2813             CMP      R0,#+19
   \   000001C2   0xD3ED             BCC.N    ??RevealHandlerIncomming_21
   \   000001C4   0xE007             B.N      ??RevealHandlerIncomming_20
   \                     ??RevealHandlerIncomming_22: (+1)
   \   000001C6   0xB2C0             UXTB     R0,R0
   \   000001C8   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   000001CC   0xF8D0 0x0634      LDR      R0,[R0, #+1588]
   \   000001D0   0x0FC0             LSRS     R0,R0,#+31
   \   000001D2   0xF040 0x8368      BNE.W    ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_20: (+1)
   \   000001D6   0xF899 0x260C      LDRB     R2,[R9, #+1548]
   \   000001DA   0x1C50             ADDS     R0,R2,#+1
   \   000001DC   0xB2C0             UXTB     R0,R0
   \   000001DE   0x280F             CMP      R0,#+15
   \   000001E0   0xBFA8             IT       GE 
   \   000001E2   0x2000             MOVGE    R0,#+0
   \   000001E4   0xF889 0x0615      STRB     R0,[R9, #+1557]
   \   000001E8   0xF899 0x060D      LDRB     R0,[R9, #+1549]
   \   000001EC   0x4282             CMP      R2,R0
   \   000001EE   0xBF27             ITTEE    CS 
   \   000001F0   0xF1C2 0x010E      RSBCS    R1,R2,#+14
   \   000001F4   0x1841             ADDCS    R1,R0,R1
   \   000001F6   0x1A81             SUBCC    R1,R0,R2
   \   000001F8   0x1E49             SUBCC    R1,R1,#+1
   \   000001FA   0xF899 0x2616      LDRB     R2,[R9, #+1558]
   \   000001FE   0xB2C9             UXTB     R1,R1
   \   00000200   0x4291             CMP      R1,R2
   \   00000202   0xBF88             IT       HI 
   \   00000204   0x4611             MOVHI    R1,R2
   \   00000206   0xF889 0x1616      STRB     R1,[R9, #+1558]
   \   0000020A   0xF899 0x1615      LDRB     R1,[R9, #+1557]
   \   0000020E   0x4281             CMP      R1,R0
   \   00000210   0xF000 0x8349      BEQ.W    ??RevealHandlerIncomming_11
   \   00000214   0x2001             MOVS     R0,#+1
   \   00000216   0xF889 0x004C      STRB     R0,[R9, #+76]
   \   0000021A   0x201F             MOVS     R0,#+31
   \   0000021C   0xF889 0x004D      STRB     R0,[R9, #+77]
   \   00000220   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   00000224   0xF040 0x000F      ORR      R0,R0,#0xF
   \   00000228   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   0000022C   0x2000             MOVS     R0,#+0
   \   0000022E   0xF889 0x004F      STRB     R0,[R9, #+79]
   \   00000232   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   00000236   0xF000 0x009F      AND      R0,R0,#0x9F
   \   0000023A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000023E   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x2841             CMP      R0,#+65
   \   00000246   0xDA08             BGE.N    ??RevealHandlerIncomming_23
   \   00000248   0x78B1             LDRB     R1,[R6, #+2]
   \   0000024A   0xF109 0x024C      ADD      R2,R9,#+76
   \   0000024E   0x1880             ADDS     R0,R0,R2
   \   00000250   0x0909             LSRS     R1,R1,#+4
   \   00000252   0x7101             STRB     R1,[R0, #+4]
   \   00000254   0x2001             MOVS     R0,#+1
   \   00000256   0xF889 0x004F      STRB     R0,[R9, #+79]
   \                     ??RevealHandlerIncomming_23: (+1)
   \   0000025A   0xF109 0x004C      ADD      R0,R9,#+76
   \   0000025E   0x.... 0x....      BL       Reveal__QueueCommand
   \   00000262   0xE320             B.N      ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_9: (+1)
   \   00000264   0x79F2             LDRB     R2,[R6, #+7]
   \   00000266   0x2A0F             CMP      R2,#+15
   \   00000268   0xF280 0x831D      BGE.W    ??RevealHandlerIncomming_11
   \   0000026C   0x4090             LSLS     R0,R0,R2
   \   0000026E   0x4308             ORRS     R0,R0,R1
   \   00000270   0xF8A9 0x0620      STRH     R0,[R9, #+1568]
   \   00000274   0xE317             B.N      ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_7: (+1)
   \   00000276   0x78B0             LDRB     R0,[R6, #+2]
   \   00000278   0x79F1             LDRB     R1,[R6, #+7]
   \   0000027A   0x0900             LSRS     R0,R0,#+4
   \   0000027C   0x.... 0x....      BL       SFUpdater__RxMaxPackage
   \   00000280   0xE311             B.N      ??RevealHandlerIncomming_11
   \                     ??RevealHandlerIncomming_4: (+1)
   \   00000282   0x1EEA             SUBS     R2,R5,#+3
   \   00000284   0x2A0F             CMP      R2,#+15
   \   00000286   0xF200 0x8293      BHI.W    ??RevealHandlerIncomming_24
   \   0000028A   0xE8DF 0xF012      TBH      [PC, R2, LSL #+1]
   \                     ??RevealHandlerIncomming_0:
   \   0000028E   0x0010 0x0291      DC16     0x10,0x291,0x291,0x291
   \              0x0291 0x0291
   \   00000296   0x008B 0x0291      DC16     0x8B,0x291,0x9D,0x291
   \              0x009D 0x0291
   \   0000029E   0x0291 0x0291      DC16     0x291,0x291,0x291,0x291
   \              0x0291 0x0291
   \   000002A6   0x0291 0x0291      DC16     0x291,0x291,0x16C,0x1E3
   \              0x016C 0x01E3
   \                     ??RevealHandlerIncomming_25: (+1)
   \   000002AE   0x79F0             LDRB     R0,[R6, #+7]
   \   000002B0   0x7A31             LDRB     R1,[R6, #+8]
   \   000002B2   0xEB01 0x2000      ADD      R0,R1,R0, LSL #+8
   \   000002B6   0xF8A9 0x061A      STRH     R0,[R9, #+1562]
   \   000002BA   0x2400             MOVS     R4,#+0
   \   000002BC   0xF8B9 0x0622      LDRH     R0,[R9, #+1570]
   \   000002C0   0xB1E8             CBZ.N    R0,??RevealHandlerIncomming_26
   \   000002C2   0x.... 0x....      ADR.W    R1,POSSIBLE_BLOCKED_APIS_LIST+0x1
   \   000002C6   0x2001             MOVS     R0,#+1
   \                     ??RevealHandlerIncomming_27: (+1)
   \   000002C8   0xF811 0x2B01      LDRB     R2,[R1], #+1
   \   000002CC   0x2A01             CMP      R2,#+1
   \   000002CE   0xBF1E             ITTT     NE 
   \   000002D0   0x1C40             ADDNE    R0,R0,#+1
   \   000002D2   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   000002D6   0x2A01             CMPNE    R2,#+1
   \   000002D8   0xBF1E             ITTT     NE 
   \   000002DA   0x1C40             ADDNE    R0,R0,#+1
   \   000002DC   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   000002E0   0x2A01             CMPNE    R2,#+1
   \   000002E2   0xD004             BEQ.N    ??RevealHandlerIncomming_28
   \   000002E4   0x1C40             ADDS     R0,R0,#+1
   \   000002E6   0xB2C0             UXTB     R0,R0
   \   000002E8   0x2813             CMP      R0,#+19
   \   000002EA   0xD3ED             BCC.N    ??RevealHandlerIncomming_27
   \   000002EC   0xE007             B.N      ??RevealHandlerIncomming_26
   \                     ??RevealHandlerIncomming_28: (+1)
   \   000002EE   0xB2C0             UXTB     R0,R0
   \   000002F0   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   000002F4   0xF8D0 0x0634      LDR      R0,[R0, #+1588]
   \   000002F8   0x03C0             LSLS     R0,R0,#+15
   \   000002FA   0xF100 0x82B7      BMI.W    ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_26: (+1)
   \   000002FE   0xF899 0x260C      LDRB     R2,[R9, #+1548]
   \   00000302   0x1C50             ADDS     R0,R2,#+1
   \   00000304   0xB2C0             UXTB     R0,R0
   \   00000306   0x280F             CMP      R0,#+15
   \   00000308   0xBFA8             IT       GE 
   \   0000030A   0x2000             MOVGE    R0,#+0
   \   0000030C   0xF889 0x0615      STRB     R0,[R9, #+1557]
   \   00000310   0xF899 0x060D      LDRB     R0,[R9, #+1549]
   \   00000314   0x4282             CMP      R2,R0
   \   00000316   0xBF27             ITTEE    CS 
   \   00000318   0xF1C2 0x010E      RSBCS    R1,R2,#+14
   \   0000031C   0x1841             ADDCS    R1,R0,R1
   \   0000031E   0x1A81             SUBCC    R1,R0,R2
   \   00000320   0x1E49             SUBCC    R1,R1,#+1
   \   00000322   0xF899 0x2616      LDRB     R2,[R9, #+1558]
   \   00000326   0xB2C9             UXTB     R1,R1
   \   00000328   0x4291             CMP      R1,R2
   \   0000032A   0xBF88             IT       HI 
   \   0000032C   0x4611             MOVHI    R1,R2
   \   0000032E   0xF889 0x1616      STRB     R1,[R9, #+1558]
   \   00000332   0xF899 0x1615      LDRB     R1,[R9, #+1557]
   \   00000336   0x4281             CMP      R1,R0
   \   00000338   0xF000 0x8298      BEQ.W    ??RevealHandlerIncomming_29
   \   0000033C   0x2001             MOVS     R0,#+1
   \   0000033E   0xF889 0x004C      STRB     R0,[R9, #+76]
   \   00000342   0xF889 0x404F      STRB     R4,[R9, #+79]
   \   00000346   0x2010             MOVS     R0,#+16
   \   00000348   0xF889 0x004D      STRB     R0,[R9, #+77]
   \   0000034C   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   00000350   0xF040 0x000F      ORR      R0,R0,#0xF
   \   00000354   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   00000358   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   0000035C   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000360   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000364   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   00000368   0x2000             MOVS     R0,#+0
   \   0000036A   0x2841             CMP      R0,#+65
   \   0000036C   0xDA07             BGE.N    ??RevealHandlerIncomming_30
   \   0000036E   0xF109 0x024C      ADD      R2,R9,#+76
   \   00000372   0x79F1             LDRB     R1,[R6, #+7]
   \   00000374   0x1880             ADDS     R0,R0,R2
   \   00000376   0x7101             STRB     R1,[R0, #+4]
   \   00000378   0x2001             MOVS     R0,#+1
   \   0000037A   0xF889 0x004F      STRB     R0,[R9, #+79]
   \                     ??RevealHandlerIncomming_30: (+1)
   \   0000037E   0xF899 0x104F      LDRB     R1,[R9, #+79]
   \   00000382   0x7A30             LDRB     R0,[R6, #+8]
   \   00000384   0x2941             CMP      R1,#+65
   \   00000386   0xDA08             BGE.N    ??RevealHandlerIncomming_31
   \   00000388   0xF109 0x024C      ADD      R2,R9,#+76
   \   0000038C   0x1889             ADDS     R1,R1,R2
   \   0000038E   0x7108             STRB     R0,[R1, #+4]
   \   00000390   0xF899 0x004F      LDRB     R0,[R9, #+79]
   \   00000394   0x1C40             ADDS     R0,R0,#+1
   \   00000396   0xF889 0x004F      STRB     R0,[R9, #+79]
   \                     ??RevealHandlerIncomming_31: (+1)
   \   0000039A   0xF109 0x004C      ADD      R0,R9,#+76
   \   0000039E   0x.... 0x....      BL       Reveal__QueueCommand
   \   000003A2   0xE263             B.N      ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_32: (+1)
   \   000003A4   0x7930             LDRB     R0,[R6, #+4]
   \   000003A6   0x1EC1             SUBS     R1,R0,#+3
   \   000003A8   0xB2C9             UXTB     R1,R1
   \   000003AA   0x2900             CMP      R1,#+0
   \   000003AC   0xF000 0x814E      BEQ.W    ??RevealHandlerIncomming_33
   \   000003B0   0xF011 0x0003      ANDS     R0,R1,#0x3
   \   000003B4   0xD001             BEQ.N    ??RevealHandlerIncomming_34
   \                     ??RevealHandlerIncomming_35: (+1)
   \   000003B6   0x1E40             SUBS     R0,R0,#+1
   \   000003B8   0xD1FD             BNE.N    ??RevealHandlerIncomming_35
   \                     ??RevealHandlerIncomming_34: (+1)
   \   000003BA   0x0888             LSRS     R0,R1,#+2
   \   000003BC   0xF000 0x8146      BEQ.W    ??RevealHandlerIncomming_33
   \                     ??RevealHandlerIncomming_36: (+1)
   \   000003C0   0x1E40             SUBS     R0,R0,#+1
   \   000003C2   0xD1FD             BNE.N    ??RevealHandlerIncomming_36
   \   000003C4   0x2400             MOVS     R4,#+0
   \   000003C6   0xE251             B.N      ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_37: (+1)
   \   000003C8   0x7AF0             LDRB     R0,[R6, #+11]
   \   000003CA   0xB910             CBNZ.N   R0,??RevealHandlerIncomming_38
   \   000003CC   0x7B32             LDRB     R2,[R6, #+12]
   \   000003CE   0x2A42             CMP      R2,#+66
   \   000003D0   0xDB00             BLT.N    ??RevealHandlerIncomming_39
   \                     ??RevealHandlerIncomming_38: (+1)
   \   000003D2   0x2241             MOVS     R2,#+65
   \                     ??RevealHandlerIncomming_39: (+1)
   \   000003D4   0x7A31             LDRB     R1,[R6, #+8]
   \   000003D6   0x79F0             LDRB     R0,[R6, #+7]
   \   000003D8   0x0409             LSLS     R1,R1,#+16
   \   000003DA   0xEB01 0x6000      ADD      R0,R1,R0, LSL #+24
   \   000003DE   0x7A71             LDRB     R1,[R6, #+9]
   \   000003E0   0xEB00 0x2001      ADD      R0,R0,R1, LSL #+8
   \   000003E4   0x7AB1             LDRB     R1,[R6, #+10]
   \   000003E6   0x1841             ADDS     R1,R0,R1
   \   000003E8   0x4248             RSBS     R0,R1,#+0
   \   000003EA   0x4290             CMP      R0,R2
   \   000003EC   0xD201             BCS.N    ??RevealHandlerIncomming_40
   \                     ??RevealHandlerIncomming_41: (+1)
   \   000003EE   0x2407             MOVS     R4,#+7
   \   000003F0   0xE23C             B.N      ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_40: (+1)
   \   000003F2   0x2A00             CMP      R2,#+0
   \   000003F4   0xD0FB             BEQ.N    ??RevealHandlerIncomming_41
   \   000003F6   0x78B0             LDRB     R0,[R6, #+2]
   \   000003F8   0x0903             LSRS     R3,R0,#+4
   \   000003FA   0xF8B9 0x0622      LDRH     R0,[R9, #+1570]
   \   000003FE   0xB1F0             CBZ.N    R0,??RevealHandlerIncomming_42
   \   00000400   0x.... 0x....      ADR.W    R4,POSSIBLE_BLOCKED_APIS_LIST+0x1
   \   00000404   0xF05F 0x0001      MOVS.W   R0,#+1
   \                     ??RevealHandlerIncomming_43: (+1)
   \   00000408   0xF814 0x7B01      LDRB     R7,[R4], #+1
   \   0000040C   0x2F01             CMP      R7,#+1
   \   0000040E   0xBF1E             ITTT     NE 
   \   00000410   0x1C40             ADDNE    R0,R0,#+1
   \   00000412   0xF814 0x7B01      LDRBNE   R7,[R4], #+1
   \   00000416   0x2F01             CMPNE    R7,#+1
   \   00000418   0xBF1E             ITTT     NE 
   \   0000041A   0x1C40             ADDNE    R0,R0,#+1
   \   0000041C   0xF814 0x7B01      LDRBNE   R7,[R4], #+1
   \   00000420   0x2F01             CMPNE    R7,#+1
   \   00000422   0xD004             BEQ.N    ??RevealHandlerIncomming_44
   \   00000424   0x1C40             ADDS     R0,R0,#+1
   \   00000426   0xB2C0             UXTB     R0,R0
   \   00000428   0x2813             CMP      R0,#+19
   \   0000042A   0xD3ED             BCC.N    ??RevealHandlerIncomming_43
   \   0000042C   0xE007             B.N      ??RevealHandlerIncomming_42
   \                     ??RevealHandlerIncomming_44: (+1)
   \   0000042E   0xB2C0             UXTB     R0,R0
   \   00000430   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   00000434   0xF890 0x0634      LDRB     R0,[R0, #+1588]
   \   00000438   0x06C0             LSLS     R0,R0,#+27
   \   0000043A   0xF100 0x8107      BMI.W    ??RevealHandlerIncomming_33
   \                     ??RevealHandlerIncomming_42: (+1)
   \   0000043E   0x2B10             CMP      R3,#+16
   \   00000440   0xF280 0x8104      BGE.W    ??RevealHandlerIncomming_33
   \   00000444   0xF899 0x760C      LDRB     R7,[R9, #+1548]
   \   00000448   0x1C78             ADDS     R0,R7,#+1
   \   0000044A   0xB2C0             UXTB     R0,R0
   \   0000044C   0x280F             CMP      R0,#+15
   \   0000044E   0xBFA8             IT       GE 
   \   00000450   0x2000             MOVGE    R0,#+0
   \   00000452   0xF889 0x0615      STRB     R0,[R9, #+1557]
   \   00000456   0xF899 0x060D      LDRB     R0,[R9, #+1549]
   \   0000045A   0x4287             CMP      R7,R0
   \   0000045C   0xBF27             ITTEE    CS 
   \   0000045E   0xF1C7 0x040E      RSBCS    R4,R7,#+14
   \   00000462   0x1904             ADDCS    R4,R0,R4
   \   00000464   0x1BC4             SUBCC    R4,R0,R7
   \   00000466   0x1E64             SUBCC    R4,R4,#+1
   \   00000468   0xF899 0x7616      LDRB     R7,[R9, #+1558]
   \   0000046C   0xB2E4             UXTB     R4,R4
   \   0000046E   0x42BC             CMP      R4,R7
   \   00000470   0xBF88             IT       HI 
   \   00000472   0x463C             MOVHI    R4,R7
   \   00000474   0xF889 0x4616      STRB     R4,[R9, #+1558]
   \   00000478   0xF899 0x4615      LDRB     R4,[R9, #+1557]
   \   0000047C   0x4284             CMP      R4,R0
   \   0000047E   0xF000 0x80E5      BEQ.W    ??RevealHandlerIncomming_33
   \   00000482   0x2001             MOVS     R0,#+1
   \   00000484   0xF889 0x004C      STRB     R0,[R9, #+76]
   \   00000488   0x2004             MOVS     R0,#+4
   \   0000048A   0xF889 0x004D      STRB     R0,[R9, #+77]
   \   0000048E   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   00000492   0xF000 0x00F0      AND      R0,R0,#0xF0
   \   00000496   0x4318             ORRS     R0,R3,R0
   \   00000498   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   0000049C   0x2000             MOVS     R0,#+0
   \   0000049E   0xF889 0x004F      STRB     R0,[R9, #+79]
   \   000004A2   0x2A01             CMP      R2,#+1
   \   000004A4   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   000004A8   0xF000 0x009F      AND      R0,R0,#0x9F
   \   000004AC   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000004B0   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   000004B4   0xF2C0 0x80C6      BLT.W    ??RevealHandlerIncomming_45
   \   000004B8   0xF012 0x0003      ANDS     R0,R2,#0x3
   \   000004BC   0xD012             BEQ.N    ??RevealHandlerIncomming_46
   \   000004BE   0xF109 0x074C      ADD      R7,R9,#+76
   \   000004C2   0x780B             LDRB     R3,[R1, #+0]
   \   000004C4   0xE000             B.N      ??RevealHandlerIncomming_47
   \                     ??RevealHandlerIncomming_48: (+1)
   \   000004C6   0x780B             LDRB     R3,[R1, #+0]
   \                     ??RevealHandlerIncomming_47: (+1)
   \   000004C8   0xF899 0x404F      LDRB     R4,[R9, #+79]
   \   000004CC   0x2C41             CMP      R4,#+65
   \   000004CE   0xDA06             BGE.N    ??RevealHandlerIncomming_49
   \   000004D0   0x443C             ADD      R4,R4,R7
   \   000004D2   0x7123             STRB     R3,[R4, #+4]
   \   000004D4   0xF899 0x304F      LDRB     R3,[R9, #+79]
   \   000004D8   0x1C5B             ADDS     R3,R3,#+1
   \   000004DA   0xF889 0x304F      STRB     R3,[R9, #+79]
   \                     ??RevealHandlerIncomming_49: (+1)
   \   000004DE   0x1C49             ADDS     R1,R1,#+1
   \   000004E0   0x1E40             SUBS     R0,R0,#+1
   \   000004E2   0xD1F0             BNE.N    ??RevealHandlerIncomming_48
   \                     ??RevealHandlerIncomming_46: (+1)
   \   000004E4   0x0890             LSRS     R0,R2,#+2
   \                     ??RevealHandlerIncomming_50: (+1)
   \   000004E6   0xF000 0x80AD      BEQ.W    ??RevealHandlerIncomming_45
   \   000004EA   0xF899 0x304F      LDRB     R3,[R9, #+79]
   \   000004EE   0x780A             LDRB     R2,[R1, #+0]
   \   000004F0   0x2B41             CMP      R3,#+65
   \   000004F2   0xDA08             BGE.N    ??RevealHandlerIncomming_51
   \   000004F4   0xF109 0x044C      ADD      R4,R9,#+76
   \   000004F8   0x191B             ADDS     R3,R3,R4
   \   000004FA   0x711A             STRB     R2,[R3, #+4]
   \   000004FC   0xF899 0x204F      LDRB     R2,[R9, #+79]
   \   00000500   0x1C52             ADDS     R2,R2,#+1
   \   00000502   0xF889 0x204F      STRB     R2,[R9, #+79]
   \                     ??RevealHandlerIncomming_51: (+1)
   \   00000506   0x1C49             ADDS     R1,R1,#+1
   \   00000508   0xF899 0x204F      LDRB     R2,[R9, #+79]
   \   0000050C   0x2A41             CMP      R2,#+65
   \   0000050E   0xDA09             BGE.N    ??RevealHandlerIncomming_52
   \   00000510   0xF109 0x044C      ADD      R4,R9,#+76
   \   00000514   0x780B             LDRB     R3,[R1, #+0]
   \   00000516   0x1912             ADDS     R2,R2,R4
   \   00000518   0x7113             STRB     R3,[R2, #+4]
   \   0000051A   0xF899 0x204F      LDRB     R2,[R9, #+79]
   \   0000051E   0x1C52             ADDS     R2,R2,#+1
   \   00000520   0xF889 0x204F      STRB     R2,[R9, #+79]
   \                     ??RevealHandlerIncomming_52: (+1)
   \   00000524   0x1C49             ADDS     R1,R1,#+1
   \   00000526   0xF899 0x204F      LDRB     R2,[R9, #+79]
   \   0000052A   0x2A41             CMP      R2,#+65
   \   0000052C   0xDA09             BGE.N    ??RevealHandlerIncomming_53
   \   0000052E   0xF109 0x044C      ADD      R4,R9,#+76
   \   00000532   0x780B             LDRB     R3,[R1, #+0]
   \   00000534   0x1912             ADDS     R2,R2,R4
   \   00000536   0x7113             STRB     R3,[R2, #+4]
   \   00000538   0xF899 0x204F      LDRB     R2,[R9, #+79]
   \   0000053C   0x1C52             ADDS     R2,R2,#+1
   \   0000053E   0xF889 0x204F      STRB     R2,[R9, #+79]
   \                     ??RevealHandlerIncomming_53: (+1)
   \   00000542   0x1C49             ADDS     R1,R1,#+1
   \   00000544   0xF899 0x204F      LDRB     R2,[R9, #+79]
   \   00000548   0x2A41             CMP      R2,#+65
   \   0000054A   0xDA09             BGE.N    ??RevealHandlerIncomming_54
   \   0000054C   0xF109 0x044C      ADD      R4,R9,#+76
   \   00000550   0x780B             LDRB     R3,[R1, #+0]
   \   00000552   0x1912             ADDS     R2,R2,R4
   \   00000554   0x7113             STRB     R3,[R2, #+4]
   \   00000556   0xF899 0x204F      LDRB     R2,[R9, #+79]
   \   0000055A   0x1C52             ADDS     R2,R2,#+1
   \   0000055C   0xF889 0x204F      STRB     R2,[R9, #+79]
   \                     ??RevealHandlerIncomming_54: (+1)
   \   00000560   0x1C49             ADDS     R1,R1,#+1
   \   00000562   0x1E40             SUBS     R0,R0,#+1
   \   00000564   0xE7BF             B.N      ??RevealHandlerIncomming_50
   \                     ??RevealHandlerIncomming_55: (+1)
   \   00000566   0xF8B9 0x0622      LDRH     R0,[R9, #+1570]
   \   0000056A   0xB1E8             CBZ.N    R0,??RevealHandlerIncomming_56
   \   0000056C   0x.... 0x....      ADR.W    R1,POSSIBLE_BLOCKED_APIS_LIST+0x1
   \   00000570   0xF05F 0x0001      MOVS.W   R0,#+1
   \                     ??RevealHandlerIncomming_57: (+1)
   \   00000574   0xF811 0x2B01      LDRB     R2,[R1], #+1
   \   00000578   0x2A01             CMP      R2,#+1
   \   0000057A   0xBF1E             ITTT     NE 
   \   0000057C   0x1C40             ADDNE    R0,R0,#+1
   \   0000057E   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   00000582   0x2A01             CMPNE    R2,#+1
   \   00000584   0xBF1E             ITTT     NE 
   \   00000586   0x1C40             ADDNE    R0,R0,#+1
   \   00000588   0xF811 0x2B01      LDRBNE   R2,[R1], #+1
   \   0000058C   0x2A01             CMPNE    R2,#+1
   \   0000058E   0xD004             BEQ.N    ??RevealHandlerIncomming_58
   \   00000590   0x1C40             ADDS     R0,R0,#+1
   \   00000592   0xB2C0             UXTB     R0,R0
   \   00000594   0x2813             CMP      R0,#+19
   \   00000596   0xD3ED             BCC.N    ??RevealHandlerIncomming_57
   \   00000598   0xE006             B.N      ??RevealHandlerIncomming_56
   \                     ??RevealHandlerIncomming_58: (+1)
   \   0000059A   0xB2C0             UXTB     R0,R0
   \   0000059C   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   000005A0   0xF8D0 0x0634      LDR      R0,[R0, #+1588]
   \   000005A4   0x0380             LSLS     R0,R0,#+14
   \   000005A6   0xD453             BMI.N    ??RevealHandlerIncomming_59
   \                     ??RevealHandlerIncomming_56: (+1)
   \   000005A8   0xF899 0x260C      LDRB     R2,[R9, #+1548]
   \   000005AC   0x1C50             ADDS     R0,R2,#+1
   \   000005AE   0xB2C0             UXTB     R0,R0
   \   000005B0   0x280F             CMP      R0,#+15
   \   000005B2   0xBFA8             IT       GE 
   \   000005B4   0x2000             MOVGE    R0,#+0
   \   000005B6   0xF889 0x0615      STRB     R0,[R9, #+1557]
   \   000005BA   0xF899 0x060D      LDRB     R0,[R9, #+1549]
   \   000005BE   0x4282             CMP      R2,R0
   \   000005C0   0xBF27             ITTEE    CS 
   \   000005C2   0xF1C2 0x010E      RSBCS    R1,R2,#+14
   \   000005C6   0x1841             ADDCS    R1,R0,R1
   \   000005C8   0x1A81             SUBCC    R1,R0,R2
   \   000005CA   0x1E49             SUBCC    R1,R1,#+1
   \   000005CC   0xF899 0x2616      LDRB     R2,[R9, #+1558]
   \   000005D0   0xB2C9             UXTB     R1,R1
   \   000005D2   0x4291             CMP      R1,R2
   \   000005D4   0xBF88             IT       HI 
   \   000005D6   0x4611             MOVHI    R1,R2
   \   000005D8   0xF889 0x1616      STRB     R1,[R9, #+1558]
   \   000005DC   0xF899 0x1615      LDRB     R1,[R9, #+1557]
   \   000005E0   0x4281             CMP      R1,R0
   \   000005E2   0xD035             BEQ.N    ??RevealHandlerIncomming_59
   \   000005E4   0x2001             MOVS     R0,#+1
   \   000005E6   0xF889 0x004C      STRB     R0,[R9, #+76]
   \   000005EA   0x2011             MOVS     R0,#+17
   \   000005EC   0xF889 0x004D      STRB     R0,[R9, #+77]
   \   000005F0   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   000005F4   0xF040 0x000F      ORR      R0,R0,#0xF
   \   000005F8   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   000005FC   0x2000             MOVS     R0,#+0
   \   000005FE   0xF889 0x004F      STRB     R0,[R9, #+79]
   \   00000602   0xF899 0x004E      LDRB     R0,[R9, #+78]
   \   00000606   0xF000 0x009F      AND      R0,R0,#0x9F
   \   0000060A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000060E   0xF889 0x004E      STRB     R0,[R9, #+78]
   \   00000612   0x2000             MOVS     R0,#+0
   \   00000614   0x2841             CMP      R0,#+65
   \   00000616   0xDA07             BGE.N    ??RevealHandlerIncomming_60
   \   00000618   0xF109 0x024C      ADD      R2,R9,#+76
   \   0000061C   0x1880             ADDS     R0,R0,R2
   \   0000061E   0x2141             MOVS     R1,#+65
   \   00000620   0x7101             STRB     R1,[R0, #+4]
   \   00000622   0x2001             MOVS     R0,#+1
   \   00000624   0xF889 0x004F      STRB     R0,[R9, #+79]
   \                     ??RevealHandlerIncomming_60: (+1)
   \   00000628   0xF899 0x004F      LDRB     R0,[R9, #+79]
   \   0000062C   0x2841             CMP      R0,#+65
   \   0000062E   0xDA09             BGE.N    ??RevealHandlerIncomming_45
   \   00000630   0xF109 0x024C      ADD      R2,R9,#+76
   \   00000634   0x1880             ADDS     R0,R0,R2
   \   00000636   0x2141             MOVS     R1,#+65
   \   00000638   0x7101             STRB     R1,[R0, #+4]
   \   0000063A   0xF899 0x004F      LDRB     R0,[R9, #+79]
   \   0000063E   0x1C40             ADDS     R0,R0,#+1
   \   00000640   0xF889 0x004F      STRB     R0,[R9, #+79]
   \                     ??RevealHandlerIncomming_45: (+1)
   \   00000644   0xF109 0x004C      ADD      R0,R9,#+76
   \   00000648   0x.... 0x....      BL       Reveal__QueueCommand
   \                     ??RevealHandlerIncomming_33: (+1)
   \   0000064C   0x2400             MOVS     R4,#+0
   \   0000064E   0xE10D             B.N      ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_59: (+1)
   \   00000650   0x2401             MOVS     R4,#+1
   \   00000652   0xE10B             B.N      ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_61: (+1)
   \   00000654   0x2407             MOVS     R4,#+7
   \   00000656   0x7930             LDRB     R0,[R6, #+4]
   \   00000658   0x2803             CMP      R0,#+3
   \   0000065A   0xF2C0 0x8107      BLT.W    ??RevealHandlerIncomming_29
   \   0000065E   0x79F2             LDRB     R2,[R6, #+7]
   \   00000660   0xB94A             CBNZ.N   R2,??RevealHandlerIncomming_62
   \   00000662   0x214C             MOVS     R1,#+76
   \   00000664   0xF209 0x6034      ADDW     R0,R9,#+1588
   \   00000668   0x.... 0x....      BL       __aeabi_memclr4
   \   0000066C   0x2000             MOVS     R0,#+0
   \   0000066E   0xF8A9 0x0622      STRH     R0,[R9, #+1570]
   \   00000672   0x2400             MOVS     R4,#+0
   \   00000674   0xE0FA             B.N      ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_62: (+1)
   \   00000676   0x2804             CMP      R0,#+4
   \   00000678   0xF2C0 0x80F8      BLT.W    ??RevealHandlerIncomming_29
   \   0000067C   0x1EC1             SUBS     R1,R0,#+3
   \   0000067E   0x2205             MOVS     R2,#+5
   \   00000680   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   00000684   0xEB02 0x0282      ADD      R2,R2,R2, LSL #+2
   \   00000688   0x1A89             SUBS     R1,R1,R2
   \   0000068A   0xF040 0x80EF      BNE.W    ??RevealHandlerIncomming_29
   \   0000068E   0x7A31             LDRB     R1,[R6, #+8]
   \   00000690   0x29FF             CMP      R1,#+255
   \   00000692   0xBF04             ITT      EQ 
   \   00000694   0x7A71             LDRBEQ   R1,[R6, #+9]
   \   00000696   0x29FF             CMPEQ    R1,#+255
   \   00000698   0xD10F             BNE.N    ??RevealHandlerIncomming_63
   \   0000069A   0x7AB1             LDRB     R1,[R6, #+10]
   \   0000069C   0x29FF             CMP      R1,#+255
   \   0000069E   0xBF01             ITTTT    EQ 
   \   000006A0   0x7AF1             LDRBEQ   R1,[R6, #+11]
   \   000006A2   0x29FF             CMPEQ    R1,#+255
   \   000006A4   0x7B31             LDRBEQ   R1,[R6, #+12]
   \   000006A6   0x29FF             CMPEQ    R1,#+255
   \   000006A8   0xD107             BNE.N    ??RevealHandlerIncomming_63
   \   000006AA   0x22FF             MOVS     R2,#+255
   \   000006AC   0x214C             MOVS     R1,#+76
   \   000006AE   0xF209 0x6034      ADDW     R0,R9,#+1588
   \   000006B2   0x.... 0x....      BL       __aeabi_memset4
   \   000006B6   0x2400             MOVS     R4,#+0
   \   000006B8   0xE073             B.N      ??RevealHandlerIncomming_64
   \                     ??RevealHandlerIncomming_63: (+1)
   \   000006BA   0x1EC0             SUBS     R0,R0,#+3
   \   000006BC   0xB2C7             UXTB     R7,R0
   \   000006BE   0x2100             MOVS     R1,#+0
   \   000006C0   0xF106 0x0208      ADD      R2,R6,#+8
   \   000006C4   0x.... 0x....      ADR.W    R0,POSSIBLE_BLOCKED_APIS_LIST
   \   000006C8   0xE025             B.N      ??RevealHandlerIncomming_65
   \                     ??RevealHandlerIncomming_66: (+1)
   \   000006CA   0x7813             LDRB     R3,[R2, #+0]
   \   000006CC   0x2B03             CMP      R3,#+3
   \   000006CE   0xD01F             BEQ.N    ??RevealHandlerIncomming_67
   \   000006D0   0xF04F 0x0E01      MOV      LR,#+1
   \   000006D4   0xF100 0x0C01      ADD      R12,R0,#+1
   \                     ??RevealHandlerIncomming_68: (+1)
   \   000006D8   0xF81C 0xAB01      LDRB     R10,[R12], #+1
   \   000006DC   0x4553             CMP      R3,R10
   \   000006DE   0xBF1E             ITTT     NE 
   \   000006E0   0xF10E 0x0E01      ADDNE    LR,LR,#+1
   \   000006E4   0xF81C 0xAB01      LDRBNE   R10,[R12], #+1
   \   000006E8   0x4553             CMPNE    R3,R10
   \   000006EA   0xBF1E             ITTT     NE 
   \   000006EC   0xF10E 0x0E01      ADDNE    LR,LR,#+1
   \   000006F0   0xF81C 0xAB01      LDRBNE   R10,[R12], #+1
   \   000006F4   0x4553             CMPNE    R3,R10
   \   000006F6   0xD006             BEQ.N    ??RevealHandlerIncomming_69
   \   000006F8   0xF10E 0x0E01      ADD      LR,LR,#+1
   \   000006FC   0xFA5F 0xFE8E      UXTB     LR,LR
   \   00000700   0xF1BE 0x0F13      CMP      LR,#+19
   \   00000704   0xD3E8             BCC.N    ??RevealHandlerIncomming_68
   \                     ??RevealHandlerIncomming_69: (+1)
   \   00000706   0xFA5F 0xF38E      UXTB     R3,LR
   \   0000070A   0x2B13             CMP      R3,#+19
   \   0000070C   0xF000 0x80AE      BEQ.W    ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_67: (+1)
   \   00000710   0x1D49             ADDS     R1,R1,#+5
   \   00000712   0xB2C9             UXTB     R1,R1
   \   00000714   0x1D52             ADDS     R2,R2,#+5
   \                     ??RevealHandlerIncomming_65: (+1)
   \   00000716   0x42B9             CMP      R1,R7
   \   00000718   0xDBD7             BLT.N    ??RevealHandlerIncomming_66
   \   0000071A   0x2400             MOVS     R4,#+0
   \   0000071C   0x214C             MOVS     R1,#+76
   \   0000071E   0xF209 0x6034      ADDW     R0,R9,#+1588
   \   00000722   0x.... 0x....      BL       __aeabi_memclr4
   \   00000726   0x7932             LDRB     R2,[R6, #+4]
   \   00000728   0x.... 0x....      ADR.W    R0,POSSIBLE_BLOCKED_APIS_LIST
   \   0000072C   0x2103             MOVS     R1,#+3
   \   0000072E   0x2A04             CMP      R2,#+4
   \   00000730   0xDB37             BLT.N    ??RevealHandlerIncomming_64
   \                     ??RevealHandlerIncomming_70: (+1)
   \   00000732   0x198A             ADDS     R2,R1,R6
   \   00000734   0x2300             MOVS     R3,#+0
   \   00000736   0x7957             LDRB     R7,[R2, #+5]
   \   00000738   0x2F03             CMP      R7,#+3
   \   0000073A   0xD009             BEQ.N    ??RevealHandlerIncomming_71
   \   0000073C   0xF05F 0x0301      MOVS.W   R3,#+1
   \   00000740   0xF100 0x0C01      ADD      R12,R0,#+1
   \                     ??RevealHandlerIncomming_72: (+1)
   \   00000744   0xF892 0xE005      LDRB     LR,[R2, #+5]
   \   00000748   0xF81C 0x7B01      LDRB     R7,[R12], #+1
   \   0000074C   0x45BE             CMP      LR,R7
   \   0000074E   0xD113             BNE.N    ??RevealHandlerIncomming_73
   \                     ??RevealHandlerIncomming_71: (+1)
   \   00000750   0x79D7             LDRB     R7,[R2, #+7]
   \   00000752   0xF892 0xE006      LDRB     LR,[R2, #+6]
   \   00000756   0x043F             LSLS     R7,R7,#+16
   \   00000758   0xEB07 0x6E0E      ADD      LR,R7,LR, LSL #+24
   \   0000075C   0x7A17             LDRB     R7,[R2, #+8]
   \   0000075E   0x7A52             LDRB     R2,[R2, #+9]
   \   00000760   0xEB09 0x0383      ADD      R3,R9,R3, LSL #+2
   \   00000764   0xEB0E 0x2707      ADD      R7,LR,R7, LSL #+8
   \   00000768   0xF8D3 0xC634      LDR      R12,[R3, #+1588]
   \   0000076C   0x443A             ADD      R2,R7,R2
   \   0000076E   0xEA42 0x020C      ORR      R2,R2,R12
   \   00000772   0xF8C3 0x2634      STR      R2,[R3, #+1588]
   \   00000776   0xE00F             B.N      ??RevealHandlerIncomming_74
   \                     ??RevealHandlerIncomming_73: (+1)
   \   00000778   0xF81C 0x7B01      LDRB     R7,[R12], #+1
   \   0000077C   0x1C5B             ADDS     R3,R3,#+1
   \   0000077E   0xB2DB             UXTB     R3,R3
   \   00000780   0x45BE             CMP      LR,R7
   \   00000782   0xBF1F             ITTTT    NE 
   \   00000784   0x1C5B             ADDNE    R3,R3,#+1
   \   00000786   0xB2DB             UXTBNE   R3,R3
   \   00000788   0xF81C 0x7B01      LDRBNE   R7,[R12], #+1
   \   0000078C   0x45BE             CMPNE    LR,R7
   \   0000078E   0xD0DF             BEQ.N    ??RevealHandlerIncomming_71
   \   00000790   0x1C5B             ADDS     R3,R3,#+1
   \   00000792   0xB2DB             UXTB     R3,R3
   \   00000794   0x2B13             CMP      R3,#+19
   \   00000796   0xD3D5             BCC.N    ??RevealHandlerIncomming_72
   \                     ??RevealHandlerIncomming_74: (+1)
   \   00000798   0x1D49             ADDS     R1,R1,#+5
   \   0000079A   0x7932             LDRB     R2,[R6, #+4]
   \   0000079C   0xB2C9             UXTB     R1,R1
   \   0000079E   0x4291             CMP      R1,R2
   \   000007A0   0xDBC7             BLT.N    ??RevealHandlerIncomming_70
   \                     ??RevealHandlerIncomming_64: (+1)
   \   000007A2   0x79F0             LDRB     R0,[R6, #+7]
   \   000007A4   0x21C8             MOVS     R1,#+200
   \   000007A6   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   000007AA   0xF8A9 0x0622      STRH     R0,[R9, #+1570]
   \   000007AE   0xE05D             B.N      ??RevealHandlerIncomming_29
   \                     ??RevealHandlerIncomming_24: (+1)
   \   000007B0   0x2405             MOVS     R4,#+5
   \   000007B2   0xE058             B.N      ??RevealHandlerIncomming_6
   1737                          }
   1738                      }
   1739                  }
   1740                  else
   1741                  {
   1742                      if (pt->sdu_length <= (REVEAL_PAYLOAD_INCOMING_SIZE + REVEAL_API_OP_SIZE))
   \                     ??RevealHandlerIncomming_3: (+1)
   \   000007B4   0x7930             LDRB     R0,[R6, #+4]
   \   000007B6   0x2844             CMP      R0,#+68
   \   000007B8   0xDA55             BGE.N    ??RevealHandlerIncomming_6
   1743                      {
   1744                          Reveal_Adapter_Buffer.destination = pt->destination;
   \   000007BA   0x78B0             LDRB     R0,[R6, #+2]
   \   000007BC   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \   000007C0   0xF000 0x000F      AND      R0,R0,#0xF
   \   000007C4   0xF001 0x01F0      AND      R1,R1,#0xF0
   \   000007C8   0x4308             ORRS     R0,R0,R1
   \   000007CA   0xF889 0x0000      STRB     R0,[R9, #+0]
   1745                          Reveal_Adapter_Buffer.node_id = pt->source;
   \   000007CE   0xF000 0x000F      AND      R0,R0,#0xF
   \   000007D2   0x78B1             LDRB     R1,[R6, #+2]
   \   000007D4   0x0909             LSRS     R1,R1,#+4
   \   000007D6   0xEA40 0x1001      ORR      R0,R0,R1, LSL #+4
   \   000007DA   0xF889 0x0000      STRB     R0,[R9, #+0]
   1746                          Reveal_Adapter_Buffer.sdu_length = pt->sdu_length;
   \   000007DE   0x7930             LDRB     R0,[R6, #+4]
   1747                          Reveal_Adapter_Buffer.sap = pt->sap;
   \   000007E0   0xF899 0x1002      LDRB     R1,[R9, #+2]
   \   000007E4   0xF889 0x0001      STRB     R0,[R9, #+1]
   \   000007E8   0xF001 0x010F      AND      R1,R1,#0xF
   \   000007EC   0x78F0             LDRB     R0,[R6, #+3]
   \   000007EE   0xF000 0x000F      AND      R0,R0,#0xF
   \   000007F2   0xEA41 0x1000      ORR      R0,R1,R0, LSL #+4
   \   000007F6   0xF889 0x0002      STRB     R0,[R9, #+2]
   1748                          memcpy(&Reveal_Adapter_Buffer.api_id,pt->payload,pt->sdu_length + REVEAL_LLC_CRC_SIZE);
   \   000007FA   0x1D71             ADDS     R1,R6,#+5
   \   000007FC   0x7930             LDRB     R0,[R6, #+4]
   \   000007FE   0x1C82             ADDS     R2,R0,#+2
   \   00000800   0xF109 0x0003      ADD      R0,R9,#+3
   \   00000804   0x.... 0x....      BL       __aeabi_memcpy
   1749          
   1750                          reason_code = RevealHandleParser(&Reveal_Adapter_Buffer,feedback,FALSE,FALSE);
   \   00000808   0xF05F 0x0406      MOVS.W   R4,#+6
   \   0000080C   0xF04F 0x0A00      MOV      R10,#+0
   \   00000810   0x.... 0x....      ADR.W    R11,REVEAL_PARSER+0x1
   \                     ??RevealHandlerIncomming_75: (+1)
   \   00000814   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000818   0xF899 0x1003      LDRB     R1,[R9, #+3]
   \   0000081C   0x4288             CMP      R0,R1
   \   0000081E   0xBF18             IT       NE 
   \   00000820   0x2800             CMPNE    R0,#+0
   \   00000822   0xD117             BNE.N    ??RevealHandlerIncomming_76
   \   00000824   0xF899 0x0001      LDRB     R0,[R9, #+1]
   \   00000828   0x1E80             SUBS     R0,R0,#+2
   \   0000082A   0xF889 0x0048      STRB     R0,[R9, #+72]
   \   0000082E   0xB13F             CBZ.N    R7,??RevealHandlerIncomming_77
   \   00000830   0x2400             MOVS     R4,#+0
   \   00000832   0xF8DB 0x1007      LDR      R1,[R11, #+7]
   \   00000836   0x0008             MOVS     R0,R1
   \   00000838   0xD009             BEQ.N    ??RevealHandlerIncomming_78
   \   0000083A   0x4648             MOV      R0,R9
   \   0000083C   0x4788             BLX      R1
   \   0000083E   0xE006             B.N      ??RevealHandlerIncomming_78
   \                     ??RevealHandlerIncomming_77: (+1)
   \   00000840   0xF8DB 0x1003      LDR      R1,[R11, #+3]
   \   00000844   0x0008             MOVS     R0,R1
   \   00000846   0xD002             BEQ.N    ??RevealHandlerIncomming_78
   \   00000848   0x4648             MOV      R0,R9
   \   0000084A   0x4788             BLX      R1
   \   0000084C   0x4604             MOV      R4,R0
   \                     ??RevealHandlerIncomming_78: (+1)
   \   0000084E   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000852   0xB940             CBNZ.N   R0,??RevealHandlerIncomming_6
   \                     ??RevealHandlerIncomming_76: (+1)
   \   00000854   0xF10A 0x0001      ADD      R0,R10,#+1
   \   00000858   0xFA5F 0xFA80      UXTB     R10,R0
   \   0000085C   0xF10B 0x0B10      ADD      R11,R11,#+16
   \   00000860   0xF1BA 0x0F0A      CMP      R10,#+10
   \   00000864   0xD3D6             BCC.N    ??RevealHandlerIncomming_75
   1751                      }
   1752                      else
   1753                      {
   1754                          //reason_code
   1755                      }
   1756                  }
   1757          
   1758                  if ((feedback == 0) &&  // If this is a command, it prepares the ack message
   1759                      (reason_code != NVO_RS_DONT_SEND_ACK))
   \                     ??RevealHandlerIncomming_6: (+1)
   \   00000866   0xB9F7             CBNZ.N   R7,??RevealHandlerIncomming_11
   \   00000868   0x2C0D             CMP      R4,#+13
   \   0000086A   0xD01C             BEQ.N    ??RevealHandlerIncomming_11
   1760                  {
   1761                      // Command
   1762                      Reveal_Aux = (uint8)(Reveal_Ack_Write + 1);
   \                     ??RevealHandlerIncomming_29: (+1)
   \   0000086C   0xF899 0x0612      LDRB     R0,[R9, #+1554]
   \   00000870   0x1C41             ADDS     R1,R0,#+1
   1763                      if (Reveal_Aux >= REVEAL_ACK_FIFO)
   \   00000872   0xB2C9             UXTB     R1,R1
   \   00000874   0x2904             CMP      R1,#+4
   \   00000876   0xBFA8             IT       GE 
   1764                      {
   1765                          Reveal_Aux = 0;
   \   00000878   0x2100             MOVGE    R1,#+0
   \   0000087A   0xF889 0x1615      STRB     R1,[R9, #+1557]
   1766                      }
   1767          
   1768                      if (Reveal_Aux != Reveal_Ack_Read)
   \   0000087E   0xF899 0x2613      LDRB     R2,[R9, #+1555]
   \   00000882   0xF899 0x1615      LDRB     R1,[R9, #+1557]
   \   00000886   0x4291             CMP      R1,R2
   \   00000888   0xD00D             BEQ.N    ??RevealHandlerIncomming_11
   \   0000088A   0x78B2             LDRB     R2,[R6, #+2]
   \   0000088C   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   00000890   0x0912             LSRS     R2,R2,#+4
   \   00000892   0xF880 0x2097      STRB     R2,[R0, #+151]
   1769                      {
   1770                          Reveal_Ack_Buffer[Reveal_Ack_Write].node = pt->source;
   1771                          Reveal_Ack_Buffer[Reveal_Ack_Write].api = api;
   \   00000896   0xF880 0x8095      STRB     R8,[R0, #+149]
   1772                          Reveal_Ack_Buffer[Reveal_Ack_Write].op_code = op_code;
   \   0000089A   0xF880 0x5096      STRB     R5,[R0, #+150]
   1773                          Reveal_Ack_Buffer[Reveal_Ack_Write].reason_code = reason_code;
   \   0000089E   0xF880 0x4094      STRB     R4,[R0, #+148]
   1774                          Reveal_Ack_Write = Reveal_Aux;
   \   000008A2   0xF889 0x1612      STRB     R1,[R9, #+1554]
   1775                      }
   1776                      else
   1777                      {
   1778                          REVEAL_EXCEPTION_ACK_QUEUE_FULL(pt->source,api,op_code,reason_code);
   1779                      }
   1780          
   1781                      REVEAL__ACK_INCOMING_MESSAGE(pt->source,api,op_code,reason_code);
   1782                  }
   1783                  FREE_MESSAGER(REVEAL_SAP);
   \                     ??RevealHandlerIncomming_11: (+1)
   \   000008A6   0xB001             ADD      SP,SP,#+4
   \   000008A8   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   000008AC   0x2004             MOVS     R0,#+4
   \   000008AE   0x.... 0x....      B.W      Win__FreeIncomingMessage
   1784              }
   1785          #endif
   1786          }
   \                     ??RevealHandlerIncomming_1: (+1)
   \   000008B2   0xB001             ADD      SP,SP,#+4
   \   000008B4   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1787          
   1788          //---------------------------------------------------------------------------------------------------------------------
   1789          /**
   1790           * @brief This method handles the outgoing messages
   1791           * @details This method could be called every 25ms or every 5ms depending on the system demand.
   1792           */

   \                                 In section .text, align 4, keep-with-next
   1793          static void RevealHandlerOutgoing(void)
   1794          {
   \                     RevealHandlerOutgoing: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   1795          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
   1796              LLC_QUEUED_TYPE queue_retval;
   1797              uint8 count;
   1798              uint8 api;
   1799              PT_TX_TYPE * pt;
   1800              REVEAL_COMMAND_TYPE * ptr;
   1801          #endif
   1802          
   1803          
   1804          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
   1805              // Handle Outgoing message
   1806              if (Reveal_Ack_Write != Reveal_Ack_Read)
   \   00000004   0x.... 0x....      LDR.W    R8,??DataTable24
   \   00000008   0xF898 0x0612      LDRB     R0,[R8, #+1554]
   \   0000000C   0xF898 0x1613      LDRB     R1,[R8, #+1555]
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD033             BEQ.N    ??RevealHandlerOutgoing_1
   1807              {
   1808                  // process acknowledgment
   1809                  pt = ALLOCATE_BUFFER(Reveal_Ack_Buffer[Reveal_Ack_Read].node);
   \   00000014   0x.... 0x....      BL       Win__AllocateMessage
   \   00000018   0x0005             MOVS     R5,R0
   1810                  if (pt != (PT_TX_TYPE *)NULL)
   \   0000001A   0xF000 0x8182      BEQ.W    ??RevealHandlerOutgoing_2
   \   0000001E   0xF898 0x0613      LDRB     R0,[R8, #+1555]
   \   00000022   0x78AA             LDRB     R2,[R5, #+2]
   \   00000024   0xEB08 0x0080      ADD      R0,R8,R0, LSL #+2
   \   00000028   0xF890 0x1097      LDRB     R1,[R0, #+151]
   \   0000002C   0xF361 0x0203      BFI      R2,R1,#+0,#+4
   \   00000030   0x70AA             STRB     R2,[R5, #+2]
   1811                  {
   1812                      // Transfer the package from Reveal to LLC in here
   1813                      pt->destination = Reveal_Ack_Buffer[Reveal_Ack_Read].node;
   1814                      pt->sap = REVEAL_SAP;
   \   00000032   0x78E9             LDRB     R1,[R5, #+3]
   \   00000034   0xF001 0x01F0      AND      R1,R1,#0xF0
   \   00000038   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000003C   0x70E9             STRB     R1,[R5, #+3]
   1815                      pt->sdu_length = 5;
   \   0000003E   0x2105             MOVS     R1,#+5
   \   00000040   0x7129             STRB     R1,[R5, #+4]
   1816                      pt->payload[0] = REVEAL_API_CORE;
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x7169             STRB     R1,[R5, #+5]
   1817                      pt->payload[1] = 0x21;
   \   00000046   0x2121             MOVS     R1,#+33
   \   00000048   0x71A9             STRB     R1,[R5, #+6]
   1818                      pt->payload[2] = Reveal_Ack_Buffer[Reveal_Ack_Read].reason_code;
   \   0000004A   0xF890 0x1094      LDRB     R1,[R0, #+148]
   \   0000004E   0x71E9             STRB     R1,[R5, #+7]
   1819                      pt->payload[3] = Reveal_Ack_Buffer[Reveal_Ack_Read].api;
   \   00000050   0xF890 0x1095      LDRB     R1,[R0, #+149]
   \   00000054   0x7229             STRB     R1,[R5, #+8]
   1820                      pt->payload[4] = Reveal_Ack_Buffer[Reveal_Ack_Read].op_code;
   \   00000056   0xF890 0x0096      LDRB     R0,[R0, #+150]
   \   0000005A   0x7268             STRB     R0,[R5, #+9]
   1821                      QUEUE_MESSAGER(Reveal_Ack_Buffer[Reveal_Ack_Read].node);
   \   0000005C   0x.... 0x....      BL       Win__QueueMessage
   1822                      Reveal_Ack_Read++;
   \   00000060   0xF898 0x0613      LDRB     R0,[R8, #+1555]
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0xF888 0x0613      STRB     R0,[R8, #+1555]
   1823                      if (Reveal_Ack_Read >= REVEAL_ACK_FIFO)
   \   0000006A   0xB2C0             UXTB     R0,R0
   \   0000006C   0x2804             CMP      R0,#+4
   \   0000006E   0xF2C0 0x8158      BLT.W    ??RevealHandlerOutgoing_2
   1824                      {
   1825                          Reveal_Ack_Read= 0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xF888 0x0613      STRB     R0,[R8, #+1555]
   1826                      }
   1827                  }
   1828              }
   1829              else
   1830              {
   1831                  switch (Reveal_Outgoing_State)
   1832                  {
   1833                      case REVEAL_OUTGOING_STATE_IDLE:
   1834          
   1835                          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1836          
   1837                              if (Reveal_Queue_Priority_Write != Reveal_Queue_Priority_Read)
   1838                              {
   1839                                  Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_SENDING_PRIORITY;
   1840                                  Reveal_Queue_Retry = REVEAL_RETRY_TIMES;
   1841                                  //No Break Falls through
   1842                              }
   1843                              else
   1844                              {
   1845                                  if (Reveal_Queue_Write != Reveal_Queue_Read)
   1846                                  {
   1847                                      Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_SENDING;
   1848                                      Reveal_Queue_Retry = REVEAL_RETRY_TIMES;
   1849                                      //No Break Falls through
   1850                                  }
   1851                                  else
   1852                                  {
   1853                                      break;
   1854                                  }
   1855                              }
   1856                          #else
   1857                              if (Reveal_Queue_Write != Reveal_Queue_Read)
   1858                              {
   1859                                  Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_SENDING;
   1860                                  Reveal_Queue_Retry = REVEAL_RETRY_TIMES;
   1861                                  //No Break Falls through
   1862                              }
   1863                              else
   1864                              {
   1865                                  break;
   1866                              }
   1867                          #endif
   1868                          //lint -fallthrough
   1869                      case REVEAL_OUTGOING_STATE_SENDING:
   1870                  #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1871                      case REVEAL_OUTGOING_STATE_SENDING_PRIORITY:
   1872                  #endif
   1873                          // Transfer the package from Reveal to LLC protocol in here
   1874                          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1875                              if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_SENDING)
   1876                              {
   1877                                  ptr = &Reveal_Queue[Reveal_Queue_Read];
   1878                              }
   1879                              else
   1880                              {
   1881                                  ptr = &Reveal_Queue_Priority[Reveal_Queue_Priority_Read];
   1882                              }
   1883                          #else
   1884                              ptr = &Reveal_Queue[Reveal_Queue_Read];
   1885                          #endif
   1886          
   1887                          Reveal_Drop_flag = FALSE;
   1888                          #if (REVEAL_SYNCH_PROCESS == ENABLED)
   1889                              if ((ptr->node < REVEAL_BROADCAST_NODE)
   1890                                  &&
   1891                                  (BIT_TEST(Reveal_Node_Status, ptr->node) == 0  ))
   1892                              {
   1893                                  // force the message to be dropped
   1894                                  Reveal_Queue_Timeout = 0;
   1895                                  Reveal_Queue_Retry = 1;
   1896          
   1897                                  #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1898                                      if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_SENDING)
   1899                                      {
   1900                                          Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_TIMING;
   1901                                      }
   1902                                      else
   1903                                      {
   1904                                          Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_TIMING_PRIORITY;
   1905                                      }
   1906                                  #else
   1907                                      Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_TIMING;
   1908                                  #endif
   1909          
   1910                                  Reveal_Drop_flag = TRUE;
   1911                              }
   1912                              else
   1913                          #endif
   1914                              {
   1915          
   1916                                  pt = ALLOCATE_BUFFER(ptr->node);
   1917                                  if (pt != (PT_TX_TYPE *)NULL)
   1918                                  {
   1919                                      pt->destination = ptr->node;
   1920                                      pt->sap = REVEAL_SAP;
   1921                                      pt->payload[0] = ptr->api;
   1922                                      pt->payload[1] = ptr->opcode;
   1923                                      if (ptr->feedback == 1)
   1924                                      {
   1925                                          pt->payload[1] |= 0x20;
   1926                                      }
   1927                                      else
   1928                                      {
   1929                                          pt->payload[1] &= 0xDF;
   1930                                      }
   1931                                      memcpy(&(pt->payload[2]),ptr->data,ptr->length);
   1932                                      pt->sdu_length = (uint8)(ptr->length + 2);
   1933                                      if (ptr->feedback == 0)
   1934                                      {
   1935                                          // Command
   1936                                          Reveal_Queue_Timeout = (REVEAL_TIMEOUT * (ptr->timeout + 1));
   1937                                          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1938                                              if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_SENDING)
   1939                                              {
   1940                                                  Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_TIMING;
   1941                                              }
   1942                                              else
   1943                                              {
   1944                                                  Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_TIMING_PRIORITY;
   1945                                              }
   1946                                          #else
   1947                                              Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_TIMING;
   1948                                          #endif
   1949                                      }
   1950                                      else
   1951                                      {
   1952                                          // Feedback
   1953                                          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1954                                              if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_SENDING)
   1955                                              {
   1956                                                  DropMessageFromQueue(FALSE);
   1957                                              }
   1958                                              else
   1959                                              {
   1960                                                  DropMessageFromQueue(TRUE);
   1961                                              }
   1962                                          #else
   1963                                              DropMessageFromQueue(FALSE);
   1964                                          #endif
   1965          
   1966                                          Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_IDLE;
   1967                                      }
   1968                                      queue_retval = QUEUE_MESSAGER(ptr->node);
   1969                                      // The following code prevents the Reveal to trying to send a external message to himself
   1970                                      if ((queue_retval == LLC_INVALID_ADDRESS) ||
   1971                                          (queue_retval == LLC_INVALID_SIZE))
   1972                                      {
   1973                                          #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1974                                              if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_TIMING)
   1975                                              {
   1976                                                  DropMessageFromQueue(FALSE);
   1977                                              }
   1978                                              else
   1979                                              {
   1980                                                  DropMessageFromQueue(TRUE);
   1981                                              }
   1982                                          #else
   1983                                              DropMessageFromQueue(FALSE);
   1984                                          #endif
   1985                                           Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_IDLE;
   1986                                      }
   1987                                  }
   1988                              }
   1989                          break;
   1990                      case REVEAL_OUTGOING_STATE_TIMING:
   1991                  #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   1992                      case REVEAL_OUTGOING_STATE_TIMING_PRIORITY:
   1993                  #endif
   1994                          if (Reveal_Queue_Timeout)
   1995                          {
   1996                              Reveal_Queue_Timeout--;
   1997                          }
   1998                          else
   1999                          {
   2000                              Reveal_Queue_Retry--;
   2001                              if (Reveal_Queue_Retry)
   2002                              {
   2003                                  #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   2004                                      if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_TIMING)
   2005                                      {
   2006                                          Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_SENDING;
   2007                                      }
   2008                                      else
   2009                                      {
   2010                                          Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_SENDING_PRIORITY;
   2011                                      }
   2012                                  #else
   2013                                      Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_SENDING;
   2014                                  #endif
   2015                              }
   2016                              else
   2017                              {
   2018                                  #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   2019                                      if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_TIMING)
   2020                                      {
   2021                                          api = Reveal_Queue[Reveal_Queue_Read].api;
   2022                                      }
   2023                                      else
   2024                                      {
   2025                                          api = Reveal_Queue_Priority[Reveal_Queue_Priority_Read].api;
   2026                                      }
   2027                                  #else
   2028                                      api = Reveal_Queue[Reveal_Queue_Read].api;
   2029                                  #endif
   2030          
   2031          
   2032                                  for (count=0;count< REVEAL_NUM_PARSERS;count++)
   2033                                  {
   2034                                     if ((REVEAL_PARSER[count].API == api) ||    // Specific API parser or
   2035                                         (REVEAL_PARSER[count].API == 0))        // Generic parser (API = 0) which should receive all APIs
   2036                                     {
   2037                                         if (REVEAL_PARSER[count].ACK_PARSER != NULL)
   2038                                         {
   2039                                              #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   2040                                                  if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_TIMING)
   2041                                                  {
   2042                                                      REVEAL_PARSER[count].ACK_PARSER(Reveal_Queue[Reveal_Queue_Read].node,
   2043                                                                                      Reveal_Queue[Reveal_Queue_Read].api,
   2044                                                                                      Reveal_Queue[Reveal_Queue_Read].opcode,
   2045                                                                                      NVO_RS_TIMEOUT);
   2046          
   2047                                                  }
   2048                                                  else
   2049                                                  {
   2050                                                      REVEAL_PARSER[count].ACK_PARSER(Reveal_Queue_Priority[Reveal_Queue_Priority_Read].node,
   2051                                                                                      Reveal_Queue_Priority[Reveal_Queue_Priority_Read].api,
   2052                                                                                      Reveal_Queue_Priority[Reveal_Queue_Priority_Read].opcode,
   2053                                                                                      NVO_RS_TIMEOUT);
   2054          
   2055                                                  }
   2056                                              #else
   2057                                                  REVEAL_PARSER[count].ACK_PARSER(Reveal_Queue[Reveal_Queue_Read].node,
   2058                                                                                  Reveal_Queue[Reveal_Queue_Read].api,
   2059                                                                                  Reveal_Queue[Reveal_Queue_Read].opcode,
   2060                                                                                  NVO_RS_TIMEOUT);
   2061          
   2062                                              #endif
   2063                                         }
   2064                                         if (REVEAL_PARSER[count].API != 0)      // If the generic parser is found it keeps searching for the specific parsers, otherwise it breaks and stop searching
   2065                                         {
   2066                                             break;
   2067                                         }
   2068                                     }
   2069                                  }
   2070          
   2071          
   2072                                  // If there is a message trying to be sent and it fail all retries it will set the node to fail state
   2073                                  if ((Reveal_Queue[Reveal_Queue_Read].node < 15) &&
   2074                                      (Reveal_Drop_flag == FALSE))
   2075                                  {
   2076                                      BIT_CLR(Reveal_Node_Status,Reveal_Queue[Reveal_Queue_Read].node);
   2077                                  }
   2078          
   2079          
   2080                                  #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   2081                                      if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_TIMING)
   2082                                      {
   2083                                          REVEAL_DROPPED_MESSAGE_EXCEPTION(Reveal_Queue[Reveal_Queue_Read].api,
   2084                                                                          Reveal_Queue[Reveal_Queue_Read].opcode,
   2085                                                                          Reveal_Queue[Reveal_Queue_Read].node);
   2086                                      }
   2087                                      else
   2088                                      {
   2089                                          REVEAL_DROPPED_MESSAGE_EXCEPTION(Reveal_Queue_Priority[Reveal_Queue_Priority_Read].api,
   2090                                                                           Reveal_Queue_Priority[Reveal_Queue_Priority_Read].opcode,
   2091                                                                           Reveal_Queue_Priority[Reveal_Queue_Priority_Read].node);
   2092                                      }
   2093                                  #else
   2094          
   2095                                      REVEAL_DROPPED_MESSAGE_EXCEPTION(Reveal_Queue[Reveal_Queue_Read].api,
   2096                                                                      Reveal_Queue[Reveal_Queue_Read].opcode,
   2097                                                                      Reveal_Queue[Reveal_Queue_Read].node);
   2098          
   2099                                  #endif
   2100          
   2101          
   2102          
   2103                                  #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   2104                                      if (Reveal_Outgoing_State == REVEAL_OUTGOING_STATE_TIMING)
   2105                                      {
   2106                                          DropMessageFromQueue(FALSE);
   2107                                      }
   2108                                      else
   2109                                      {
   2110                                          DropMessageFromQueue(TRUE);
   2111                                      }
   2112                                  #else
   2113          
   2114                                          DropMessageFromQueue(FALSE);
   2115          
   2116                                  #endif
   2117                                  Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_IDLE;
   2118                              }
   2119                          }
   2120                          break;
   2121                      default:
   2122                          Reveal_Outgoing_State = REVEAL_OUTGOING_STATE_IDLE;
   2123                          break;
   2124                  }
   2125              }
   2126          #endif
   2127          }
   \   00000078   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??RevealHandlerOutgoing_1: (+1)
   \   0000007C   0xF898 0x0614      LDRB     R0,[R8, #+1556]
   \   00000080   0x2804             CMP      R0,#+4
   \   00000082   0xF200 0x814B      BHI.W    ??RevealHandlerOutgoing_3
   \   00000086   0xE8DF 0xF010      TBH      [PC, R0, LSL #+1]
   \                     ??RevealHandlerOutgoing_0:
   \   0000008A   0x0005 0x0046      DC16     0x5,0x46,0xBA,0x46
   \              0x00BA 0x0046
   \   00000092   0x00BA             DC16     0xBA
   \                     ??RevealHandlerOutgoing_4: (+1)
   \   00000094   0xF898 0x060F      LDRB     R0,[R8, #+1551]
   \   00000098   0xF898 0x1610      LDRB     R1,[R8, #+1552]
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD02C             BEQ.N    ??RevealHandlerOutgoing_5
   \   000000A0   0x2003             MOVS     R0,#+3
   \   000000A2   0xF888 0x0614      STRB     R0,[R8, #+1556]
   \   000000A6   0xF888 0x060E      STRB     R0,[R8, #+1550]
   \                     ??RevealHandlerOutgoing_6: (+1)
   \   000000AA   0x2145             MOVS     R1,#+69
   \   000000AC   0xF898 0x0610      LDRB     R0,[R8, #+1552]
   \   000000B0   0xFB11 0x8000      SMLABB   R0,R1,R0,R8
   \   000000B4   0xF500 0x6696      ADD      R6,R0,#+1200
   \                     ??RevealHandlerOutgoing_7: (+1)
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0xF888 0x0617      STRB     R0,[R8, #+1559]
   \   000000BE   0x78B0             LDRB     R0,[R6, #+2]
   \   000000C0   0xF000 0x000F      AND      R0,R0,#0xF
   \   000000C4   0x280F             CMP      R0,#+15
   \   000000C6   0xDA30             BGE.N    ??RevealHandlerOutgoing_8
   \   000000C8   0xF8B8 0x1620      LDRH     R1,[R8, #+1568]
   \   000000CC   0xFA21 0xF000      LSR      R0,R1,R0
   \   000000D0   0x07C0             LSLS     R0,R0,#+31
   \   000000D2   0xD42A             BMI.N    ??RevealHandlerOutgoing_8
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0xF8A8 0x0618      STRH     R0,[R8, #+1560]
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0xF888 0x060E      STRB     R0,[R8, #+1550]
   \   000000E0   0xF898 0x0614      LDRB     R0,[R8, #+1556]
   \   000000E4   0x2801             CMP      R0,#+1
   \   000000E6   0xBF0C             ITE      EQ 
   \   000000E8   0x2002             MOVEQ    R0,#+2
   \   000000EA   0x2004             MOVNE    R0,#+4
   \   000000EC   0xF888 0x0614      STRB     R0,[R8, #+1556]
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0xF888 0x0617      STRB     R0,[R8, #+1559]
   \   000000F6   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??RevealHandlerOutgoing_5: (+1)
   \   000000FA   0xF898 0x060C      LDRB     R0,[R8, #+1548]
   \   000000FE   0xF898 0x160D      LDRB     R1,[R8, #+1549]
   \   00000102   0x4288             CMP      R0,R1
   \   00000104   0xF000 0x810D      BEQ.W    ??RevealHandlerOutgoing_2
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0xF888 0x0614      STRB     R0,[R8, #+1556]
   \   0000010E   0x2003             MOVS     R0,#+3
   \   00000110   0xF888 0x060E      STRB     R0,[R8, #+1550]
   \   00000114   0xE001             B.N      ??RevealHandlerOutgoing_9
   \                     ??RevealHandlerOutgoing_10: (+1)
   \   00000116   0x2801             CMP      R0,#+1
   \   00000118   0xD1C7             BNE.N    ??RevealHandlerOutgoing_6
   \                     ??RevealHandlerOutgoing_9: (+1)
   \   0000011A   0x2145             MOVS     R1,#+69
   \   0000011C   0xF898 0x060D      LDRB     R0,[R8, #+1549]
   \   00000120   0xFB11 0x8000      SMLABB   R0,R1,R0,R8
   \   00000124   0xF100 0x06A4      ADD      R6,R0,#+164
   \   00000128   0xE7C6             B.N      ??RevealHandlerOutgoing_7
   \                     ??RevealHandlerOutgoing_8: (+1)
   \   0000012A   0x.... 0x....      BL       Win__AllocateMessage
   \   0000012E   0x0005             MOVS     R5,R0
   \   00000130   0xF000 0x80F7      BEQ.W    ??RevealHandlerOutgoing_2
   \   00000134   0x78B0             LDRB     R0,[R6, #+2]
   \   00000136   0x78A9             LDRB     R1,[R5, #+2]
   \   00000138   0xF360 0x0103      BFI      R1,R0,#+0,#+4
   \   0000013C   0x70A9             STRB     R1,[R5, #+2]
   \   0000013E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000140   0xF000 0x00F0      AND      R0,R0,#0xF0
   \   00000144   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000148   0x70E8             STRB     R0,[R5, #+3]
   \   0000014A   0x7830             LDRB     R0,[R6, #+0]
   \   0000014C   0x7168             STRB     R0,[R5, #+5]
   \   0000014E   0x7870             LDRB     R0,[R6, #+1]
   \   00000150   0x71A8             STRB     R0,[R5, #+6]
   \   00000152   0x78B1             LDRB     R1,[R6, #+2]
   \   00000154   0xF3C1 0x1100      UBFX     R1,R1,#+4,#+1
   \   00000158   0x2900             CMP      R1,#+0
   \   0000015A   0xBF14             ITE      NE 
   \   0000015C   0xF040 0x0020      ORRNE    R0,R0,#0x20
   \   00000160   0xF000 0x00DF      ANDEQ    R0,R0,#0xDF
   \   00000164   0x71A8             STRB     R0,[R5, #+6]
   \   00000166   0x1D31             ADDS     R1,R6,#+4
   \   00000168   0x78F2             LDRB     R2,[R6, #+3]
   \   0000016A   0x1DE8             ADDS     R0,R5,#+7
   \   0000016C   0x.... 0x....      BL       __aeabi_memcpy
   \   00000170   0x78F0             LDRB     R0,[R6, #+3]
   \   00000172   0x1C80             ADDS     R0,R0,#+2
   \   00000174   0x7128             STRB     R0,[R5, #+4]
   \   00000176   0x78B2             LDRB     R2,[R6, #+2]
   \   00000178   0xF898 0x0610      LDRB     R0,[R8, #+1552]
   \   0000017C   0xF898 0x160D      LDRB     R1,[R8, #+1549]
   \   00000180   0xF3C2 0x1300      UBFX     R3,R2,#+4,#+1
   \   00000184   0xB973             CBNZ.N   R3,??RevealHandlerOutgoing_11
   \   00000186   0xF3C2 0x1240      UBFX     R2,R2,#+5,#+1
   \   0000018A   0x1C52             ADDS     R2,R2,#+1
   \   0000018C   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000190   0x00DA             LSLS     R2,R3,#+3
   \   00000192   0xF8A8 0x2618      STRH     R2,[R8, #+1560]
   \   00000196   0xF898 0x2614      LDRB     R2,[R8, #+1556]
   \   0000019A   0x2A01             CMP      R2,#+1
   \   0000019C   0xBF14             ITE      NE 
   \   0000019E   0x2204             MOVNE    R2,#+4
   \   000001A0   0x2202             MOVEQ    R2,#+2
   \   000001A2   0xE017             B.N      ??RevealHandlerOutgoing_12
   \                     ??RevealHandlerOutgoing_11: (+1)
   \   000001A4   0xF898 0x2614      LDRB     R2,[R8, #+1556]
   \   000001A8   0x2A01             CMP      R2,#+1
   \   000001AA   0xD109             BNE.N    ??RevealHandlerOutgoing_13
   \   000001AC   0xF898 0x260C      LDRB     R2,[R8, #+1548]
   \   000001B0   0x4291             CMP      R1,R2
   \   000001B2   0xD00E             BEQ.N    ??RevealHandlerOutgoing_14
   \   000001B4   0x1C49             ADDS     R1,R1,#+1
   \   000001B6   0xB2C9             UXTB     R1,R1
   \   000001B8   0x290F             CMP      R1,#+15
   \   000001BA   0xDB0A             BLT.N    ??RevealHandlerOutgoing_14
   \   000001BC   0x2100             MOVS     R1,#+0
   \   000001BE   0xE008             B.N      ??RevealHandlerOutgoing_14
   \                     ??RevealHandlerOutgoing_13: (+1)
   \   000001C0   0xF898 0x260F      LDRB     R2,[R8, #+1551]
   \   000001C4   0x4290             CMP      R0,R2
   \   000001C6   0xD004             BEQ.N    ??RevealHandlerOutgoing_14
   \   000001C8   0x1C40             ADDS     R0,R0,#+1
   \   000001CA   0xB2C0             UXTB     R0,R0
   \   000001CC   0x2805             CMP      R0,#+5
   \   000001CE   0xBFA8             IT       GE 
   \   000001D0   0x2000             MOVGE    R0,#+0
   \                     ??RevealHandlerOutgoing_14: (+1)
   \   000001D2   0x2200             MOVS     R2,#+0
   \                     ??RevealHandlerOutgoing_12: (+1)
   \   000001D4   0xF888 0x160D      STRB     R1,[R8, #+1549]
   \   000001D8   0xF888 0x2614      STRB     R2,[R8, #+1556]
   \   000001DC   0xF888 0x0610      STRB     R0,[R8, #+1552]
   \   000001E0   0x.... 0x....      BL       Win__QueueMessage
   \   000001E4   0x2803             CMP      R0,#+3
   \   000001E6   0xBF18             IT       NE 
   \   000001E8   0x2802             CMPNE    R0,#+2
   \   000001EA   0xF040 0x809A      BNE.W    ??RevealHandlerOutgoing_2
   \   000001EE   0xF898 0x0614      LDRB     R0,[R8, #+1556]
   \   000001F2   0x2802             CMP      R0,#+2
   \   000001F4   0xF040 0x8083      BNE.W    ??RevealHandlerOutgoing_15
   \   000001F8   0xF898 0x060D      LDRB     R0,[R8, #+1549]
   \   000001FC   0xE071             B.N      ??RevealHandlerOutgoing_16
   \                     ??RevealHandlerOutgoing_17: (+1)
   \   000001FE   0xF8B8 0x1618      LDRH     R1,[R8, #+1560]
   \   00000202   0xB121             CBZ.N    R1,??RevealHandlerOutgoing_18
   \   00000204   0x1E48             SUBS     R0,R1,#+1
   \   00000206   0xF8A8 0x0618      STRH     R0,[R8, #+1560]
   \   0000020A   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??RevealHandlerOutgoing_18: (+1)
   \   0000020E   0xF898 0x160E      LDRB     R1,[R8, #+1550]
   \   00000212   0x1E49             SUBS     R1,R1,#+1
   \   00000214   0xF888 0x160E      STRB     R1,[R8, #+1550]
   \   00000218   0xB2C9             UXTB     R1,R1
   \   0000021A   0xB121             CBZ.N    R1,??RevealHandlerOutgoing_19
   \   0000021C   0x2802             CMP      R0,#+2
   \   0000021E   0xBF14             ITE      NE 
   \   00000220   0x2003             MOVNE    R0,#+3
   \   00000222   0x2001             MOVEQ    R0,#+1
   \   00000224   0xE07B             B.N      ??RevealHandlerOutgoing_20
   \                     ??RevealHandlerOutgoing_19: (+1)
   \   00000226   0x2545             MOVS     R5,#+69
   \   00000228   0x2802             CMP      R0,#+2
   \   0000022A   0xD106             BNE.N    ??RevealHandlerOutgoing_21
   \   0000022C   0xF898 0x060D      LDRB     R0,[R8, #+1549]
   \   00000230   0xFB15 0x8000      SMLABB   R0,R5,R0,R8
   \   00000234   0xF890 0x60A4      LDRB     R6,[R0, #+164]
   \   00000238   0xE005             B.N      ??RevealHandlerOutgoing_22
   \                     ??RevealHandlerOutgoing_21: (+1)
   \   0000023A   0xF898 0x0610      LDRB     R0,[R8, #+1552]
   \   0000023E   0xFB15 0x8000      SMLABB   R0,R5,R0,R8
   \   00000242   0xF890 0x64B0      LDRB     R6,[R0, #+1200]
   \                     ??RevealHandlerOutgoing_22: (+1)
   \   00000246   0x.... 0x....      ADR.W    R4,REVEAL_PARSER+0xC
   \   0000024A   0x2700             MOVS     R7,#+0
   \                     ??RevealHandlerOutgoing_23: (+1)
   \   0000024C   0xF814 0x0C0B      LDRB     R0,[R4, #-11]
   \   00000250   0x42B0             CMP      R0,R6
   \   00000252   0xBF18             IT       NE 
   \   00000254   0x2800             CMPNE    R0,#+0
   \   00000256   0xD125             BNE.N    ??RevealHandlerOutgoing_24
   \   00000258   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \   0000025C   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000260   0xD01D             BEQ.N    ??RevealHandlerOutgoing_25
   \   00000262   0xF898 0x0614      LDRB     R0,[R8, #+1556]
   \   00000266   0x2802             CMP      R0,#+2
   \   00000268   0xD10B             BNE.N    ??RevealHandlerOutgoing_26
   \   0000026A   0xF898 0x060D      LDRB     R0,[R8, #+1549]
   \   0000026E   0xFB15 0x8000      SMLABB   R0,R5,R0,R8
   \   00000272   0xF890 0x20A5      LDRB     R2,[R0, #+165]
   \   00000276   0xF890 0x10A4      LDRB     R1,[R0, #+164]
   \   0000027A   0xF890 0x00A6      LDRB     R0,[R0, #+166]
   \   0000027E   0x230E             MOVS     R3,#+14
   \   00000280   0xE00A             B.N      ??RevealHandlerOutgoing_27
   \                     ??RevealHandlerOutgoing_26: (+1)
   \   00000282   0xF898 0x0610      LDRB     R0,[R8, #+1552]
   \   00000286   0xFB15 0x8000      SMLABB   R0,R5,R0,R8
   \   0000028A   0xF890 0x24B1      LDRB     R2,[R0, #+1201]
   \   0000028E   0xF890 0x14B0      LDRB     R1,[R0, #+1200]
   \   00000292   0xF890 0x04B2      LDRB     R0,[R0, #+1202]
   \   00000296   0x230E             MOVS     R3,#+14
   \                     ??RevealHandlerOutgoing_27: (+1)
   \   00000298   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000029C   0x47E0             BLX      R12
   \                     ??RevealHandlerOutgoing_25: (+1)
   \   0000029E   0xF814 0x0C0B      LDRB     R0,[R4, #-11]
   \   000002A2   0xB920             CBNZ.N   R0,??RevealHandlerOutgoing_28
   \                     ??RevealHandlerOutgoing_24: (+1)
   \   000002A4   0x1C7F             ADDS     R7,R7,#+1
   \   000002A6   0xB2FF             UXTB     R7,R7
   \   000002A8   0x3410             ADDS     R4,R4,#+16
   \   000002AA   0x2F0A             CMP      R7,#+10
   \   000002AC   0xD3CE             BCC.N    ??RevealHandlerOutgoing_23
   \                     ??RevealHandlerOutgoing_28: (+1)
   \   000002AE   0xF898 0x060D      LDRB     R0,[R8, #+1549]
   \   000002B2   0xFB15 0x8100      SMLABB   R1,R5,R0,R8
   \   000002B6   0xF891 0x10A6      LDRB     R1,[R1, #+166]
   \   000002BA   0xF001 0x010F      AND      R1,R1,#0xF
   \   000002BE   0x290F             CMP      R1,#+15
   \   000002C0   0xDA0B             BGE.N    ??RevealHandlerOutgoing_29
   \   000002C2   0xF898 0x2617      LDRB     R2,[R8, #+1559]
   \   000002C6   0xB942             CBNZ.N   R2,??RevealHandlerOutgoing_29
   \   000002C8   0xF8B8 0x2620      LDRH     R2,[R8, #+1568]
   \   000002CC   0x2301             MOVS     R3,#+1
   \   000002CE   0xFA03 0xF101      LSL      R1,R3,R1
   \   000002D2   0xEA22 0x0101      BIC      R1,R2,R1
   \   000002D6   0xF8A8 0x1620      STRH     R1,[R8, #+1568]
   \                     ??RevealHandlerOutgoing_29: (+1)
   \   000002DA   0xF898 0x1614      LDRB     R1,[R8, #+1556]
   \   000002DE   0x2902             CMP      R1,#+2
   \   000002E0   0xD10D             BNE.N    ??RevealHandlerOutgoing_15
   \                     ??RevealHandlerOutgoing_16: (+1)
   \   000002E2   0xF898 0x160C      LDRB     R1,[R8, #+1548]
   \   000002E6   0x4288             CMP      R0,R1
   \   000002E8   0xD018             BEQ.N    ??RevealHandlerOutgoing_3
   \   000002EA   0x1C40             ADDS     R0,R0,#+1
   \   000002EC   0xF888 0x060D      STRB     R0,[R8, #+1549]
   \   000002F0   0xB2C0             UXTB     R0,R0
   \   000002F2   0x280F             CMP      R0,#+15
   \   000002F4   0xDB12             BLT.N    ??RevealHandlerOutgoing_3
   \   000002F6   0x2000             MOVS     R0,#+0
   \   000002F8   0xF888 0x060D      STRB     R0,[R8, #+1549]
   \   000002FC   0xE00E             B.N      ??RevealHandlerOutgoing_3
   \                     ??RevealHandlerOutgoing_15: (+1)
   \   000002FE   0xF898 0x0610      LDRB     R0,[R8, #+1552]
   \   00000302   0xF898 0x160F      LDRB     R1,[R8, #+1551]
   \   00000306   0x4288             CMP      R0,R1
   \   00000308   0xD008             BEQ.N    ??RevealHandlerOutgoing_3
   \   0000030A   0x1C40             ADDS     R0,R0,#+1
   \   0000030C   0xF888 0x0610      STRB     R0,[R8, #+1552]
   \   00000310   0xB2C0             UXTB     R0,R0
   \   00000312   0x2805             CMP      R0,#+5
   \   00000314   0xBFA4             ITT      GE 
   \   00000316   0x2000             MOVGE    R0,#+0
   \   00000318   0xF888 0x0610      STRBGE   R0,[R8, #+1552]
   \                     ??RevealHandlerOutgoing_3: (+1)
   \   0000031C   0x2000             MOVS     R0,#+0
   \                     ??RevealHandlerOutgoing_20: (+1)
   \   0000031E   0xF888 0x0614      STRB     R0,[R8, #+1556]
   \                     ??RevealHandlerOutgoing_2: (+1)
   \   00000322   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     Reveal_Adapter_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     POSSIBLE_BLOCKED_APIS_LIST+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     Reveal_Adapter_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     POSSIBLE_BLOCKED_APIS_LIST+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     Reveal_Adapter_Buffer
   2128          
   2129          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_INTERNAL_ONLY)
   2130          //---------------------------------------------------------------------------------------------------------------------
   2131          /**
   2132           * @brief Drop the message in the head of the queue.
   2133           * @details This function is used when a message is acknowledged or it's a bad message and it must be dropped.
   2134           * @param priority
   2135           */
   2136          static void DropMessageFromQueue(uint8 priority)
   2137          {
   2138              #if (REVEAL_QUEUE_PRIORITY == ENABLED)
   2139                  if (priority == TRUE)
   2140                  {
   2141                      if (Reveal_Queue_Priority_Read != Reveal_Queue_Priority_Write)
   2142                      {
   2143                          Reveal_Queue_Priority_Read++;
   2144                          if (Reveal_Queue_Priority_Read >= REVEAL_QUEUE_PRIORITY_SIZE)
   2145                          {
   2146                              Reveal_Queue_Priority_Read = 0;
   2147                          }
   2148                      }
   2149                  }
   2150                  else
   2151                  {
   2152                      if (Reveal_Queue_Read != Reveal_Queue_Write)
   2153                      {
   2154                          Reveal_Queue_Read++;
   2155                          if (Reveal_Queue_Read >= REVEAL_QUEUE_SIZE)
   2156                          {
   2157                              Reveal_Queue_Read = 0;
   2158                          }
   2159                      }
   2160                  }
   2161              #else
   2162          
   2163                  if (Reveal_Queue_Read != Reveal_Queue_Write)
   2164                  {
   2165                      Reveal_Queue_Read++;
   2166                      if (Reveal_Queue_Read >= REVEAL_QUEUE_SIZE)
   2167                      {
   2168                          Reveal_Queue_Read = 0;
   2169                      }
   2170                  }
   2171              #endif
   2172          }
   2173          #endif
   2174          
   2175          //---------------------------------------------------------------------------------------------------------------------
   2176          /**
   2177           * @brief   Method to determine if the requested APIs from the Block Messages feature can be blocked. Result is based on
   2178           *          the list of possible APIs that can be blocked in the POSSIBLE_BLOCKED_APIS_LIST table.
   2179           * @param   pt: pointer to the list of APIs and opcodes requested to be blocked
   2180           * @param   number_of_bytes: number of bytes in the buffer pointed to by the "pt" argument
   2181           * @return  TRUE if all the requested APIs can be blocked, else FALSE.
   2182           */
   2183          static BOOL_TYPE RequestedAPIsCanBeBlocked(uint8 * pt, uint8 number_of_bytes)
   2184          {
   2185              uint8 index;
   2186              BOOL_TYPE apis_can_be_blocked = TRUE;
   2187          
   2188              // Verify all the requested APIs are in POSSIBLE_BLOCKED_APIS_LIST
   2189              for (uint8 count = 0; count < number_of_bytes; count+=BLOCKED_API_OPCODE_NUM_BYTES)   // Incrementing by BLOCKED_API_OPCODE_NUM_BYTES to skip over api/opcode pairs which are BLOCKED_API_OPCODE_NUM_BYTES bytes each
   2190              {
   2191                  // Walk the POSSIBLE_BLOCKED_APIS_LIST table to see if the requested API can be blocked
   2192                  for (index = 0; index < ELEMENTS_IN_ARRAY(POSSIBLE_BLOCKED_APIS_LIST); index++)
   2193                  {
   2194                      if (pt[count] == POSSIBLE_BLOCKED_APIS_LIST[index])
   2195                      {
   2196                          // Found the API is POSSIBLE_BLOCKED_APIS_LIST
   2197                          break;
   2198                      }
   2199                      //else, did not match API in POSSIBLE_BLOCKED_APIS_LIST, need to check next one
   2200                  }
   2201          
   2202                  // Check if the requested API was not found in the POSSIBLE_BLOCKED_APIS_LIST table
   2203                  if (index == ELEMENTS_IN_ARRAY(POSSIBLE_BLOCKED_APIS_LIST))
   2204                  {
   2205                      // API was not in the POSSIBLE_BLOCKED_APIS_LIST table and cannot be blocked
   2206                      apis_can_be_blocked = FALSE;
   2207                      break;
   2208                  }
   2209              }
   2210          
   2211              return(apis_can_be_blocked);
   2212          }
   2213          
   2214          //---------------------------------------------------------------------------------------------------------------------
   2215          /**
   2216           * @brief This method handles a incoming Ack message.
   2217           * @param    node - the node id to send the message to
   2218           * @param    api - the api id of the command
   2219           * @param    opcode - the opcode of the command
   2220           * @param reason
   2221           * @param full_seach
   2222           */
   2223          static void RevealHandleAckParser(uint8 node, uint8 api, uint8 op_code, REVEAL_RECIPE_STATUS_TYPE reason, uint8 full_search)
   2224          {
   2225              uint8 count;
   2226              for (count=0;count< REVEAL_NUM_PARSERS;count++)
   2227              {
   2228                 if ((REVEAL_PARSER[count].API == api) ||    // Specific API parser or
   2229                     (REVEAL_PARSER[count].API == 0))        // Generic parser (API = 0) which should receive all APIs
   2230                 {
   2231                     if (REVEAL_PARSER[count].ACK_PARSER != NULL) // If the parser for the feedback is present
   2232                     {
   2233                         REVEAL_PARSER[count].ACK_PARSER(node,api, op_code,reason);
   2234                     }
   2235          
   2236                     if (full_search == FALSE)
   2237                     {
   2238                         if (REVEAL_PARSER[count].API != 0)      // If the generic parser is found it keeps searching for the specific parsers, otherwise it breaks and stop searching
   2239                         {
   2240                             break;
   2241                         }
   2242                     }
   2243                 }
   2244              }
   2245          }
   2246          
   2247          //---------------------------------------------------------------------------------------------------------------------
   2248          /**
   2249           * @brief This method handles the incoming messages such as Commands and Feedbacks
   2250           * @param pt
   2251           * @param feedback
   2252           * @param address_checking
   2253           * @return The return depends how the specific parser will parse the message. It has to be with have the parser, api and opcode and be able to handle the parameters as they come.
   2254           */
   2255          static REVEAL_RECIPE_STATUS_TYPE RevealHandleParser(REVEAL_MSG_TYPE * pt,uint8 feedback, uint8 address_checking, uint8 full_search)
                                                                                                                ^
Remark[Pe826]: parameter "address_checking" was never referenced

      static uint8 Reveal_Queue_Priority_Retry;
                   ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Service\Reveal\Reveal.c",120  Warning[Pe550]: 
          variable "Reveal_Queue_Priority_Retry" was set but never used

      static uint16 Reveal_Queue_Priority_Timeout;
                    ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Service\Reveal\Reveal.c",121  Warning[Pe550]: 
          variable "Reveal_Queue_Priority_Timeout" was set but never used
   2256          {
   2257              REVEAL_RECIPE_STATUS_TYPE retval;
   2258              uint8 count;
   2259              retval = NVO_RS_UNSUP_UNAVAILABLE;
   2260          
   2261              for (count=0;count< REVEAL_NUM_PARSERS;count++)
   2262              {
   2263                  if ((REVEAL_PARSER[count].API == pt->api_id) ||    // Specific API parser or
   2264                      (REVEAL_PARSER[count].API == 0))        // Generic parser (API = 0) which should receive all APIs
   2265                  {
   2266          #if (REVEAL_ROUTER_FEATURE != REVEAL_ROUTER_DISABLED)
   2267                      if ((address_checking == FALSE) ||
   2268                          (REVEAL_PARSER[count].ADDRESS == pt->destination) ||
   2269                          (pt->destination == REVEAL_BROADCAST_NODE))
   2270          #endif
   2271                      {
   2272                          pt->size = (uint8)(pt->sdu_length-2);
   2273                          if (feedback == TRUE)                   // If it's a Feedback
   2274                          {
   2275                              retval = NVO_RS_READY;
   2276                              if (REVEAL_PARSER[count].FEEDBACK_PARSER != NULL) // If the parser for the feedback is present
   2277                              {
   2278                                  REVEAL_PARSER[count].FEEDBACK_PARSER(pt);
   2279                              }
   2280                          }
   2281                          else
   2282                          {
   2283                                                                  // If it's a command
   2284                              if (REVEAL_PARSER[count].COMMAND_PARSER != NULL)    // If the parser for the command is present
   2285                              {
   2286                                  retval = REVEAL_PARSER[count].COMMAND_PARSER(pt);
   2287                              }
   2288                          }
   2289                          if (full_search == FALSE)
   2290                          {
   2291                              if (REVEAL_PARSER[count].API != 0)      // If the generic parser is found it keeps searching for the specific parsers, otherwise it breaks and stop searching
   2292                              {
   2293                                  break;
   2294                              }
   2295                          }
   2296                      }
   2297                  }
   2298              }
   2299              return (retval);
   2300          }
   2301          
   2302          //---------------------------------------------------------------------------------------------------------------------
   2303          /**
   2304           * @brief Local 1s counter for heart-beat
   2305           */
   2306          static void Reveal1sTasks(void)
   2307          {
   2308              REVEAL_COMMAND_TYPE * ptr;
   2309              if (Reveal_Heartbeat_Timer > 0)
   2310              {
   2311                  Reveal_Heartbeat_Counter++;
   2312                  if (Reveal_Heartbeat_Counter >= Reveal_Heartbeat_Timer)
   2313                  {
   2314                      Reveal_Heartbeat_Counter = 0;
   2315                      ptr = Reveal__NewFeedback(0x1,0x22, 0xF,0);
   2316                      if (ptr != NULL)
   2317                      {
   2318                          Reveal__QueueCommand(ptr);
   2319                      }
   2320                  }
   2321              }
   2322          }
   2323          
   2324          //---------------------------------------------------------------------------------------------------------------------
   2325          /**
   2326           *  @brief      Controls the timer used to block api/opcode messages and clears all the blocked messages when the timer
   2327           *              expires
   2328           */
   2329          static void UpdateBlockedMessagesTimer(void)
   2330          {
   2331              if (Reveal_Blocked_Messages_Remaining_Time > 0)
   2332              {
   2333                  // Timer is still running, update the remaining time
   2334                  Reveal_Blocked_Messages_Remaining_Time--;
   2335          
   2336                  if (Reveal_Blocked_Messages_Remaining_Time == 0)
   2337                  {
   2338                      // Timer has expired, clear all blocked api/opcodes
   2339                      memset(Reveal_Blocked_Messages, 0, sizeof(Reveal_Blocked_Messages));
   2340                  }
   2341              }
   2342          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   RevealHandlerIncomming
        40   -- Indirect call
        40   -> Reveal__QueueCommand
        40   -> SFUpdater__RxMaxPackage
         0   -> Win__FreeIncomingMessage
        40   -> Win__GetIncomingMessage
        40   -> __aeabi_memclr4
        40   -> __aeabi_memcpy
        40   -> __aeabi_memset4
      24   RevealHandlerOutgoing
        24   -- Indirect call
        24   -> Win__AllocateMessage
        24   -> Win__QueueMessage
        24   -> __aeabi_memcpy
       0   Reveal__AddDataS16
       0   Reveal__AddDataU16
       0   Reveal__AddDataU32
       0   Reveal__AddDataU8
      16   Reveal__AddDataU8Buffer
        16   -> __aeabi_memcpy
       0   Reveal__GetFreePriorityQueueSpace
       0   Reveal__GetFreeQueueSpace
       0   Reveal__GetMinimumPriorityQueueSpace
       0   Reveal__GetMinimumQueueSpace
       0   Reveal__GetNodestatus
       0   Reveal__GetNumMessagesPriorityQueue
       0   Reveal__GetNumMessagesQueue
       8   Reveal__Handler
         8   -> RevealHandlerIncomming
         8   -> RevealHandlerOutgoing
         0   -> __aeabi_memclr4
      16   Reveal__Handler1ms
        16   -> Reveal__QueueCommand
        16   -> Win__GetAddress
       8   Reveal__Initialize
         8   -> Reveal__QueueCommand
         8   -> Win__GetAddress
         8   -> __aeabi_memclr4
         8   -> __aeabi_memset4
      12   Reveal__NewCommand
      12   Reveal__NewFeedback
      12   Reveal__PriorityNewCommand
      12   Reveal__PriorityNewFeedback
      24   Reveal__QueueCommand
        24   -> __aeabi_memcpy
      16   Reveal__QueueMessageNoData
        16   -> Reveal__QueueCommand
      16   Reveal__QueueMessageS16
        16   -> Reveal__AddDataS16
        16   -> Reveal__QueueCommand
      16   Reveal__QueueMessageU16
        16   -> Reveal__AddDataU16
        16   -> Reveal__QueueCommand
      16   Reveal__QueueMessageU32
        16   -> Reveal__AddDataU32
        16   -> Reveal__QueueCommand
      16   Reveal__QueueMessageU8
        16   -> Reveal__QueueCommand
      16   Reveal__SetNodeHeartBeat
        16   -> Reveal__AddDataU16
         0   -> Reveal__QueueCommand


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable21
       4  ??DataTable22
       4  ??DataTable24
      20  POSSIBLE_BLOCKED_APIS_LIST
     160  REVEAL_PARSER
    2232  RevealHandlerIncomming
     806  RevealHandlerOutgoing
    1664  Reveal_Adapter_Buffer
          Reveal_Single_Queue
          Reveal_Ack_Buffer
          Reveal_Queue
          Reveal_Queue_Priority
          Reveal_Queue_Write
          Reveal_Queue_Read
          Reveal_Queue_Retry
          Reveal_Queue_Priority_Write
          Reveal_Queue_Priority_Read
          Reveal_Priority_Min_Space
          Reveal_Ack_Write
          Reveal_Ack_Read
          Reveal_Outgoing_State
          Reveal_Aux
          Reveal_Min_Space
          Reveal_Drop_flag
          Reveal_Queue_Timeout
          Reveal_Heartbeat_Timer
          Reveal_Heartbeat_Counter
          Reveal_1s
          Reveal_Node_Status
          Reveal_Blocked_Messages_Remaining_Time
          Reveal_Heartbeat_Node_Counter
          Reveal_Blocked_Messages
       1  Reveal_Queue_Priority_Retry
       2  Reveal_Queue_Priority_Timeout
      32  Reveal__AddDataS16
      30  Reveal__AddDataU16
      38  Reveal__AddDataU32
      26  Reveal__AddDataU8
      50  Reveal__AddDataU8Buffer
      30  Reveal__GetFreePriorityQueueSpace
      30  Reveal__GetFreeQueueSpace
      10  Reveal__GetMinimumPriorityQueueSpace
      10  Reveal__GetMinimumQueueSpace
      10  Reveal__GetNodestatus
      28  Reveal__GetNumMessagesPriorityQueue
      28  Reveal__GetNumMessagesQueue
      52  Reveal__Handler
     278  Reveal__Handler1ms
     300  Reveal__Initialize
     206  Reveal__NewCommand
     198  Reveal__NewFeedback
     134  Reveal__PriorityNewCommand
     126  Reveal__PriorityNewFeedback
     222  Reveal__QueueCommand
     398  Reveal__QueueMessageNoData
     406  Reveal__QueueMessageS16
     408  Reveal__QueueMessageU16
     408  Reveal__QueueMessageU32
     418  Reveal__QueueMessageU8
     202  Reveal__SetNodeHeartBeat

 
 1 667 bytes in section .bss
 7 316 bytes in section .text
 
 7 316 bytes of CODE memory
 1 667 bytes of DATA memory

Errors: none
Warnings: 2
