###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        13/Mar/2025  15:31:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  XCategory\Common\SRClockMonitor\SRClockMonitor.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        SRClockMonitor.obj -l ..\listings\SRClockMonitor.lst
#        XCategory\Common\SRClockMonitor\SRClockMonitor.c
#    List file    =  ..\listings\SRClockMonitor.lst
#    Object file  =  SRClockMonitor.obj
#
###############################################################################

C:\Data\Repository\WindyStrip_DTC_Orca\source\XCategory\Common\SRClockMonitor\SRClockMonitor.c
      1          /**
      2           *  @file
      3           *
      4           *  @defgroup CLASS_B
      5           *
      6           *  @brief      This module compares an internal clock source given by the 250us timer interrupt with an external clock of source.
      7           *
      8           *  @details    This module generates exceptions in case of the clocks get disaligned
      9           *
     10           *  $Header: SRClockMonitor.c 1.10 2012/06/18 18:04:25EDT MANOEL GARBUIO DE SOUZA (SOUZAMG) Exp  $
     11           *
     12           *  @copyright  Copyright 2010-$Date: 2012/06/18 18:04:25EDT $. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
     13           */
     14          
     15          //-------------------------------------- Include Files ----------------------------------------------------------------
     16          #include "SRSystemConfig.h"
     17          #include "SRClockMonitor.h"
     18          #include "SRClockMonitor_prv.h"
     19          #include "Micro.h"
     20          #include "SRException.h"
     21          #include "SRData.h"
     22          //-------------------------------------- PUBLIC (Variables) -----------------------------------------------------------
     23          
     24          #ifndef SRCLOCKMONITOR_FEATURE
     25              #define SRCLOCKMONITOR_FEATURE      ENABLED
     26          #endif
     27          
     28          
     29          //-------------------------------------- PRIVATE (Variables, Constants & Defines) -------------------------------------
     30          
     31          
     32          #if (SRCLOCKMONITOR_FEATURE == ENABLED)

   \                                 In section .bss, align 2
     33              static uint16 SRClockMonitor_Counter;
     34              static uint8 SRClock_First_Reading;
   \                     SRClock_First_Reading:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \   00000004                      DS8 1
   \   00000005                      DS8 1
   \   00000006                      DS8 2
     35              static uint8 SRClockMonitor_ErrorCount;
     36              static uint16 N_SRClockMonitor_Counter;
     37              static uint8 N_SRClock_First_Reading;
     38              static uint8 N_SRClockMonitor_ErrorCount;
     39          
     40              #ifndef SRCLOCKMONITOR_MAX_ERROR_OCCURENCE
     41                  #define SRCLOCKMONITOR_MAX_ERROR_OCCURENCE          4
     42              #endif
     43          
     44              #ifndef SRCLOCKMONITOR_INITIAL_DISREGARDED_READINGS
     45                  #define SRCLOCKMONITOR_INITIAL_DISREGARDED_READINGS 4
     46              #endif
     47          
     48          #endif
     49          
     50          
     51          //-------------------------------------- PRIVATE (Function Prototypes) ------------------------------------------------
     52          
     53          
     54          //=====================================================================================================================
     55          //-------------------------------------- Public Functions -------------------------------------------------------------
     56          //=====================================================================================================================
     57          
     58          //---------------------------------------------------------------------------------------------------------------------
     59          /**
     60           *  @brief      It Initializes the module SRClockMonitor and its variables
     61           *
     62           */

   \                                 In section .text, align 2, keep-with-next
     63          void SRClockMonitor__Initialize(void)
     64          {
   \                     SRClockMonitor__Initialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     65          
     66          #if (SRCLOCKMONITOR_FEATURE == ENABLED)
     67              SRCLOCKMONITOR_INIT_FLOW();
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       SRFlow__InitLogEvent
     68              SRData__UpdateShort(&SRClockMonitor_Counter,&N_SRClockMonitor_Counter,0);
   \   00000008   0x....             LDR.N    R4,??DataTable2
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x1DA1             ADDS     R1,R4,#+6
   \   0000000E   0x1CA0             ADDS     R0,R4,#+2
   \   00000010   0x.... 0x....      BL       SRData__UpdateShort
     69              SRData__UpdateByte(&SRClock_First_Reading,&N_SRClock_First_Reading,0);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x1D21             ADDS     R1,R4,#+4
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       SRData__UpdateByte
     70              SRData__UpdateByte(&SRClockMonitor_ErrorCount,&N_SRClockMonitor_ErrorCount,0);
   \   0000001E   0x1D61             ADDS     R1,R4,#+5
   \   00000020   0x1C60             ADDS     R0,R4,#+1
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x.... 0x....      B.W      SRData__UpdateByte
     71          #endif
     72          }
     73          
     74          //---------------------------------------------------------------------------------------------------------------------
     75          /**
     76           * @brief Monitor 250us
     77           *  This method is responsible by the TimerInterrupot clock monitoring.
     78           *  It counts ticks based on timerInterruption for the MonitorExtclk compare with the external clock source.
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void SRClockMonitor__Monitor1ms(void)
     81          {
   \                     SRClockMonitor__Monitor1ms: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     82          
     83          #if (SRCLOCKMONITOR_FEATURE == ENABLED)
     84              SRCLOCKMONITOR_1MS_FLOW();
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       SRFlow__ISRLogEvent
     85              if (SRData__CheckShort(&SRClockMonitor_Counter,&N_SRClockMonitor_Counter) == SRDATA_OK)
   \   0000000A   0x....             LDR.N    R4,??DataTable2
   \   0000000C   0x1DA1             ADDS     R1,R4,#+6
   \   0000000E   0x1CA0             ADDS     R0,R4,#+2
   \   00000010   0x.... 0x....      BL       SRData__CheckShort
   \   00000014   0xB9C8             CBNZ.N   R0,??SRClockMonitor__Monitor1ms_0
     86              {
     87                  if (SRClockMonitor_Counter < 0xFFFF)
   \   00000016   0x8860             LDRH     R0,[R4, #+2]
   \   00000018   0xF64F 0x75FF      MOVW     R5,#+65535
   \   0000001C   0x42A8             CMP      R0,R5
   \   0000001E   0xD014             BEQ.N    ??SRClockMonitor__Monitor1ms_0
     88                  {
     89                      SRData__UpdateShort(&SRClockMonitor_Counter,&N_SRClockMonitor_Counter,SRClockMonitor_Counter+1);
   \   00000020   0x1C42             ADDS     R2,R0,#+1
   \   00000022   0xB292             UXTH     R2,R2
   \   00000024   0x1DA1             ADDS     R1,R4,#+6
   \   00000026   0x1CA0             ADDS     R0,R4,#+2
   \   00000028   0x.... 0x....      BL       SRData__UpdateShort
     90                      if (SRClockMonitor_Counter >= SRCLOCK_MAX_ABSOLUT_COUNTER)
   \   0000002C   0x8861             LDRH     R1,[R4, #+2]
   \   0000002E   0x42A9             CMP      R1,R5
   \   00000030   0xD10B             BNE.N    ??SRClockMonitor__Monitor1ms_0
     91                      {
     92                          SRException__Queue(SREXCEPTION_SRCLOCK_OVERRUN,(uint32)SRClockMonitor_Counter,0);
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2019             MOVS     R0,#+25
   \   00000036   0x.... 0x....      BL       SRException__Queue
     93                          SRData__UpdateShort(&SRClockMonitor_Counter,&N_SRClockMonitor_Counter,0);
   \   0000003A   0x1DA1             ADDS     R1,R4,#+6
   \   0000003C   0x1CA0             ADDS     R0,R4,#+2
   \   0000003E   0xB001             ADD      SP,SP,#+4
   \   00000040   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x.... 0x....      B.W      SRData__UpdateShort
     94                      }
     95                  }
     96              }
     97          #endif
     98          }
   \                     ??SRClockMonitor__Monitor1ms_0: (+1)
   \   0000004A   0xB001             ADD      SP,SP,#+4
   \   0000004C   0xBD30             POP      {R4,R5,PC}       ;; return
     99          
    100          //---------------------------------------------------------------------------------------------------------------------
    101          /**
    102           * @brief This method is responsible to check the internal clock by comparing the ticks counted by the Monitor250us
    103           * with the ext_ticks from the external source of clock.
    104           * @param ext_ticks numer of ticks expected to happen in the 250us interrupt since the last call of this method.
    105           */

   \                                 In section .text, align 2, keep-with-next
    106          void SRClockMonitor__MonitorExtClk(uint16 ext_ticks)
    107          {
   \                     SRClockMonitor__MonitorExtClk: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4605             MOV      R5,R0
    108          #if (SRCLOCKMONITOR_FEATURE == ENABLED)
    109              uint16 max;
    110              uint16 min;
    111          
    112          
    113              SRCLOCKMONITOR_EXT_FLOW();
    114              if (SRData__CheckByte(&SRClock_First_Reading,&N_SRClock_First_Reading) != SRDATA_OK)
   \   00000004   0x....             LDR.N    R4,??DataTable2
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x1D21             ADDS     R1,R4,#+4
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       SRData__CheckByte
   \   00000010   0xB120             CBZ.N    R0,??SRClockMonitor__MonitorExtClk_0
    115              {
    116                  SRData__UpdateByte(&SRClock_First_Reading,&N_SRClock_First_Reading,0);
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x1D21             ADDS     R1,R4,#+4
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       SRData__UpdateByte
    117              }
    118          
    119              //To avoid the lack of precision in the first interaction it ignores the first interactions,
    120              //after that we do expect the system to be in sync
    121              if (SRClock_First_Reading < SRCLOCKMONITOR_INITIAL_DISREGARDED_READINGS )
   \                     ??SRClockMonitor__MonitorExtClk_0: (+1)
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2804             CMP      R0,#+4
   \   00000020   0xDA04             BGE.N    ??SRClockMonitor__MonitorExtClk_1
    122              {
    123                  SRData__UpdateByte(&SRClock_First_Reading,&N_SRClock_First_Reading,SRClock_First_Reading+1);
   \   00000022   0x1C42             ADDS     R2,R0,#+1
   \   00000024   0xB2D2             UXTB     R2,R2
   \   00000026   0x1D21             ADDS     R1,R4,#+4
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0xE030             B.N      ??SRClockMonitor__MonitorExtClk_2
    124              }
    125              else
    126              {
    127                  if ((SRData__CheckShort(&SRClockMonitor_Counter,&N_SRClockMonitor_Counter) == SRDATA_OK) &&
    128                      (SRData__CheckByte(&SRClockMonitor_ErrorCount,&N_SRClockMonitor_ErrorCount) == SRDATA_OK))
   \                     ??SRClockMonitor__MonitorExtClk_1: (+1)
   \   0000002C   0x1DA1             ADDS     R1,R4,#+6
   \   0000002E   0x1CA0             ADDS     R0,R4,#+2
   \   00000030   0x.... 0x....      BL       SRData__CheckShort
   \   00000034   0xBB68             CBNZ.N   R0,??SRClockMonitor__MonitorExtClk_3
   \   00000036   0x1D61             ADDS     R1,R4,#+5
   \   00000038   0x1C60             ADDS     R0,R4,#+1
   \   0000003A   0x.... 0x....      BL       SRData__CheckByte
   \   0000003E   0xBB40             CBNZ.N   R0,??SRClockMonitor__MonitorExtClk_3
    129                  {
    130                      max = 0xFFFF;
    131                      if ((0xFFFF - SRCLOCKMONITOR_CLK_TICKS_ABOVE) > ext_ticks)
   \   00000040   0xF64F 0x72B9      MOVW     R2,#+65465
   \   00000044   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000048   0x4295             CMP      R5,R2
   \   0000004A   0xBFB8             IT       LT 
    132                      {
    133                          max = ext_ticks + SRCLOCKMONITOR_CLK_TICKS_ABOVE;
   \   0000004C   0xF105 0x0046      ADDLT    R0,R5,#+70
    134                      }
    135                      min = 0;
   \   00000050   0x2200             MOVS     R2,#+0
    136                      if (ext_ticks > SRCLOCKMONITOR_CLK_TICKS_BELOW)
   \   00000052   0x2D47             CMP      R5,#+71
   \   00000054   0xBFA8             IT       GE 
    137                      {
    138                          min = ext_ticks -  SRCLOCKMONITOR_CLK_TICKS_BELOW;
   \   00000056   0xF1A5 0x0246      SUBGE    R2,R5,#+70
    139                      }
    140          
    141                      if ((SRClockMonitor_Counter < min ) ||
    142                          (SRClockMonitor_Counter > max))
   \   0000005A   0x8861             LDRH     R1,[R4, #+2]
   \   0000005C   0xB292             UXTH     R2,R2
   \   0000005E   0x4291             CMP      R1,R2
   \   00000060   0xBF24             ITT      CS 
   \   00000062   0xB280             UXTHCS   R0,R0
   \   00000064   0x4288             CMPCS    R0,R1
   \   00000066   0xD20F             BCS.N    ??SRClockMonitor__MonitorExtClk_4
    143                      {
    144          
    145                          SRData__UpdateByte(&SRClockMonitor_ErrorCount,&N_SRClockMonitor_ErrorCount,SRClockMonitor_ErrorCount+1);
   \   00000068   0x7860             LDRB     R0,[R4, #+1]
   \   0000006A   0x1C42             ADDS     R2,R0,#+1
   \   0000006C   0xB2D2             UXTB     R2,R2
   \   0000006E   0x1D61             ADDS     R1,R4,#+5
   \   00000070   0x1C60             ADDS     R0,R4,#+1
   \   00000072   0x.... 0x....      BL       SRData__UpdateByte
    146                          if (SRClockMonitor_ErrorCount >= SRCLOCKMONITOR_MAX_ERROR_OCCURENCE)
   \   00000076   0x7860             LDRB     R0,[R4, #+1]
   \   00000078   0x2804             CMP      R0,#+4
   \   0000007A   0xDB0A             BLT.N    ??SRClockMonitor__MonitorExtClk_3
    147                          {
    148                              // Out of Range
    149                              SRException__Queue(SREXCEPTION_SRCLOCK_TEST,(uint32)SRClockMonitor_Counter,(uint32)ext_ticks);
   \   0000007C   0x8861             LDRH     R1,[R4, #+2]
   \   0000007E   0x462A             MOV      R2,R5
   \   00000080   0x2018             MOVS     R0,#+24
   \   00000082   0x.... 0x....      BL       SRException__Queue
   \   00000086   0xE004             B.N      ??SRClockMonitor__MonitorExtClk_3
    150                          }
    151          
    152                      }
    153                      else
    154                      {
    155                          SRData__UpdateByte(&SRClockMonitor_ErrorCount,&N_SRClockMonitor_ErrorCount,0);
   \                     ??SRClockMonitor__MonitorExtClk_4: (+1)
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x1D61             ADDS     R1,R4,#+5
   \   0000008C   0x1C60             ADDS     R0,R4,#+1
   \                     ??SRClockMonitor__MonitorExtClk_2: (+1)
   \   0000008E   0x.... 0x....      BL       SRData__UpdateByte
    156                      }
    157          
    158                  }
    159              }
    160              SRData__UpdateShort(&SRClockMonitor_Counter,&N_SRClockMonitor_Counter,0);
   \                     ??SRClockMonitor__MonitorExtClk_3: (+1)
   \   00000092   0x1DA1             ADDS     R1,R4,#+6
   \   00000094   0x1CA0             ADDS     R0,R4,#+2
   \   00000096   0xB001             ADD      SP,SP,#+4
   \   00000098   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000009C   0x2200             MOVS     R2,#+0
   \   0000009E   0x.... 0x....      B.W      SRData__UpdateShort
    161          #endif
    162          
    163          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     SRClock_First_Reading
    164          
    165          //=====================================================================================================================
    166          //-------------------------------------- Private Functions ------------------------------------------------------------
    167          //=====================================================================================================================
    168          
    169          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SRClockMonitor__Initialize
         0   -> SRData__UpdateByte
         8   -> SRData__UpdateByte
         8   -> SRData__UpdateShort
         8   -> SRFlow__InitLogEvent
      16   SRClockMonitor__Monitor1ms
        16   -> SRData__CheckShort
         0   -> SRData__UpdateShort
        16   -> SRData__UpdateShort
        16   -> SRException__Queue
        16   -> SRFlow__ISRLogEvent
      16   SRClockMonitor__MonitorExtClk
        16   -> SRData__CheckByte
        16   -> SRData__CheckShort
        16   -> SRData__UpdateByte
         0   -> SRData__UpdateShort
        16   -> SRException__Queue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
      44  SRClockMonitor__Initialize
      78  SRClockMonitor__Monitor1ms
     162  SRClockMonitor__MonitorExtClk
       8  SRClock_First_Reading
          SRClockMonitor_ErrorCount
          SRClockMonitor_Counter
          N_SRClock_First_Reading
          N_SRClockMonitor_ErrorCount
          N_SRClockMonitor_Counter

 
   8 bytes in section .bss
 288 bytes in section .text
 
 288 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
