###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        19/Nov/2024  13:15:30
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  Category\Common\BoardDebugging\BoardDebugging.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        BoardDebugging.obj -l ..\listings\BoardDebugging.lst
#        Category\Common\BoardDebugging\BoardDebugging.c
#    List file    =  ..\listings\BoardDebugging.lst
#    Object file  =  BoardDebugging.obj
#
###############################################################################

C:\Data\Python\Windy_sBpm_Floating\source\Category\Common\BoardDebugging\BoardDebugging.c
      1          /**
      2           *  @file       BoardDebugging.c
      3           *
      4           *  @brief      Debugging features
      5           *
      6           *  @details
      7           *
      8           *  @section
      9           *
     10           *  @copyright  Copyright 2013-$Date: 2016/01/11 12:30:13CET $. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
     11           */
     12          //---------------------------------------------------------------------------------------------------------------------
     13          //---------------------------------------------------------------------------------------------------------------------
     14          
     15          //-------------------------------------- Include Files ----------------------------------------------------------------
     16          
     17          #include "BoardDebugging.h"
     18          #include "BoardDebugging_prv.h"
     19          #include "mci.h"
     20          #include "SpeedRefGen.h"
     21          
     22          #ifndef BD_RESET
     23              #define BD_RESET                 DISABLED
     24          #endif
     25          
     26          #ifndef BD_MCI_CMD
     27              #define BD_MCI_CMD               DISABLED
     28          #endif
     29          
     30          #ifndef BD_ADC_NOISE_ASSESSMENT
     31              #define BD_ADC_NOISE_ASSESSMENT  DISABLED
     32          #endif
     33          
     34          #ifndef BD_PWM_ACCESS
     35              #define BD_PWM_ACCESS            DISABLED
     36          #endif
     37          
     38          #ifndef BD_ADC_SYNCH_ADJUST
     39              #define BD_ADC_SYNCH_ADJUST      DISABLED
     40          #endif
     41          
     42          #ifndef DEBUG_MASTERCOMMANDER
     43              #define DEBUG_MASTERCOMMANDER    DISABLED
     44          #endif
     45          
     46          #ifndef BD_LED
     47              #define BD_LED                   DISABLED
     48          #endif
     49          
     50          #ifndef BD_INTERRUPT_ANALYSIS
     51              #define BD_INTERRUPT_ANALYSIS    DISABLED
     52          #endif
     53          
     54          #if (BD_LED == ENABLED)
     55              #define LED_INIT_COUNTER         (uint16)(LED_INIT_COUNTER_MS / 25)
     56              #define LED_TIMER                (uint16)(LED_TIMER_MS / 25)
     57          #endif
     58          //-------------------------------------- PRIVATE (Variables, Constants & Defines) -------------------------------------
     59          #if (DEBUG_MASTERCOMMANDER == ENABLED)
     60              #include "MasterCommander.h"
     61          #endif
     62          
     63          
     64          #if (BD_MCI_CMD == ENABLED)
     65              typedef enum
     66              {
     67                  SELECT_STOP,
     68                  SELECT_SPEED,
     69                  SELECT_MANUAL,
     70                  SELECT_PWM,
     71                  SELECT_DISABLED,
     72                  SELECT_PLTSPECIFIC,
     73              } SELECT_SPD_MANUAL_TYPE;
     74          

   \                                 In section .data, align 4
     75              static sint8 BD_Update_Cmd;
   \                     BD_Update_Cmd:
   \   00000000   0x00               DC8 0
     76          
     77              static SELECT_SPD_MANUAL_TYPE BD_Select_Method;
   \                     BD_Select_Method:
   \   00000001   0x00               DC8 0
     78          
     79              static MOTOR_ENUM_TYPE BD_Motor;
   \                     BD_Motor:
   \   00000002   0x00               DC8 0
     80          
     81              static sint16 BD_Target_Speed;
     82              static sint16 BD_Target_Accel;
     83              static sint16 BD_Target_Stop;
     84              static MCI_INJECTION_TYPE BD_Manual_Method;
   \                     BD_Manual_Method:
   \   00000003   0x00               DC8 0
     85              static sint32 BD_Level_x32;
     86              static sint32 BD_Level_Rate_x32;
     87              static sint32 BD_Param_x32;
     88              static sint32 BD_Param_Rate_x32;
     89          
     90              #ifdef BD_PLT_SPECIFIC
     91              static uint8 BD_Plt_Specific_Buffer_Size;
     92              static uint8 BD_Plt_Specific_Buffer[10];
     93              #endif
     94              #ifndef BD_CUSTOM_CMD
     95                  // define here macros for standard MCI commands
     96                  #define BD_RUN(motor_index, target_speed, target_accel)                                              Mci__Run(motor_index, target_speed, target_accel)
     97                  #define BD_MANUAL_INJ(motor_index, method, level_x32, level_rate_x32, param_x32, param_rate_x32)     Mci__Manual_Injection(motor_index, method, level_x32, level_rate_x32, param_x32, param_rate_x32)
     98                  #define BD_STOP(motor_index, target_stop)                                                            Mci__Stop(motor_index, target_stop)
     99                  // otherwise macros definition will be in prv file (for instance for Dishwasher application)
    100          
    101              #endif
    102          #endif
    103          
    104          #if (BD_RESET == ENABLED)
    105              #include "Micro.h"
    106              static uint8   BD_Reset = 255;  //  force reset from Board Debugging
   \                     BD_Reset:
   \   00000004   0xFF               DC8 255
    107          #endif
    108          
    109              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    110              ///////////////////////////////////////////// --- ADC NOISE ASSESMENT --/////////////////////////////////////////
    111          #if (BD_ADC_NOISE_ASSESSMENT == ENABLED)
    112              #include "MotorSafetyMgr.h"
    113              #include "MathCalc.h"
    114              #include "Mcl.h"
    115          
    116          // structure declaration
    117              typedef struct{
    118                  sint16 Signal_K_1;
    119                  sint16 Signal_K_2;
    120                  uint16 Noise_Cnt;
    121                  uint16 Noise_Ampl_Max;
    122              } NOISE_SIGNAL_TYPE;
    123          
    124              static NOISE_SIGNAL_TYPE Current_A;
    125              static NOISE_SIGNAL_TYPE Current_B;
    126              static NOISE_SIGNAL_TYPE Current_C;
    127              static NOISE_SIGNAL_TYPE DcBus;
    128          
    129              static uint16 Current_Noise_Thr;
    130              static uint16 DcBus_Noise_Thr;
    131              static uint16 Noise_Measure_Window;
    132              static uint16 Noise_Measure_Window_Cnt;
    133          
    134          #endif
    135              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    136              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    137          
    138          
    139              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    140              ///////////////////////////////////////////// --- PWM SIGNALS DEBUG ---//////////////////////////////////////////
    141          
    142          
    143          #if (BD_PWM_ACCESS == ENABLED)
    144              #include "MclBasicTypes.h"
    145              #include "MotorSafetyMgr.h"
    146              #include "Mcl.h"
    147              static uint8 Pwm_Turn_On_Flag;
    148              static ABC_COOR_SYST_TYPE Pwm_Duty_Hw_Dbg;
    149          
    150              extern MCI_CONTROL_STATE_TYPE Mci_Control_State;           //!< Define the states used in this controller
    151          
    152          #endif
    153          
    154          
    155          #if (BD_ADC_SYNCH_ADJUST == ENABLED)
    156              static uint8  Adc_Conv_Synch_Adjust;
    157              static volatile sint16 Adc_Conv_Synch_Value;
    158          #endif
    159          
    160          #if (BD_LED == ENABLED)
    161          	#include "Gpio.h"
    162              static BOOL_TYPE Is_Led_Blinking;
    163              static uint16 Led_Counter;
    164          #endif
    165          
    166          
    167          #if (BD_INTERRUPT_ANALYSIS == ENABLED)
    168              // CPU processing time and overload
    169              static volatile float32 BD_Fast_Isr_Ovl_Perc;
    170              static volatile uint16  BD_Fast_Isr_Max_us;
    171              static volatile uint16  BD_Fast_Isr_Duration_us;
    172              static volatile float32 BD_Pwm_Isr_Ovl_Perc;
    173              static volatile float32 BD_Pwm_Isr_Max_us;
    174              static volatile float32 BD_Pwm_Isr_Duration_us;
    175          #endif
    176          //-------------------------------------- PUBLIC (Variables) -----------------------------------------------------------
    177          
    178          
    179          
    180          
    181          //-------------------------------------- PRIVATE (Function Prototypes) ------------------------------------------------
    182          
    183          #if (BD_ADC_NOISE_ASSESSMENT == ENABLED)
    184          static void AdcNoiseInit();
    185          static void AdcNoiseHandler();
    186          static void AdcNoiseMeasure(sint16 signal, NOISE_SIGNAL_TYPE* noise_signal, uint16 noise_thr);
    187          #endif
    188          
    189          
    190          
    191          //=====================================================================================================================
    192          //-------------------------------------- Public Functions -------------------------------------------------------------
    193          //=====================================================================================================================
    194          
    195          float32 My_MC_TR;
    196          sint32 My_MC_Max_Spin_Speed;
    197          uint8  My_MC_Cycle;
   \                     My_MC_Cycle:
   \   00000005   0x00               DC8 0
    198          uint16 My_MC_Cycle_Counter;
    199          uint16 My_MC_Cycle_Counter_On;
    200          uint16 My_MC_Cycle_Counter_Off;
    201          uint8  My_MC_Cycle_Phase;
   \                     My_MC_Cycle_Phase:
   \   00000006   0x00               DC8 0
    202          uint32 My_MC_Cycle_Counter_Duration;
    203          uint16 My_MC_Cycle_Duration_Min;
    204          
    205          uint8 My_MC_Braking;
   \                     My_MC_Braking:
   \   00000007   0x00               DC8 0
    206          uint16 My_MC_Braking_Phase;
    207          uint16 My_MC_Braking_Runs;
    208          sint16 My_MC_Braking_Decel;
    209          uint16 My_MC_Braking_Runs_Total;
    210          uint32 My_MC_Braking_Counter;
    211          uint8 My_MC_Braking_Region;
   \                     My_MC_Braking_Region:
   \   00000008   0x00               DC8 0
    212          
    213          uint8 My_MC_Spin;
   \                     My_MC_Spin:
   \   00000009   0x00               DC8 0
    214          uint8 My_MC_Spin_Phase;
   \                     My_MC_Spin_Phase:
   \   0000000A   0x00               DC8 0
   \   0000000B   0x00               DC8 0
   \                     BD_Target_Stop:
   \   0000000C   0x00 0x00          DC8 0, 0
   \                     My_MC_Cycle_Counter:
   \   0000000E   0x00 0x00          DC8 0, 0
   \                     My_MC_Cycle_Counter_On:
   \   00000010   0x00 0x00          DC8 0, 0
   \                     My_MC_Cycle_Counter_Off:
   \   00000012   0x00 0x00          DC8 0, 0
   \                     My_MC_Cycle_Duration_Min:
   \   00000014   0x00 0x00          DC8 0, 0
   \                     My_MC_Braking_Phase:
   \   00000016   0x00 0x00          DC8 0, 0
   \                     My_MC_Braking_Runs:
   \   00000018   0x00 0x00          DC8 0, 0
   \                     My_MC_Braking_Runs_Total:
   \   0000001A   0x00 0x00          DC8 0, 0
   \                     BD_Target_Speed:
   \   0000001C   0x00 0x00          DC8 0, 0
   \                     BD_Target_Accel:
   \   0000001E   0x00 0x00          DC8 0, 0
   \                     My_MC_Braking_Decel:
   \   00000020   0x00 0x00          DC8 0, 0
    215          uint32 My_MC_Spin_Counter;
    216          sint16 My_MC_Spin_Decel_Stop;
   \                     My_MC_Spin_Decel_Stop:
   \   00000022   0x00 0x00          DC8 0, 0
   \                     BD_Level_x32:
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     BD_Level_Rate_x32:
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     BD_Param_x32:
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     BD_Param_Rate_x32:
   \   00000030   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     My_MC_TR:
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     My_MC_Max_Spin_Speed:
   \   00000038   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     My_MC_Cycle_Counter_Duration:
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     My_MC_Braking_Counter:
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     My_MC_Spin_Counter:
   \   00000044   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    217          float32 My_MC_Temp_Stop;
   \                     My_MC_Temp_Stop:
   \   00000048   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    218          
    219          sint32 Clear_Fault_Timer;
   \                     Clear_Fault_Timer:
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    220          
    221          #include "ThermalModel.h"
    222          
    223          //---------------------------------------------------------------------------------------------------------------------
    224          /**
    225           *  @brief      It Initializes the module BoardDebugging and its variables
    226           *
    227           *  @details    The selected debugging features are initialized
    228           *
    229           */

   \                                 In section .text, align 2, keep-with-next
    230          void BoardDebugging__Initialize(void)
    231          {
   \                     BoardDebugging__Initialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    232          
    233          #if (DEBUG_MASTERCOMMANDER == ENABLED)
    234              MasterCommander__Initialize();
   \   00000004   0x.... 0x....      BL       MasterCommander__Initialize
    235          #endif
    236          
    237          #if (BD_ADC_NOISE_ASSESSMENT == ENABLED)
    238              AdcNoiseInit();
    239          #endif
    240          
    241          #if (BD_RESET == ENABLED)
    242              BD_Reset = 255;
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   0000000C   0x21FF             MOVS     R1,#+255
   \   0000000E   0x7101             STRB     R1,[R0, #+4]
    243          #endif
    244          
    245          #if (BD_MCI_CMD == ENABLED)
    246          
    247              BD_Select_Method = SELECT_SPEED;
    248              BD_Update_Cmd = 0;
    249          
    250              BD_Motor = BD_MOTOR_INIT;
    251          
    252              BD_Target_Speed = BD_SPEED_INIT;
    253              BD_Target_Accel = BD_ACCEL_INIT;
    254              BD_Target_Stop  = BD_STOP_INIT;
    255          
    256              BD_Manual_Method  = BD_MANUAL_METHOD_INIT;
    257              BD_Level_x32      = (sint32)(BD_LEVEL_INIT      * 32.0f);
    258              BD_Level_Rate_x32 = (sint32)(BD_LEVEL_RATE_INIT * 32.0f);
    259              BD_Param_x32      = (sint32)(BD_PARAM_INIT      * 32.0f);
    260              BD_Param_Rate_x32 = (sint32)(BD_PARAM_RATE_INIT * 32.0f);
    261          
    262          #endif
    263          
    264          #if (BD_PWM_ACCESS == ENABLED)
    265              Pwm_Duty_Hw_Dbg.A = 16384;
    266              Pwm_Duty_Hw_Dbg.B = 16384;
    267              Pwm_Duty_Hw_Dbg.C = 16384;
    268          #endif
    269          
    270          #if (BD_LED == ENABLED)
    271              Is_Led_Blinking = FALSE;
    272              Led_Counter = LED_INIT_COUNTER;
    273              Gpio__PinConfig(LED_PORT,LED_PIN,OUTPUT_PUSHPULL);
    274              GPIO__PIN_SET(LED_PORT,LED_PIN);
    275          #endif
    276          
    277          
    278              My_MC_TR = BD_TR;
    279              My_MC_Max_Spin_Speed = BD_MAX_SPIN_SPEED;
    280          
    281          
    282              My_MC_Cycle = (uint8)FALSE;
    283              My_MC_Cycle_Counter = 1;
    284              My_MC_Cycle_Counter_On = 10; //Secs
    285              My_MC_Cycle_Counter_Off = 5; //Secs
    286              My_MC_Cycle_Phase = 0;
    287              My_MC_Cycle_Counter_Duration = (uint32)60*40*3600; //1hr
    288              My_MC_Cycle_Duration_Min = 60; //60 minutes
    289          
    290              My_MC_Braking = (uint8)FALSE;
    291              My_MC_Braking_Phase = 0;
    292              My_MC_Braking_Runs = 0;
    293              My_MC_Braking_Decel = 20*15; //20 rpms/s
    294              My_MC_Braking_Runs_Total = 20;
   \   00000010   0x2214             MOVS     R2,#+20
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x7041             STRB     R1,[R0, #+1]
   \   00000016   0x8342             STRH     R2,[R0, #+26]
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   \   0000001C   0x7081             STRB     R1,[R0, #+2]
    295              My_MC_Braking_Counter = 0;
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0xF240 0x2146      MOVW     R1,#+582
   \   00000024   0x8381             STRH     R1,[R0, #+28]
   \   00000026   0x6402             STR      R2,[R0, #+64]
   \   00000028   0xF240 0x1197      MOVW     R1,#+407
   \   0000002C   0x83C1             STRH     R1,[R0, #+30]
    296              My_MC_Braking_Region = 1;
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xF242 0x7110      MOVW     R1,#+10000
   \   00000034   0x8181             STRH     R1,[R0, #+12]
   \   00000036   0x7202             STRB     R2,[R0, #+8]
   \   00000038   0x2103             MOVS     R1,#+3
   \   0000003A   0x70C1             STRB     R1,[R0, #+3]
    297          
    298              My_MC_Spin = (uint8)FALSE;
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2120             MOVS     R1,#+32
   \   00000040   0x6241             STR      R1,[R0, #+36]
   \   00000042   0x6281             STR      R1,[R0, #+40]
   \   00000044   0x62C1             STR      R1,[R0, #+44]
   \   00000046   0x6301             STR      R1,[R0, #+48]
   \   00000048   0x7242             STRB     R2,[R0, #+9]
    299              My_MC_Spin_Phase = 0;
   \   0000004A   0x7282             STRB     R2,[R0, #+10]
    300              My_MC_Spin_Counter = 0;
   \   0000004C   0x6442             STR      R2,[R0, #+68]
    301              My_MC_Spin_Decel_Stop = 20*15;
    302          
    303              Clear_Fault_Timer = 3*40; //3 secs.
    304          
    305              My_MC_Temp_Stop = 180.0f;
    306          }
   \   0000004E   0xB001             ADD      SP,SP,#+4
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable1_6  ;; 0x413a3d71
   \   00000054   0x6341             STR      R1,[R0, #+52]
   \   00000056   0xF44F 0x61C8      MOV      R1,#+1600
   \   0000005A   0x6381             STR      R1,[R0, #+56]
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x7141             STRB     R1,[R0, #+5]
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x81C1             STRH     R1,[R0, #+14]
   \   00000064   0x210A             MOVS     R1,#+10
   \   00000066   0x8201             STRH     R1,[R0, #+16]
   \   00000068   0x2105             MOVS     R1,#+5
   \   0000006A   0x8241             STRH     R1,[R0, #+18]
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0x7181             STRB     R1,[R0, #+6]
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable1_7  ;; 0x83d600
   \   00000074   0x63C1             STR      R1,[R0, #+60]
   \   00000076   0x213C             MOVS     R1,#+60
   \   00000078   0x8281             STRH     R1,[R0, #+20]
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x71C1             STRB     R1,[R0, #+7]
   \   0000007E   0x82C1             STRH     R1,[R0, #+22]
   \   00000080   0x8301             STRH     R1,[R0, #+24]
   \   00000082   0xF44F 0x7196      MOV      R1,#+300
   \   00000086   0x8401             STRH     R1,[R0, #+32]
   \   00000088   0x8441             STRH     R1,[R0, #+34]
   \   0000008A   0x2178             MOVS     R1,#+120
   \   0000008C   0x64C1             STR      R1,[R0, #+76]
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable1_8  ;; 0x43340000
   \   00000092   0x6481             STR      R1,[R0, #+72]
   \   00000094   0xBD00             POP      {PC}             ;; return
    307          
    308          
    309          //---------------------------------------------------------------------------------------------------------------------
    310          /**
    311           *  @brief      Pwm handler for MasterCommander. Rate: every 62.5 us
    312           *
    313           */
    314          
    315          

   \                                 In section .text, align 2, keep-with-next
    316          void BoardDebugging__PwmHandler(void)
    317          {
    318          #if (BD_ADC_NOISE_ASSESSMENT == ENABLED)
    319              // Adc noise calculation
    320              // make sure this is executed after offset calculation
    321              if (MotorSafetyMgr__IsInIdle() || (Mci__GetAnalog(MOTOR0, MCI_AI_INTERNAL_MCI_STATE) >= 3)) // >= MCI_IDLE
    322              {
    323                  AdcNoiseHandler();
    324              }
    325          #endif
    326          
    327          
    328          #if (BD_PWM_ACCESS == ENABLED)
    329              if(Pwm_Turn_On_Flag && (MotorSafetyMgr__DoesClassAHaveAccessToPwm() == TRUE))
    330              {
    331                  if (BD_Update_Cmd != 0)
    332                  {
    333                      // Apply the PWM
    334                      MotorSafetyMgr__UpdatePwm(Pwm_Duty_Hw_Dbg.A, Pwm_Duty_Hw_Dbg.B, Pwm_Duty_Hw_Dbg.C);
    335          
    336                      BD_Update_Cmd = 0;
    337                  }
    338              }
    339          #endif
    340          
    341          
    342          #if (BD_ADC_SYNCH_ADJUST == ENABLED)
    343              if (Adc_Conv_Synch_Adjust != 0)
    344              {
    345                  SRMCAtod__SetSyncDelay(Adc_Conv_Synch_Value);
    346                  Adc_Conv_Synch_Adjust  = 0;
    347              }
    348          #endif
    349          
    350          #if (DEBUG_MASTERCOMMANDER == ENABLED)
    351              MasterCommander__PwmHandler();
   \                     BoardDebugging__PwmHandler: (+1)
   \   00000000   0x.... 0x....      B.W      MasterCommander__PwmHandler
    352          #endif
    353          }
    354          
    355          //---------------------------------------------------------------------------------------------------------------------
    356          /**
    357           *  @brief      Board Debugging handler for 250 us
    358           *
    359           */

   \                                 In section .text, align 2, keep-with-next
    360          void BoardDebugging__250usHandler(void)
    361          {
    362          #if (DEBUG_MASTERCOMMANDER == ENABLED)
    363              MasterCommander__FastHandler();
   \                     BoardDebugging__250usHandler: (+1)
   \   00000000   0x.... 0x....      B.W      MasterCommander__FastHandler
    364          #endif
    365          }
    366          
    367          
    368          //---------------------------------------------------------------------------------------------------------------------
    369          /**
    370           *  @brief      Board Debugging handler for 25 ms
    371           *
    372           */
    373          #pragma optimize = none

   \                                 In section .text, align 4, keep-with-next
    374          void BoardDebugging__25msHandler(void)
    375          {
   \                     BoardDebugging__25msHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
    376          #if (BD_RESET == ENABLED)
    377              if (BD_Reset != 255)
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable1_9
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x28FF             CMP      R0,#+255
   \   00000010   0xD004             BEQ.N    ??BoardDebugging__25msHandler_0
    378              {
    379                  Micro__ForceReset((MICRO_RESET_MODE_TYPE)BD_Reset);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable1_9
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       Micro__ForceReset
    380              }
    381          #endif
    382          
    383          #if (BD_PWM_ACCESS == ENABLED)
    384              if ((BD_Select_Method == SELECT_PWM) && (BD_Update_Cmd != 0))
    385              {
    386                  if (Pwm_Turn_On_Flag == 0)
    387                  {
    388                      Pwm_Turn_On_Flag = 1;
    389                      MotorSafetyMgr__Prepare2StartMotor();
    390                      // put MCI in debug state
    391                      Mci_Control_State = MCI_DEBUGGING;
    392                      Mcl__SetDigital(MCL_WRITE_INJECTION_DC_VOLTAGE);
    393                  }
    394              }
    395              if((BD_Select_Method == SELECT_STOP) && Pwm_Turn_On_Flag == 1)
    396              {
    397                  Pwm_Turn_On_Flag = 0;
    398                  MotorSafetyMgr__Prepare2StopMotor();
    399                  BD_Select_Method = SELECT_DISABLED;
    400                  Mci_Control_State = MCI_IDLE;
    401              }
    402          #endif
    403          
    404          #if (BD_MCI_CMD == ENABLED)
    405              if((BD_Select_Method == SELECT_SPEED) && (BD_Update_Cmd != 0))
   \                     ??BoardDebugging__25msHandler_0: (+1)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable1_10
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD129             BNE.N    ??BoardDebugging__25msHandler_1
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   0000002A   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD023             BEQ.N    ??BoardDebugging__25msHandler_1
    406              {
    407                  if(BD_Target_Speed != 0)
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable1_11
   \   00000036   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD010             BEQ.N    ??BoardDebugging__25msHandler_2
    408                  {
    409                      BD_Update_Cmd = BD_RUN(BD_Motor, BD_Target_Speed, BD_Target_Accel);
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable1_12
   \   00000042   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable1_11
   \   0000004A   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x.... 0x....      BL       Mci__Run
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
   \   0000005E   0xE051             B.N      ??BoardDebugging__25msHandler_3
    410                  }
    411                  else
    412                  {
    413                      BD_Update_Cmd = BD_STOP(BD_Motor, BD_Target_Accel);
   \                     ??BoardDebugging__25msHandler_2: (+1)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable1_12
   \   00000064   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x.... 0x....      BL       Mci__Stop
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \   00000076   0x7008             STRB     R0,[R1, #+0]
   \   00000078   0xE044             B.N      ??BoardDebugging__25msHandler_3
    414                  }
    415              }
    416              else if((BD_Select_Method == SELECT_MANUAL) && (BD_Update_Cmd != 0))
   \                     ??BoardDebugging__25msHandler_1: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable1_10
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x2802             CMP      R0,#+2
   \   00000082   0xD11F             BNE.N    ??BoardDebugging__25msHandler_4
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   00000088   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD019             BEQ.N    ??BoardDebugging__25msHandler_4
    417              {
    418                  BD_Update_Cmd = BD_MANUAL_INJ(BD_Motor, BD_Manual_Method, BD_Level_x32, BD_Level_Rate_x32, BD_Param_x32, BD_Param_Rate_x32);
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable1_14
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable1_15
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable1_16
   \   000000A4   0x6803             LDR      R3,[R0, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable1_17
   \   000000AA   0x6802             LDR      R2,[R0, #+0]
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable1_18
   \   000000B0   0x7801             LDRB     R1,[R0, #+0]
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x.... 0x....      BL       Mci__Manual_Injection
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
   \   000000C2   0xE01F             B.N      ??BoardDebugging__25msHandler_3
    419              }
    420              else if(BD_Select_Method == SELECT_STOP)
   \                     ??BoardDebugging__25msHandler_4: (+1)
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable1_10
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD10D             BNE.N    ??BoardDebugging__25msHandler_5
    421              {
    422                  BD_STOP(BD_Motor, BD_Target_Stop);
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   000000D2   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x.... 0x....      BL       Mci__Stop
    423                  BD_Select_Method = SELECT_DISABLED;
   \   000000E0   0x2004             MOVS     R0,#+4
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \   000000E6   0x7008             STRB     R0,[R1, #+0]
   \   000000E8   0xE00C             B.N      ??BoardDebugging__25msHandler_3
    424              }
    425              else if(BD_Select_Method == SELECT_DISABLED)
   \                     ??BoardDebugging__25msHandler_5: (+1)
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable1_10
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0x2804             CMP      R0,#+4
   \   000000F2   0xD107             BNE.N    ??BoardDebugging__25msHandler_3
    426              {
    427                  BD_Update_Cmd = 0;
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \   000000FA   0x7008             STRB     R0,[R1, #+0]
    428                  BD_Select_Method = SELECT_SPEED;
   \   000000FC   0x2001             MOVS     R0,#+1
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \   00000102   0x7008             STRB     R0,[R1, #+0]
    429              }
    430          #ifdef BD_PLT_SPECIFIC
    431              else if ((BD_Select_Method == SELECT_PLTSPECIFIC) && (BD_Update_Cmd != 0))
    432              {
    433                  BD_Update_Cmd = 0;
    434                  BD_PLT_SPECIFIC(BD_Motor, BD_Plt_Specific_Buffer);
    435              }
    436          #endif
    437          
    438              if (BD_Update_Cmd > 0)
   \                     ??BoardDebugging__25msHandler_3: (+1)
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   00000108   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000010C   0x2801             CMP      R0,#+1
   \   0000010E   0xDB03             BLT.N    ??BoardDebugging__25msHandler_6
    439              {
    440                  BD_Update_Cmd = 0;
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \   00000116   0x7008             STRB     R0,[R1, #+0]
    441              }
    442          #endif
    443          
    444          
    445          #if (BD_ADC_NOISE_ASSESSMENT == ENABLED)
    446              Noise_Measure_Window_Cnt++;
    447              if(Noise_Measure_Window_Cnt == Noise_Measure_Window)
    448              {
    449                  Noise_Measure_Window_Cnt = 0;
    450                  Current_A.Noise_Cnt = 0;
    451                  Current_B.Noise_Cnt = 0;
    452                  Current_C.Noise_Cnt = 0;
    453                  DcBus.Noise_Cnt     = 0;
    454              }
    455          #endif
    456          
    457          #if (BD_LED == ENABLED)
    458              if(Is_Led_Blinking == FALSE)
    459              {
    460                  GPIO__PIN_SET(LED_PORT,LED_PIN);
    461                  Led_Counter--;
    462                  if(!Led_Counter)
    463                  {
    464                      Led_Counter = LED_TIMER;
    465                      Is_Led_Blinking = TRUE;
    466                  }
    467              }
    468              else
    469              {
    470                  Led_Counter--;
    471                  if(!Led_Counter)
    472                  {
    473                      GPIO__PIN_TOGGLE(LED_PORT,LED_PIN);
    474                      Led_Counter = LED_TIMER;
    475                      Is_Led_Blinking = TRUE;
    476                  }
    477              }
    478          #endif
    479          
    480              uint8 temp;
    481          
    482              temp = My_MC_Cycle + My_MC_Braking + My_MC_Spin;
   \                     ??BoardDebugging__25msHandler_6: (+1)
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable1_20
   \   0000011C   0x7800             LDRB     R0,[R0, #+0]
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable1_21
   \   00000122   0x7809             LDRB     R1,[R1, #+0]
   \   00000124   0x1808             ADDS     R0,R1,R0
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable1_22
   \   0000012A   0x7809             LDRB     R1,[R1, #+0]
   \   0000012C   0x1808             ADDS     R0,R1,R0
   \   0000012E   0x0004             MOVS     R4,R0
    483          
    484              if(temp > 1) //Sanity check. Disable cycles if more than one is active.
   \   00000130   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000132   0x2C02             CMP      R4,#+2
   \   00000134   0xDB12             BLT.N    ??BoardDebugging__25msHandler_7
    485              {
    486              	BD_STOP(BD_Motor, 10000);
   \   00000136   0xF242 0x7110      MOVW     R1,#+10000
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   0000013E   0x7800             LDRB     R0,[R0, #+0]
   \   00000140   0x.... 0x....      BL       Mci__Stop
    487              	My_MC_Cycle = (uint8)FALSE;
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable1_20
   \   0000014A   0x7008             STRB     R0,[R1, #+0]
    488              	My_MC_Braking = (uint8)FALSE;
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable1_21
   \   00000152   0x7008             STRB     R0,[R1, #+0]
    489              	My_MC_Spin = (uint8)FALSE;
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable1_22
   \   0000015A   0x7008             STRB     R0,[R1, #+0]
    490              }
    491          
    492              // --- Cycle Design ---
    493          
    494              if(My_MC_Cycle == (uint8)TRUE)
   \                     ??BoardDebugging__25msHandler_7: (+1)
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable1_20
   \   00000160   0x7800             LDRB     R0,[R0, #+0]
   \   00000162   0x2801             CMP      R0,#+1
   \   00000164   0xF040 0x80FB      BNE.W    ??BoardDebugging__25msHandler_8
    495              {
    496              	if(My_MC_Cycle_Phase == 0) //Init MC Cycle...
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable1_23
   \   0000016C   0x7800             LDRB     R0,[R0, #+0]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD11B             BNE.N    ??BoardDebugging__25msHandler_9
    497              	{
    498                  	Mci__ClearError(MOTOR0);
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x.... 0x....      BL       Mci__ClearError
    499              		My_MC_Cycle_Counter_Duration = (uint32)((uint32)My_MC_Cycle_Duration_Min * 60 * 40)+1;
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable1_24
   \   0000017C   0x8800             LDRH     R0,[R0, #+0]
   \   0000017E   0xF44F 0x6116      MOV      R1,#+2400
   \   00000182   0x4348             MULS     R0,R1,R0
   \   00000184   0x1C40             ADDS     R0,R0,#+1
   \   00000186   0x.... 0x....      LDR.W    R1,??DataTable1_25
   \   0000018A   0x6008             STR      R0,[R1, #+0]
    500                  	My_MC_Cycle_Phase = 4;
   \   0000018C   0x2004             MOVS     R0,#+4
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable1_23
   \   00000192   0x7008             STRB     R0,[R1, #+0]
    501                  	My_MC_Cycle_Counter = 1; //Start Immediately...
   \   00000194   0x2001             MOVS     R0,#+1
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   0000019A   0x8008             STRH     R0,[R1, #+0]
    502                  	BD_Target_Stop = BD_Target_Accel;
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable1_12
   \   000001A0   0x8800             LDRH     R0,[R0, #+0]
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable1_19
   \   000001A6   0x8008             STRH     R0,[R1, #+0]
   \   000001A8   0xE0A8             B.N      ??BoardDebugging__25msHandler_10
    503              	}
    504              	else if(My_MC_Cycle_Phase == 1) //Check for stop...
   \                     ??BoardDebugging__25msHandler_9: (+1)
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable1_23
   \   000001AE   0x7800             LDRB     R0,[R0, #+0]
   \   000001B0   0x2801             CMP      R0,#+1
   \   000001B2   0xD123             BNE.N    ??BoardDebugging__25msHandler_11
    505              	{
    506              		My_MC_Cycle_Counter--;
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   000001B8   0x8800             LDRH     R0,[R0, #+0]
   \   000001BA   0x1E40             SUBS     R0,R0,#+1
   \   000001BC   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   000001C0   0x8008             STRH     R0,[R1, #+0]
    507              		if(!My_MC_Cycle_Counter)
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   000001C6   0x8800             LDRH     R0,[R0, #+0]
   \   000001C8   0x2800             CMP      R0,#+0
   \   000001CA   0xF040 0x8097      BNE.W    ??BoardDebugging__25msHandler_10
    508              		{
    509                  		BD_STOP(BD_Motor, BD_Target_Stop);
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   000001D2   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   000001D6   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000001DA   0x7800             LDRB     R0,[R0, #+0]
   \   000001DC   0x.... 0x....      BL       Mci__Stop
    510                  		My_MC_Cycle_Phase = 2;
   \   000001E0   0x2002             MOVS     R0,#+2
   \   000001E2   0x.... 0x....      LDR.W    R1,??DataTable1_23
   \   000001E6   0x7008             STRB     R0,[R1, #+0]
    511                  		My_MC_Cycle_Counter = My_MC_Cycle_Counter_Off * 40; //Off Time
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable1_27
   \   000001EC   0x8800             LDRH     R0,[R0, #+0]
   \   000001EE   0x2128             MOVS     R1,#+40
   \   000001F0   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   000001F4   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   000001F8   0x8008             STRH     R0,[R1, #+0]
   \   000001FA   0xE07F             B.N      ??BoardDebugging__25msHandler_10
    512              		}
    513              	}
    514              	else if(My_MC_Cycle_Phase == 2) //Init Negative Cycle
   \                     ??BoardDebugging__25msHandler_11: (+1)
   \   000001FC   0x.... 0x....      LDR.W    R0,??DataTable1_23
   \   00000200   0x7800             LDRB     R0,[R0, #+0]
   \   00000202   0x2802             CMP      R0,#+2
   \   00000204   0xD127             BNE.N    ??BoardDebugging__25msHandler_12
    515              	{
    516              		My_MC_Cycle_Counter--;
   \   00000206   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   0000020A   0x8800             LDRH     R0,[R0, #+0]
   \   0000020C   0x1E40             SUBS     R0,R0,#+1
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   00000212   0x8008             STRH     R0,[R1, #+0]
    517              		if(!My_MC_Cycle_Counter)
   \   00000214   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   00000218   0x8800             LDRH     R0,[R0, #+0]
   \   0000021A   0x2800             CMP      R0,#+0
   \   0000021C   0xD16E             BNE.N    ??BoardDebugging__25msHandler_10
    518              		{
    519                  		BD_RUN(BD_Motor, -BD_Target_Speed, BD_Target_Accel);
   \   0000021E   0x.... 0x....      LDR.W    R0,??DataTable1_12
   \   00000222   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable1_11
   \   0000022A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000022E   0x4241             RSBS     R1,R0,#+0
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   00000234   0x7800             LDRB     R0,[R0, #+0]
   \   00000236   0x.... 0x....      BL       Mci__Run
    520                  		My_MC_Cycle_Phase = 3;
   \   0000023A   0x2003             MOVS     R0,#+3
   \   0000023C   0x.... 0x....      LDR.W    R1,??DataTable1_23
   \   00000240   0x7008             STRB     R0,[R1, #+0]
    521                  		My_MC_Cycle_Counter = My_MC_Cycle_Counter_On * 40; //On Time
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable1_28
   \   00000246   0x8800             LDRH     R0,[R0, #+0]
   \   00000248   0x2128             MOVS     R1,#+40
   \   0000024A   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   0000024E   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   00000252   0x8008             STRH     R0,[R1, #+0]
   \   00000254   0xE052             B.N      ??BoardDebugging__25msHandler_10
    522              		}
    523              	}
    524              	else if(My_MC_Cycle_Phase == 3) //Cycle Negative...
   \                     ??BoardDebugging__25msHandler_12: (+1)
   \   00000256   0x.... 0x....      LDR.W    R0,??DataTable1_23
   \   0000025A   0x7800             LDRB     R0,[R0, #+0]
   \   0000025C   0x2803             CMP      R0,#+3
   \   0000025E   0xD122             BNE.N    ??BoardDebugging__25msHandler_13
    525              	{
    526              		My_MC_Cycle_Counter--;
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   00000264   0x8800             LDRH     R0,[R0, #+0]
   \   00000266   0x1E40             SUBS     R0,R0,#+1
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   0000026C   0x8008             STRH     R0,[R1, #+0]
    527              		if(!My_MC_Cycle_Counter)
   \   0000026E   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   00000272   0x8800             LDRH     R0,[R0, #+0]
   \   00000274   0x2800             CMP      R0,#+0
   \   00000276   0xD141             BNE.N    ??BoardDebugging__25msHandler_10
    528              		{
    529                  		BD_STOP(BD_Motor, BD_Target_Stop);
   \   00000278   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   0000027C   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   00000280   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   00000284   0x7800             LDRB     R0,[R0, #+0]
   \   00000286   0x.... 0x....      BL       Mci__Stop
    530                  		My_MC_Cycle_Phase = 4;
   \   0000028A   0x2004             MOVS     R0,#+4
   \   0000028C   0x.... 0x....      LDR.W    R1,??DataTable1_23
   \   00000290   0x7008             STRB     R0,[R1, #+0]
    531                  		My_MC_Cycle_Counter = My_MC_Cycle_Counter_Off * 40; //Off Time
   \   00000292   0x.... 0x....      LDR.W    R0,??DataTable1_27
   \   00000296   0x8800             LDRH     R0,[R0, #+0]
   \   00000298   0x2128             MOVS     R1,#+40
   \   0000029A   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   0000029E   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   000002A2   0x8008             STRH     R0,[R1, #+0]
   \   000002A4   0xE02A             B.N      ??BoardDebugging__25msHandler_10
    532              		}
    533              	}
    534              	else if(My_MC_Cycle_Phase == 4) //Init Positive Cycle
   \                     ??BoardDebugging__25msHandler_13: (+1)
   \   000002A6   0x.... 0x....      LDR.W    R0,??DataTable1_23
   \   000002AA   0x7800             LDRB     R0,[R0, #+0]
   \   000002AC   0x2804             CMP      R0,#+4
   \   000002AE   0xD125             BNE.N    ??BoardDebugging__25msHandler_10
    535              	{
    536              		My_MC_Cycle_Counter--;
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   000002B4   0x8800             LDRH     R0,[R0, #+0]
   \   000002B6   0x1E40             SUBS     R0,R0,#+1
   \   000002B8   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   000002BC   0x8008             STRH     R0,[R1, #+0]
    537              		if(!My_MC_Cycle_Counter)
   \   000002BE   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   000002C2   0x8800             LDRH     R0,[R0, #+0]
   \   000002C4   0x2800             CMP      R0,#+0
   \   000002C6   0xD119             BNE.N    ??BoardDebugging__25msHandler_10
    538              		{
    539                  		BD_RUN(BD_Motor, BD_Target_Speed, BD_Target_Accel);
   \   000002C8   0x.... 0x....      LDR.W    R0,??DataTable1_12
   \   000002CC   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000002D0   0x.... 0x....      LDR.W    R0,??DataTable1_11
   \   000002D4   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   000002D8   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000002DC   0x7800             LDRB     R0,[R0, #+0]
   \   000002DE   0x.... 0x....      BL       Mci__Run
    540                  		My_MC_Cycle_Phase = 1;
   \   000002E2   0x2001             MOVS     R0,#+1
   \   000002E4   0x.... 0x....      LDR.W    R1,??DataTable1_23
   \   000002E8   0x7008             STRB     R0,[R1, #+0]
    541                  		My_MC_Cycle_Counter = My_MC_Cycle_Counter_On * 40; //On Time
   \   000002EA   0x.... 0x....      LDR.W    R0,??DataTable1_28
   \   000002EE   0x8800             LDRH     R0,[R0, #+0]
   \   000002F0   0x2128             MOVS     R1,#+40
   \   000002F2   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   000002F6   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   000002FA   0x8008             STRH     R0,[R1, #+0]
    542              		}
    543              	}
    544          
    545              	//Stop cycle
    546              	if((My_MC_Cycle_Phase == 5) ||
    547              	   (ThermalModel__GetStatorTemperature() > My_MC_Temp_Stop))//Force Cycle Stop by user or temperature...
   \                     ??BoardDebugging__25msHandler_10: (+1)
   \   000002FC   0x.... 0x....      LDR.W    R0,??DataTable1_23
   \   00000300   0x7800             LDRB     R0,[R0, #+0]
   \   00000302   0x2805             CMP      R0,#+5
   \   00000304   0xD00A             BEQ.N    ??BoardDebugging__25msHandler_14
   \   00000306   0x.... 0x....      BL       ThermalModel__GetStatorTemperature
   \   0000030A   0x.... 0x....      LDR.W    R0,??DataTable1_29
   \   0000030E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000312   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   00000316   0xEEF1 0xFA10      FMSTAT   
   \   0000031A   0xD503             BPL.N    ??BoardDebugging__25msHandler_15
    548              	{
    549              		My_MC_Cycle_Counter_Duration = 1; //will force the stop on next cycle over check...
   \                     ??BoardDebugging__25msHandler_14: (+1)
   \   0000031C   0x2001             MOVS     R0,#+1
   \   0000031E   0x.... 0x....      LDR.W    R1,??DataTable1_25
   \   00000322   0x6008             STR      R0,[R1, #+0]
    550          
    551              	}
    552          
    553              	//Check if total cycle is over...
    554              	My_MC_Cycle_Counter_Duration--;
   \                     ??BoardDebugging__25msHandler_15: (+1)
   \   00000324   0x.... 0x....      LDR.W    R0,??DataTable1_25
   \   00000328   0x6800             LDR      R0,[R0, #+0]
   \   0000032A   0x1E40             SUBS     R0,R0,#+1
   \   0000032C   0x.... 0x....      LDR.W    R1,??DataTable1_25
   \   00000330   0x6008             STR      R0,[R1, #+0]
    555              	if(!My_MC_Cycle_Counter_Duration)
   \   00000332   0x.... 0x....      LDR.W    R0,??DataTable1_25
   \   00000336   0x6800             LDR      R0,[R0, #+0]
   \   00000338   0x2800             CMP      R0,#+0
   \   0000033A   0xD110             BNE.N    ??BoardDebugging__25msHandler_8
    556              	{
    557              		BD_STOP(BD_Motor, BD_Target_Stop);
   \   0000033C   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   00000340   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   00000344   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   00000348   0x7800             LDRB     R0,[R0, #+0]
   \   0000034A   0x.... 0x....      BL       Mci__Stop
    558              		My_MC_Cycle_Phase = 0;
   \   0000034E   0x2000             MOVS     R0,#+0
   \   00000350   0x.... 0x....      LDR.W    R1,??DataTable1_23
   \   00000354   0x7008             STRB     R0,[R1, #+0]
    559              		My_MC_Cycle = (uint8)FALSE;
   \   00000356   0x2000             MOVS     R0,#+0
   \   00000358   0x.... 0x....      LDR.W    R1,??DataTable1_20
   \   0000035C   0x7008             STRB     R0,[R1, #+0]
    560              	}
    561          
    562          
    563              }
    564          
    565          
    566              // --- Braking Testing ---
    567          
    568              if(My_MC_Braking == (uint8)TRUE)
   \                     ??BoardDebugging__25msHandler_8: (+1)
   \   0000035E   0x.... 0x....      LDR.W    R0,??DataTable1_21
   \   00000362   0x7800             LDRB     R0,[R0, #+0]
   \   00000364   0x2801             CMP      R0,#+1
   \   00000366   0xF040 0x8150      BNE.W    ??BoardDebugging__25msHandler_16
    569              {
    570              	if(My_MC_Braking_Phase == 0) //Init MC Cycle...
   \   0000036A   0x.... 0x....      LDR.W    R0,??DataTable1_30
   \   0000036E   0x8800             LDRH     R0,[R0, #+0]
   \   00000370   0x2800             CMP      R0,#+0
   \   00000372   0xD155             BNE.N    ??BoardDebugging__25msHandler_17
    571              	{
    572              		My_MC_Braking_Runs = 1;
   \   00000374   0x2001             MOVS     R0,#+1
   \   00000376   0x.... 0x....      LDR.W    R1,??DataTable1_31
   \   0000037A   0x8008             STRH     R0,[R1, #+0]
    573              		My_MC_Braking_Counter = 5 * 40; //5 secs in plateau..
   \   0000037C   0x20C8             MOVS     R0,#+200
   \   0000037E   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   00000382   0x6008             STR      R0,[R1, #+0]
    574                  	My_MC_Braking_Phase = 1;
   \   00000384   0x2001             MOVS     R0,#+1
   \   00000386   0x.... 0x....      LDR.W    R1,??DataTable1_30
   \   0000038A   0x8008             STRH     R0,[R1, #+0]
    575                  	Mci__ClearError(MOTOR0); //Clear any previous fault...
   \   0000038C   0x2000             MOVS     R0,#+0
   \   0000038E   0x.... 0x....      BL       Mci__ClearError
    576          
    577                  	if(My_MC_Braking_Region == 2)
   \   00000392   0x.... 0x....      LDR.W    R0,??DataTable1_33
   \   00000396   0x7800             LDRB     R0,[R0, #+0]
   \   00000398   0x2802             CMP      R0,#+2
   \   0000039A   0xD11D             BNE.N    ??BoardDebugging__25msHandler_18
    578                  	{
    579                  		BD_RUN(BD_Motor, (sint32)(500.0f*My_MC_TR), (sint32)(20.0f*My_MC_TR));
   \   0000039C   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   000003A0   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000003A4   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \   000003A8   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000003AC   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000003B0   0xEE10 0x2A10      VMOV     R2,S0
   \   000003B4   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   000003B8   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000003BC   0xEDDF 0x0AE0      VLDR.W   S1,??BoardDebugging__25msHandler_19  ;; 0x43fa0000
   \   000003C0   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000003C4   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000003C8   0xEE10 0x1A10      VMOV     R1,S0
   \   000003CC   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000003D0   0x7800             LDRB     R0,[R0, #+0]
   \   000003D2   0x.... 0x....      BL       Mci__Run
   \   000003D6   0xE0EB             B.N      ??BoardDebugging__25msHandler_20
    580                  	}
    581                  	else if(My_MC_Braking_Region == 1)
   \                     ??BoardDebugging__25msHandler_18: (+1)
   \   000003D8   0x.... 0x....      LDR.W    R0,??DataTable1_33
   \   000003DC   0x7800             LDRB     R0,[R0, #+0]
   \   000003DE   0x2801             CMP      R0,#+1
   \   000003E0   0xF040 0x80E6      BNE.W    ??BoardDebugging__25msHandler_20
    582                  	{
    583                  		BD_RUN(BD_Motor, (sint32)(150.0f*My_MC_TR), (sint32)(20.0f*My_MC_TR));
   \   000003E4   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   000003E8   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000003EC   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \   000003F0   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000003F4   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000003F8   0xEE10 0x2A10      VMOV     R2,S0
   \   000003FC   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   00000400   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000404   0xEDDF 0x0A9B      VLDR.W   S1,??BoardDebugging__25msHandler_21  ;; 0x43160000
   \   00000408   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000040C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000410   0xEE10 0x1A10      VMOV     R1,S0
   \   00000414   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   00000418   0x7800             LDRB     R0,[R0, #+0]
   \   0000041A   0x.... 0x....      BL       Mci__Run
   \   0000041E   0xE0C7             B.N      ??BoardDebugging__25msHandler_20
    584                  	}
    585              	}
    586              	else if(My_MC_Braking_Phase == 1) //Check plateau... and Brake.
   \                     ??BoardDebugging__25msHandler_17: (+1)
   \   00000420   0x.... 0x....      LDR.W    R0,??DataTable1_30
   \   00000424   0x8800             LDRH     R0,[R0, #+0]
   \   00000426   0x2801             CMP      R0,#+1
   \   00000428   0xD14F             BNE.N    ??BoardDebugging__25msHandler_22
    587              	{
    588              		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   0000042A   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   0000042E   0x2803             CMP      R0,#+3
   \   00000430   0xF040 0x80BE      BNE.W    ??BoardDebugging__25msHandler_20
    589              		{
    590              			My_MC_Braking_Counter--;
   \   00000434   0x.... 0x....      LDR.W    R0,??DataTable1_32
   \   00000438   0x6800             LDR      R0,[R0, #+0]
   \   0000043A   0x1E40             SUBS     R0,R0,#+1
   \   0000043C   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   00000440   0x6008             STR      R0,[R1, #+0]
    591              			if(!My_MC_Braking_Counter)
   \   00000442   0x.... 0x....      LDR.W    R0,??DataTable1_32
   \   00000446   0x6800             LDR      R0,[R0, #+0]
   \   00000448   0x2800             CMP      R0,#+0
   \   0000044A   0xF040 0x80B1      BNE.W    ??BoardDebugging__25msHandler_20
    592              			{
    593              	        	if(My_MC_Braking_Region == 2)
   \   0000044E   0x.... 0x....      LDR.W    R0,??DataTable1_33
   \   00000452   0x7800             LDRB     R0,[R0, #+0]
   \   00000454   0x2802             CMP      R0,#+2
   \   00000456   0xD115             BNE.N    ??BoardDebugging__25msHandler_23
    594              	        	{
    595              	        		BD_RUN(BD_Motor, (sint32)(300.0f*My_MC_TR), My_MC_Braking_Decel);
   \   00000458   0x.... 0x....      LDR.W    R0,??DataTable1_35
   \   0000045C   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000460   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   00000464   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000468   0xEDDF 0x0A83      VLDR.W   S1,??BoardDebugging__25msHandler_21+0x4  ;; 0x43960000
   \   0000046C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000470   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000474   0xEE10 0x1A10      VMOV     R1,S0
   \   00000478   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   0000047C   0x7800             LDRB     R0,[R0, #+0]
   \   0000047E   0x.... 0x....      BL       Mci__Run
   \   00000482   0xE019             B.N      ??BoardDebugging__25msHandler_24
    596              	        	}
    597              	        	else if(My_MC_Braking_Region == 1)
   \                     ??BoardDebugging__25msHandler_23: (+1)
   \   00000484   0x.... 0x....      LDR.W    R0,??DataTable1_33
   \   00000488   0x7800             LDRB     R0,[R0, #+0]
   \   0000048A   0x2801             CMP      R0,#+1
   \   0000048C   0xD114             BNE.N    ??BoardDebugging__25msHandler_24
    598              	        	{
    599              	        		BD_RUN(BD_Motor, (sint32)(100.0f*My_MC_TR), My_MC_Braking_Decel);
   \   0000048E   0x.... 0x....      LDR.W    R0,??DataTable1_35
   \   00000492   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000496   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   0000049A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000049E   0xEDDF 0x0A77      VLDR.W   S1,??BoardDebugging__25msHandler_21+0x8  ;; 0x42c80000
   \   000004A2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000004A6   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000004AA   0xEE10 0x1A10      VMOV     R1,S0
   \   000004AE   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000004B2   0x7800             LDRB     R0,[R0, #+0]
   \   000004B4   0x.... 0x....      BL       Mci__Run
    600              	        	}
    601              	        	My_MC_Braking_Phase = 2;
   \                     ??BoardDebugging__25msHandler_24: (+1)
   \   000004B8   0x2002             MOVS     R0,#+2
   \   000004BA   0x.... 0x....      LDR.W    R1,??DataTable1_30
   \   000004BE   0x8008             STRH     R0,[R1, #+0]
    602              	        	My_MC_Braking_Counter = 5 * 40; //5 secs in plateau..
   \   000004C0   0x20C8             MOVS     R0,#+200
   \   000004C2   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   000004C6   0x6008             STR      R0,[R1, #+0]
   \   000004C8   0xE072             B.N      ??BoardDebugging__25msHandler_20
    603              			}
    604              		}
    605              	}
    606              	else if(My_MC_Braking_Phase == 2) //Wait plateau after braking...
   \                     ??BoardDebugging__25msHandler_22: (+1)
   \   000004CA   0x.... 0x....      LDR.W    R0,??DataTable1_30
   \   000004CE   0x8800             LDRH     R0,[R0, #+0]
   \   000004D0   0x2802             CMP      R0,#+2
   \   000004D2   0xD114             BNE.N    ??BoardDebugging__25msHandler_25
    607              	{
    608              		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   000004D4   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   000004D8   0x2803             CMP      R0,#+3
   \   000004DA   0xD169             BNE.N    ??BoardDebugging__25msHandler_20
    609              		{
    610              			My_MC_Braking_Counter--;
   \   000004DC   0x.... 0x....      LDR.W    R0,??DataTable1_32
   \   000004E0   0x6800             LDR      R0,[R0, #+0]
   \   000004E2   0x1E40             SUBS     R0,R0,#+1
   \   000004E4   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   000004E8   0x6008             STR      R0,[R1, #+0]
    611              			if(!My_MC_Braking_Counter)
   \   000004EA   0x.... 0x....      LDR.W    R0,??DataTable1_32
   \   000004EE   0x6800             LDR      R0,[R0, #+0]
   \   000004F0   0x2800             CMP      R0,#+0
   \   000004F2   0xD15D             BNE.N    ??BoardDebugging__25msHandler_20
    612              			{
    613              	        	My_MC_Braking_Phase = 3;
   \   000004F4   0x2003             MOVS     R0,#+3
   \   000004F6   0x.... 0x....      LDR.W    R1,??DataTable1_30
   \   000004FA   0x8008             STRH     R0,[R1, #+0]
   \   000004FC   0xE058             B.N      ??BoardDebugging__25msHandler_20
    614              			}
    615              		}
    616              	}
    617              	else if(My_MC_Braking_Phase == 3) //Keep Testing...
   \                     ??BoardDebugging__25msHandler_25: (+1)
   \   000004FE   0x.... 0x....      LDR.W    R0,??DataTable1_30
   \   00000502   0x8800             LDRH     R0,[R0, #+0]
   \   00000504   0x2803             CMP      R0,#+3
   \   00000506   0xD153             BNE.N    ??BoardDebugging__25msHandler_20
    618              	{
    619              		My_MC_Braking_Runs++;
   \   00000508   0x.... 0x....      LDR.W    R0,??DataTable1_31
   \   0000050C   0x8800             LDRH     R0,[R0, #+0]
   \   0000050E   0x1C40             ADDS     R0,R0,#+1
   \   00000510   0x.... 0x....      LDR.W    R1,??DataTable1_31
   \   00000514   0x8008             STRH     R0,[R1, #+0]
    620              		My_MC_Braking_Counter = 5 * 40;
   \   00000516   0x20C8             MOVS     R0,#+200
   \   00000518   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   0000051C   0x6008             STR      R0,[R1, #+0]
    621                  	My_MC_Braking_Phase = 1;
   \   0000051E   0x2001             MOVS     R0,#+1
   \   00000520   0x.... 0x....      LDR.W    R1,??DataTable1_30
   \   00000524   0x8008             STRH     R0,[R1, #+0]
    622          
    623                  	if(My_MC_Braking_Region == 2)
   \   00000526   0x.... 0x....      LDR.W    R0,??DataTable1_33
   \   0000052A   0x7800             LDRB     R0,[R0, #+0]
   \   0000052C   0x2802             CMP      R0,#+2
   \   0000052E   0xD11D             BNE.N    ??BoardDebugging__25msHandler_26
    624                  	{
    625                  		BD_RUN(BD_Motor, (sint32)(500.0f*My_MC_TR), (sint32)(20.0f*My_MC_TR));
   \   00000530   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   00000534   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000538   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \   0000053C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000540   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000544   0xEE10 0x2A10      VMOV     R2,S0
   \   00000548   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   0000054C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000550   0xEDDF 0x0A7B      VLDR.W   S1,??BoardDebugging__25msHandler_19  ;; 0x43fa0000
   \   00000554   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000558   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000055C   0xEE10 0x1A10      VMOV     R1,S0
   \   00000560   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   00000564   0x7800             LDRB     R0,[R0, #+0]
   \   00000566   0x.... 0x....      BL       Mci__Run
   \   0000056A   0xE021             B.N      ??BoardDebugging__25msHandler_20
    626                  	}
    627                  	else if(My_MC_Braking_Region == 1)
   \                     ??BoardDebugging__25msHandler_26: (+1)
   \   0000056C   0x.... 0x....      LDR.W    R0,??DataTable1_33
   \   00000570   0x7800             LDRB     R0,[R0, #+0]
   \   00000572   0x2801             CMP      R0,#+1
   \   00000574   0xD11C             BNE.N    ??BoardDebugging__25msHandler_20
    628                  	{
    629                  		BD_RUN(BD_Motor, (sint32)(150.0f*My_MC_TR), (sint32)(20.0f*My_MC_TR));
   \   00000576   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   0000057A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000057E   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \   00000582   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000586   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000058A   0xEE10 0x2A10      VMOV     R2,S0
   \   0000058E   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   00000592   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000596   0xEDDF 0x0A37      VLDR.W   S1,??BoardDebugging__25msHandler_21  ;; 0x43160000
   \   0000059A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000059E   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000005A2   0xEE10 0x1A10      VMOV     R1,S0
   \   000005A6   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000005AA   0x7800             LDRB     R0,[R0, #+0]
   \   000005AC   0x.... 0x....      BL       Mci__Run
    630                  	}
    631              	}
    632          
    633          
    634              	//Stop cycle
    635              	if((My_MC_Braking_Phase == 10) ||
    636              	   (ThermalModel__GetStatorTemperature() > My_MC_Temp_Stop))//Force Cycle Stop by user or temperature...
   \                     ??BoardDebugging__25msHandler_20: (+1)
   \   000005B0   0x.... 0x....      LDR.W    R0,??DataTable1_30
   \   000005B4   0x8800             LDRH     R0,[R0, #+0]
   \   000005B6   0x280A             CMP      R0,#+10
   \   000005B8   0xD00A             BEQ.N    ??BoardDebugging__25msHandler_27
   \   000005BA   0x.... 0x....      BL       ThermalModel__GetStatorTemperature
   \   000005BE   0x.... 0x....      LDR.W    R0,??DataTable1_29
   \   000005C2   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000005C6   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   000005CA   0xEEF1 0xFA10      FMSTAT   
   \   000005CE   0xD503             BPL.N    ??BoardDebugging__25msHandler_28
    637              	{
    638              		My_MC_Braking_Runs = 100;
   \                     ??BoardDebugging__25msHandler_27: (+1)
   \   000005D0   0x2064             MOVS     R0,#+100
   \   000005D2   0x.... 0x....      LDR.W    R1,??DataTable1_31
   \   000005D6   0x8008             STRH     R0,[R1, #+0]
    639              	}
    640          
    641              	//Check if total cycle is over...
    642              	if(My_MC_Braking_Runs > My_MC_Braking_Runs_Total)
   \                     ??BoardDebugging__25msHandler_28: (+1)
   \   000005D8   0x.... 0x....      LDR.W    R0,??DataTable1_36
   \   000005DC   0x8800             LDRH     R0,[R0, #+0]
   \   000005DE   0x.... 0x....      LDR.W    R1,??DataTable1_31
   \   000005E2   0x8809             LDRH     R1,[R1, #+0]
   \   000005E4   0x4288             CMP      R0,R1
   \   000005E6   0xD210             BCS.N    ??BoardDebugging__25msHandler_16
    643              	{
    644              		BD_STOP(BD_Motor, BD_Target_Stop);
   \   000005E8   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   000005EC   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   000005F0   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   000005F4   0x7800             LDRB     R0,[R0, #+0]
   \   000005F6   0x.... 0x....      BL       Mci__Stop
    645              		My_MC_Braking_Phase = 0;
   \   000005FA   0x2000             MOVS     R0,#+0
   \   000005FC   0x.... 0x....      LDR.W    R1,??DataTable1_30
   \   00000600   0x8008             STRH     R0,[R1, #+0]
    646              		My_MC_Braking = (uint8)FALSE;
   \   00000602   0x2000             MOVS     R0,#+0
   \   00000604   0x.... 0x....      LDR.W    R1,??DataTable1_21
   \   00000608   0x7008             STRB     R0,[R1, #+0]
    647              	}
    648              }
    649          
    650          
    651          
    652          
    653              // --- Spin Testing ---
    654          
    655                  if(My_MC_Spin == (uint8)TRUE)
   \                     ??BoardDebugging__25msHandler_16: (+1)
   \   0000060A   0x.... 0x....      LDR.W    R0,??DataTable1_22
   \   0000060E   0x7800             LDRB     R0,[R0, #+0]
   \   00000610   0x2801             CMP      R0,#+1
   \   00000612   0xF040 0x81A2      BNE.W    ??BoardDebugging__25msHandler_29
    656                  {
    657                  	if(My_MC_Spin_Phase == 0) //Init MC Cycle...
   \   00000616   0x.... 0x....      LDR.W    R0,??DataTable1_37
   \   0000061A   0x7800             LDRB     R0,[R0, #+0]
   \   0000061C   0x2800             CMP      R0,#+0
   \   0000061E   0xD12F             BNE.N    ??BoardDebugging__25msHandler_30
    658                  	{
    659                  		My_MC_Spin_Counter = 30 * 40; //30 secs in plateau..
   \   00000620   0xF44F 0x6096      MOV      R0,#+1200
   \   00000624   0x.... 0x....      LDR.W    R1,??DataTable1_38
   \   00000628   0x6008             STR      R0,[R1, #+0]
    660                      	My_MC_Spin_Phase = 1;
   \   0000062A   0x2001             MOVS     R0,#+1
   \   0000062C   0x.... 0x....      LDR.W    R1,??DataTable1_37
   \   00000630   0x7008             STRB     R0,[R1, #+0]
    661                      	Mci__ClearError(MOTOR0); //Clear any previous fault...
   \   00000632   0x2000             MOVS     R0,#+0
   \   00000634   0x.... 0x....      BL       Mci__ClearError
    662          
    663                     		BD_RUN(BD_Motor, (sint32)(350.0f*My_MC_TR), (sint32)(25.0f*My_MC_TR)); //350rpm
   \   00000638   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   0000063C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000640   0xEEF3 0x0A09      VMOV.F32 S1,#25.0
   \   00000644   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000648   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000064C   0xEE10 0x2A10      VMOV     R2,S0
   \   00000650   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   00000654   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000658   0xEDDF 0x0AA7      VLDR.W   S1,??BoardDebugging__25msHandler_31  ;; 0x43af0000
   \   0000065C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000660   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000664   0xEE10 0x1A10      VMOV     R1,S0
   \   00000668   0x.... 0x....      LDR.W    R0,??DataTable1_13
   \   0000066C   0x7800             LDRB     R0,[R0, #+0]
   \   0000066E   0x.... 0x....      BL       Mci__Run
   \   00000672   0xE157             B.N      ??BoardDebugging__25msHandler_32
   \                     ??BoardDebugging__25msHandler_21:
   \   00000674   0x43160000         DC32     0x43160000
   \   00000678   0x43960000         DC32     0x43960000
   \   0000067C   0x42C80000         DC32     0x42c80000
    664                  	}
    665                  	else if(My_MC_Spin_Phase == 1) //Check plateau... and Brake.
   \                     ??BoardDebugging__25msHandler_30: (+1)
   \   00000680   0x.... 0x....      LDR.W    R0,??DataTable1_37
   \   00000684   0x7800             LDRB     R0,[R0, #+0]
   \   00000686   0x2801             CMP      R0,#+1
   \   00000688   0xD135             BNE.N    ??BoardDebugging__25msHandler_33
    666                  	{
    667                  		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   0000068A   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   0000068E   0x2803             CMP      R0,#+3
   \   00000690   0xF040 0x8148      BNE.W    ??BoardDebugging__25msHandler_32
    668                  		{
    669                  			My_MC_Spin_Counter--;
   \   00000694   0x.... 0x....      LDR.W    R0,??DataTable1_38
   \   00000698   0x6800             LDR      R0,[R0, #+0]
   \   0000069A   0x1E40             SUBS     R0,R0,#+1
   \   0000069C   0x.... 0x....      LDR.W    R1,??DataTable1_38
   \   000006A0   0x6008             STR      R0,[R1, #+0]
    670                  			if(!My_MC_Spin_Counter)
   \   000006A2   0x.... 0x....      LDR.W    R0,??DataTable1_38
   \   000006A6   0x6800             LDR      R0,[R0, #+0]
   \   000006A8   0x2800             CMP      R0,#+0
   \   000006AA   0xF040 0x813B      BNE.W    ??BoardDebugging__25msHandler_32
    671                  			{
    672                 	        		BD_RUN(BD_Motor, (sint32)(500.0f*My_MC_TR), (sint32)(25.0f*My_MC_TR));
   \   000006AE   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   000006B2   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000006B6   0xEEF3 0x0A09      VMOV.F32 S1,#25.0
   \   000006BA   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000006BE   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000006C2   0xEE10 0x2A10      VMOV     R2,S0
   \   000006C6   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   000006CA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000006CE   0xEDDF 0x0A1C      VLDR.W   S1,??BoardDebugging__25msHandler_19  ;; 0x43fa0000
   \   000006D2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000006D6   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000006DA   0xEE10 0x1A10      VMOV     R1,S0
   \   000006DE   0x....             LDR.N    R0,??DataTable1_13
   \   000006E0   0x7800             LDRB     R0,[R0, #+0]
   \   000006E2   0x.... 0x....      BL       Mci__Run
    673                  	        	My_MC_Spin_Phase = 2;
   \   000006E6   0x2002             MOVS     R0,#+2
   \   000006E8   0x....             LDR.N    R1,??DataTable1_37
   \   000006EA   0x7008             STRB     R0,[R1, #+0]
    674                  	        	My_MC_Spin_Counter = 30 * 40; //5 secs in plateau..
   \   000006EC   0xF44F 0x6096      MOV      R0,#+1200
   \   000006F0   0x....             LDR.N    R1,??DataTable1_38
   \   000006F2   0x6008             STR      R0,[R1, #+0]
   \   000006F4   0xE116             B.N      ??BoardDebugging__25msHandler_32
    675                  			}
    676                  		}
    677                  	}
    678                  	else if(My_MC_Spin_Phase == 2) //Check plateau... and Brake.
   \                     ??BoardDebugging__25msHandler_33: (+1)
   \   000006F6   0x....             LDR.N    R0,??DataTable1_37
   \   000006F8   0x7800             LDRB     R0,[R0, #+0]
   \   000006FA   0x2802             CMP      R0,#+2
   \   000006FC   0xD134             BNE.N    ??BoardDebugging__25msHandler_34
    679                  	{
    680                  		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   000006FE   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   00000702   0x2803             CMP      R0,#+3
   \   00000704   0xF040 0x810E      BNE.W    ??BoardDebugging__25msHandler_32
    681                  		{
    682                  			My_MC_Spin_Counter--;
   \   00000708   0x....             LDR.N    R0,??DataTable1_38
   \   0000070A   0x6800             LDR      R0,[R0, #+0]
   \   0000070C   0x1E40             SUBS     R0,R0,#+1
   \   0000070E   0x....             LDR.N    R1,??DataTable1_38
   \   00000710   0x6008             STR      R0,[R1, #+0]
    683                  			if(!My_MC_Spin_Counter)
   \   00000712   0x....             LDR.N    R0,??DataTable1_38
   \   00000714   0x6800             LDR      R0,[R0, #+0]
   \   00000716   0x2800             CMP      R0,#+0
   \   00000718   0xF040 0x8104      BNE.W    ??BoardDebugging__25msHandler_32
    684                  			{
    685                 	        		BD_RUN(BD_Motor, (sint32)(800.0f*My_MC_TR), (sint32)(20.0f*My_MC_TR));
   \   0000071C   0x....             LDR.N    R0,??DataTable1_34
   \   0000071E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000722   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \   00000726   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000072A   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000072E   0xEE10 0x2A10      VMOV     R2,S0
   \   00000732   0x....             LDR.N    R0,??DataTable1_34
   \   00000734   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000738   0xEDDF 0x....      VLDR.W   S1,??DataTable1  ;; 0x44480000
   \   0000073C   0xE002             B.N      ??BoardDebugging__25msHandler_35
   \   0000073E   0xBF00             Nop      
   \                     ??BoardDebugging__25msHandler_19:
   \   00000740   0x43FA0000         DC32     0x43fa0000
   \                     ??BoardDebugging__25msHandler_35: (+1)
   \   00000744   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000748   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000074C   0xEE10 0x1A10      VMOV     R1,S0
   \   00000750   0x....             LDR.N    R0,??DataTable1_13
   \   00000752   0x7800             LDRB     R0,[R0, #+0]
   \   00000754   0x.... 0x....      BL       Mci__Run
    686                  	        	My_MC_Spin_Phase = 3;
   \   00000758   0x2003             MOVS     R0,#+3
   \   0000075A   0x....             LDR.N    R1,??DataTable1_37
   \   0000075C   0x7008             STRB     R0,[R1, #+0]
    687                  	        	My_MC_Spin_Counter = 30 * 40; //5 secs in plateau..
   \   0000075E   0xF44F 0x6096      MOV      R0,#+1200
   \   00000762   0x....             LDR.N    R1,??DataTable1_38
   \   00000764   0x6008             STR      R0,[R1, #+0]
   \   00000766   0xE0DD             B.N      ??BoardDebugging__25msHandler_32
    688                  			}
    689                  		}
    690                  	}
    691                  	else if(My_MC_Spin_Phase == 3) //Check plateau... and Brake.
   \                     ??BoardDebugging__25msHandler_34: (+1)
   \   00000768   0x....             LDR.N    R0,??DataTable1_37
   \   0000076A   0x7800             LDRB     R0,[R0, #+0]
   \   0000076C   0x2803             CMP      R0,#+3
   \   0000076E   0xD130             BNE.N    ??BoardDebugging__25msHandler_36
    692                  	{
    693                  		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   00000770   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   00000774   0x2803             CMP      R0,#+3
   \   00000776   0xF040 0x80D5      BNE.W    ??BoardDebugging__25msHandler_32
    694                  		{
    695                  			My_MC_Spin_Counter--;
   \   0000077A   0x....             LDR.N    R0,??DataTable1_38
   \   0000077C   0x6800             LDR      R0,[R0, #+0]
   \   0000077E   0x1E40             SUBS     R0,R0,#+1
   \   00000780   0x....             LDR.N    R1,??DataTable1_38
   \   00000782   0x6008             STR      R0,[R1, #+0]
    696                  			if(!My_MC_Spin_Counter)
   \   00000784   0x....             LDR.N    R0,??DataTable1_38
   \   00000786   0x6800             LDR      R0,[R0, #+0]
   \   00000788   0x2800             CMP      R0,#+0
   \   0000078A   0xF040 0x80CB      BNE.W    ??BoardDebugging__25msHandler_32
    697                  			{
    698                 	        		BD_RUN(BD_Motor, (sint32)(1000.0f*My_MC_TR), (sint32)(10.0f*My_MC_TR));
   \   0000078E   0x....             LDR.N    R0,??DataTable1_34
   \   00000790   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000794   0xEEF2 0x0A04      VMOV.F32 S1,#10.0
   \   00000798   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000079C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000007A0   0xEE10 0x2A10      VMOV     R2,S0
   \   000007A4   0x....             LDR.N    R0,??DataTable1_34
   \   000007A6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000007AA   0xEDDF 0x....      VLDR.W   S1,??DataTable1_1  ;; 0x447a0000
   \   000007AE   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000007B2   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000007B6   0xEE10 0x1A10      VMOV     R1,S0
   \   000007BA   0x....             LDR.N    R0,??DataTable1_13
   \   000007BC   0x7800             LDRB     R0,[R0, #+0]
   \   000007BE   0x.... 0x....      BL       Mci__Run
    699                  	        	My_MC_Spin_Phase = 4;
   \   000007C2   0x2004             MOVS     R0,#+4
   \   000007C4   0x....             LDR.N    R1,??DataTable1_37
   \   000007C6   0x7008             STRB     R0,[R1, #+0]
    700                  	        	My_MC_Spin_Counter = 30 * 40; //5 secs in plateau..
   \   000007C8   0xF44F 0x6096      MOV      R0,#+1200
   \   000007CC   0x....             LDR.N    R1,??DataTable1_38
   \   000007CE   0x6008             STR      R0,[R1, #+0]
   \   000007D0   0xE0A8             B.N      ??BoardDebugging__25msHandler_32
    701                  			}
    702                  		}
    703                  	}
    704                  	else if(My_MC_Spin_Phase == 4) //Check plateau... and Brake.
   \                     ??BoardDebugging__25msHandler_36: (+1)
   \   000007D2   0x....             LDR.N    R0,??DataTable1_37
   \   000007D4   0x7800             LDRB     R0,[R0, #+0]
   \   000007D6   0x2804             CMP      R0,#+4
   \   000007D8   0xD130             BNE.N    ??BoardDebugging__25msHandler_37
    705                  	{
    706                  		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   000007DA   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   000007DE   0x2803             CMP      R0,#+3
   \   000007E0   0xF040 0x80A0      BNE.W    ??BoardDebugging__25msHandler_32
    707                  		{
    708                  			My_MC_Spin_Counter--;
   \   000007E4   0x....             LDR.N    R0,??DataTable1_38
   \   000007E6   0x6800             LDR      R0,[R0, #+0]
   \   000007E8   0x1E40             SUBS     R0,R0,#+1
   \   000007EA   0x....             LDR.N    R1,??DataTable1_38
   \   000007EC   0x6008             STR      R0,[R1, #+0]
    709                  			if(!My_MC_Spin_Counter)
   \   000007EE   0x....             LDR.N    R0,??DataTable1_38
   \   000007F0   0x6800             LDR      R0,[R0, #+0]
   \   000007F2   0x2800             CMP      R0,#+0
   \   000007F4   0xF040 0x8096      BNE.W    ??BoardDebugging__25msHandler_32
    710                  			{
    711                 	        		BD_RUN(BD_Motor, (sint32)(1200.0f*My_MC_TR), (sint32)(5.0f*My_MC_TR));
   \   000007F8   0x....             LDR.N    R0,??DataTable1_34
   \   000007FA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000007FE   0xEEF1 0x0A04      VMOV.F32 S1,#5.0
   \   00000802   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000806   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000080A   0xEE10 0x2A10      VMOV     R2,S0
   \   0000080E   0x....             LDR.N    R0,??DataTable1_34
   \   00000810   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000814   0xEDDF 0x....      VLDR.W   S1,??DataTable1_2  ;; 0x44960000
   \   00000818   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000081C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000820   0xEE10 0x1A10      VMOV     R1,S0
   \   00000824   0x....             LDR.N    R0,??DataTable1_13
   \   00000826   0x7800             LDRB     R0,[R0, #+0]
   \   00000828   0x.... 0x....      BL       Mci__Run
    712                 	        		My_MC_Spin_Phase = 5;
   \   0000082C   0x2005             MOVS     R0,#+5
   \   0000082E   0x....             LDR.N    R1,??DataTable1_37
   \   00000830   0x7008             STRB     R0,[R1, #+0]
    713                  	        	My_MC_Spin_Counter = 30 * 40; //5 secs in plateau..
   \   00000832   0xF44F 0x6096      MOV      R0,#+1200
   \   00000836   0x....             LDR.N    R1,??DataTable1_38
   \   00000838   0x6008             STR      R0,[R1, #+0]
   \   0000083A   0xE073             B.N      ??BoardDebugging__25msHandler_32
    714                  			}
    715                  		}
    716                  	}
    717                  	else if(My_MC_Spin_Phase == 5) //Check plateau... and Brake.
   \                     ??BoardDebugging__25msHandler_37: (+1)
   \   0000083C   0x....             LDR.N    R0,??DataTable1_37
   \   0000083E   0x7800             LDRB     R0,[R0, #+0]
   \   00000840   0x2805             CMP      R0,#+5
   \   00000842   0xD15B             BNE.N    ??BoardDebugging__25msHandler_38
    718                  	{
    719                  		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   00000844   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   00000848   0x2803             CMP      R0,#+3
   \   0000084A   0xD16B             BNE.N    ??BoardDebugging__25msHandler_32
    720                  		{
    721                  			My_MC_Spin_Counter--;
   \   0000084C   0x....             LDR.N    R0,??DataTable1_38
   \   0000084E   0x6800             LDR      R0,[R0, #+0]
   \   00000850   0x1E40             SUBS     R0,R0,#+1
   \   00000852   0x....             LDR.N    R1,??DataTable1_38
   \   00000854   0x6008             STR      R0,[R1, #+0]
    722                  			if(!My_MC_Spin_Counter)
   \   00000856   0x....             LDR.N    R0,??DataTable1_38
   \   00000858   0x6800             LDR      R0,[R0, #+0]
   \   0000085A   0x2800             CMP      R0,#+0
   \   0000085C   0xD162             BNE.N    ??BoardDebugging__25msHandler_32
    723                  			{
    724                  				sint32 speed;
    725                  				speed = MATHCALC__SATURATE_DIRECT(0,(sint32)(My_MC_Max_Spin_Speed*My_MC_TR),18000); //Limit in 18000rpm
   \   0000085E   0x....             LDR.N    R0,??DataTable1_39
   \   00000860   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000864   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000868   0x....             LDR.N    R0,??DataTable1_34
   \   0000086A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000086E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000872   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000876   0xEE10 0x0A10      VMOV     R0,S0
   \   0000087A   0xF244 0x6150      MOVW     R1,#+18000
   \   0000087E   0x4288             CMP      R0,R1
   \   00000880   0xDB02             BLT.N    ??BoardDebugging__25msHandler_39
   \   00000882   0xED9F 0x....      VLDR.W   S16,??DataTable1_3  ;; 0x4650
   \   00000886   0xE01E             B.N      ??BoardDebugging__25msHandler_40
   \                     ??BoardDebugging__25msHandler_39: (+1)
   \   00000888   0x....             LDR.N    R0,??DataTable1_39
   \   0000088A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000088E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000892   0x....             LDR.N    R0,??DataTable1_34
   \   00000894   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000898   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000089C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000008A0   0xEE10 0x0A10      VMOV     R0,S0
   \   000008A4   0x2801             CMP      R0,#+1
   \   000008A6   0xDA02             BGE.N    ??BoardDebugging__25msHandler_41
   \   000008A8   0xED9F 0x....      VLDR.W   S16,??DataTable1_4  ;; 0x0
   \   000008AC   0xE00B             B.N      ??BoardDebugging__25msHandler_40
   \                     ??BoardDebugging__25msHandler_41: (+1)
   \   000008AE   0x....             LDR.N    R0,??DataTable1_39
   \   000008B0   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000008B4   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000008B8   0x....             LDR.N    R0,??DataTable1_34
   \   000008BA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000008BE   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000008C2   0xEEBD 0x8AC0      VCVT.S32.F32 S16,S0
    726                 	        		BD_RUN(BD_Motor, speed, (sint32)(5.0f*My_MC_TR));
   \                     ??BoardDebugging__25msHandler_40: (+1)
   \   000008C6   0x....             LDR.N    R0,??DataTable1_34
   \   000008C8   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000008CC   0xEEF1 0x0A04      VMOV.F32 S1,#5.0
   \   000008D0   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000008D4   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000008D8   0xEE10 0x2A10      VMOV     R2,S0
   \   000008DC   0xEE18 0x1A10      VMOV     R1,S16
   \   000008E0   0x....             LDR.N    R0,??DataTable1_13
   \   000008E2   0x7800             LDRB     R0,[R0, #+0]
   \   000008E4   0x.... 0x....      BL       Mci__Run
    727             	        			My_MC_Spin_Phase = 6;
   \   000008E8   0x2006             MOVS     R0,#+6
   \   000008EA   0x....             LDR.N    R1,??DataTable1_37
   \   000008EC   0x7008             STRB     R0,[R1, #+0]
    728                  	        	My_MC_Spin_Counter = 30 * 40; //5 secs in plateau..
   \   000008EE   0xF44F 0x6096      MOV      R0,#+1200
   \   000008F2   0x....             LDR.N    R1,??DataTable1_38
   \   000008F4   0x6008             STR      R0,[R1, #+0]
   \   000008F6   0xE015             B.N      ??BoardDebugging__25msHandler_32
   \                     ??BoardDebugging__25msHandler_31:
   \   000008F8   0x43AF0000         DC32     0x43af0000
    729                  			}
    730                  		}
    731                  	}
    732                  	else if(My_MC_Spin_Phase == 6) //Check plateau... and Brake.
   \                     ??BoardDebugging__25msHandler_38: (+1)
   \   000008FC   0x....             LDR.N    R0,??DataTable1_37
   \   000008FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000900   0x2806             CMP      R0,#+6
   \   00000902   0xD10F             BNE.N    ??BoardDebugging__25msHandler_32
    733                  	{
    734                  		if(SpeedRefGen__GetStatus() == SPEED_REF_AT_PLATEAU)
   \   00000904   0x.... 0x....      BL       SpeedRefGen__GetStatus
   \   00000908   0x2803             CMP      R0,#+3
   \   0000090A   0xD10B             BNE.N    ??BoardDebugging__25msHandler_32
    735                  		{
    736                  			My_MC_Spin_Counter--;
   \   0000090C   0x....             LDR.N    R0,??DataTable1_38
   \   0000090E   0x6800             LDR      R0,[R0, #+0]
   \   00000910   0x1E40             SUBS     R0,R0,#+1
   \   00000912   0x....             LDR.N    R1,??DataTable1_38
   \   00000914   0x6008             STR      R0,[R1, #+0]
    737                  			if(!My_MC_Spin_Counter)
   \   00000916   0x....             LDR.N    R0,??DataTable1_38
   \   00000918   0x6800             LDR      R0,[R0, #+0]
   \   0000091A   0x2800             CMP      R0,#+0
   \   0000091C   0xD102             BNE.N    ??BoardDebugging__25msHandler_32
    738                  			{
    739                 	        		My_MC_Spin_Phase = 10; //Go to Stop...
   \   0000091E   0x200A             MOVS     R0,#+10
   \   00000920   0x....             LDR.N    R1,??DataTable1_37
   \   00000922   0x7008             STRB     R0,[R1, #+0]
    740                  			}
    741                  		}
    742                  	}
    743          
    744          
    745                  	//Stop cycle
    746                  	if((My_MC_Spin_Phase == 10) ||
    747                  	   (ThermalModel__GetStatorTemperature() > My_MC_Temp_Stop))//Force Cycle Stop by user or temperature...
   \                     ??BoardDebugging__25msHandler_32: (+1)
   \   00000924   0x....             LDR.N    R0,??DataTable1_37
   \   00000926   0x7800             LDRB     R0,[R0, #+0]
   \   00000928   0x280A             CMP      R0,#+10
   \   0000092A   0xD009             BEQ.N    ??BoardDebugging__25msHandler_42
   \   0000092C   0x.... 0x....      BL       ThermalModel__GetStatorTemperature
   \   00000930   0x....             LDR.N    R0,??DataTable1_29
   \   00000932   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000936   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   0000093A   0xEEF1 0xFA10      FMSTAT   
   \   0000093E   0xD50C             BPL.N    ??BoardDebugging__25msHandler_29
    748                  	{
    749                  		BD_STOP(BD_Motor, My_MC_Spin_Decel_Stop);
   \                     ??BoardDebugging__25msHandler_42: (+1)
   \   00000940   0x....             LDR.N    R0,??DataTable1_40
   \   00000942   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   00000946   0x....             LDR.N    R0,??DataTable1_13
   \   00000948   0x7800             LDRB     R0,[R0, #+0]
   \   0000094A   0x.... 0x....      BL       Mci__Stop
    750                  		My_MC_Spin_Phase = 0;
   \   0000094E   0x2000             MOVS     R0,#+0
   \   00000950   0x....             LDR.N    R1,??DataTable1_37
   \   00000952   0x7008             STRB     R0,[R1, #+0]
    751                  		My_MC_Spin = (uint8)FALSE;
   \   00000954   0x2000             MOVS     R0,#+0
   \   00000956   0x....             LDR.N    R1,??DataTable1_22
   \   00000958   0x7008             STRB     R0,[R1, #+0]
    752                  	}
    753                  }
    754          
    755          
    756                  //Check and Clear Faults...
    757                  if(Mci__GetErrorList(MOTOR0)) //Any fault detected?
   \                     ??BoardDebugging__25msHandler_29: (+1)
   \   0000095A   0x2000             MOVS     R0,#+0
   \   0000095C   0x.... 0x....      BL       Mci__GetErrorList
   \   00000960   0x2800             CMP      R0,#+0
   \   00000962   0xD010             BEQ.N    ??BoardDebugging__25msHandler_43
    758                  {
    759                  	Clear_Fault_Timer--;
   \   00000964   0x....             LDR.N    R0,??DataTable1_41
   \   00000966   0x6800             LDR      R0,[R0, #+0]
   \   00000968   0x1E40             SUBS     R0,R0,#+1
   \   0000096A   0x....             LDR.N    R1,??DataTable1_41
   \   0000096C   0x6008             STR      R0,[R1, #+0]
    760                  	if(Clear_Fault_Timer <= 0)
   \   0000096E   0x....             LDR.N    R0,??DataTable1_41
   \   00000970   0x6800             LDR      R0,[R0, #+0]
   \   00000972   0x2801             CMP      R0,#+1
   \   00000974   0xDA07             BGE.N    ??BoardDebugging__25msHandler_43
    761                  	{
    762                  		if(Mci__ClearError(MOTOR0) == TRUE)
   \   00000976   0x2000             MOVS     R0,#+0
   \   00000978   0x.... 0x....      BL       Mci__ClearError
   \   0000097C   0x2801             CMP      R0,#+1
   \   0000097E   0xD102             BNE.N    ??BoardDebugging__25msHandler_43
    763                  		{
    764                  			Clear_Fault_Timer = 3*40; //3 secs
   \   00000980   0x2078             MOVS     R0,#+120
   \   00000982   0x....             LDR.N    R1,??DataTable1_41
   \   00000984   0x6008             STR      R0,[R1, #+0]
    765                  		}
    766                  	}
    767                  }
    768          }
   \                     ??BoardDebugging__25msHandler_43: (+1)
   \   00000986   0xB002             ADD      SP,SP,#+8
   \   00000988   0xECBD 0x8B02      VPOP     {D8}
   \   0000098C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x44480000         DC32     0x44480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x44960000         DC32     0x44960000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x00004650         DC32     0x4650

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     BD_Update_Cmd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x413A3D71         DC32     0x413a3d71

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x0083D600         DC32     0x83d600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x43340000         DC32     0x43340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     BD_Reset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     BD_Select_Method

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     BD_Target_Speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     BD_Target_Accel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     BD_Motor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x........         DC32     BD_Param_Rate_x32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x........         DC32     BD_Param_x32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x........         DC32     BD_Level_Rate_x32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x........         DC32     BD_Level_x32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x........         DC32     BD_Manual_Method

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x........         DC32     BD_Target_Stop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x........         DC32     My_MC_Cycle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x........         DC32     My_MC_Braking

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   0x........         DC32     My_MC_Spin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   0x........         DC32     My_MC_Cycle_Phase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \   00000000   0x........         DC32     My_MC_Cycle_Duration_Min

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \   00000000   0x........         DC32     My_MC_Cycle_Counter_Duration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \   00000000   0x........         DC32     My_MC_Cycle_Counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \   00000000   0x........         DC32     My_MC_Cycle_Counter_Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_28:
   \   00000000   0x........         DC32     My_MC_Cycle_Counter_On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_29:
   \   00000000   0x........         DC32     My_MC_Temp_Stop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_30:
   \   00000000   0x........         DC32     My_MC_Braking_Phase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_31:
   \   00000000   0x........         DC32     My_MC_Braking_Runs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_32:
   \   00000000   0x........         DC32     My_MC_Braking_Counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_33:
   \   00000000   0x........         DC32     My_MC_Braking_Region

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_34:
   \   00000000   0x........         DC32     My_MC_TR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_35:
   \   00000000   0x........         DC32     My_MC_Braking_Decel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_36:
   \   00000000   0x........         DC32     My_MC_Braking_Runs_Total

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_37:
   \   00000000   0x........         DC32     My_MC_Spin_Phase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_38:
   \   00000000   0x........         DC32     My_MC_Spin_Counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_39:
   \   00000000   0x........         DC32     My_MC_Max_Spin_Speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_40:
   \   00000000   0x........         DC32     My_MC_Spin_Decel_Stop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_41:
   \   00000000   0x........         DC32     Clear_Fault_Timer
    769          
    770          #if (BD_INTERRUPT_ANALYSIS == ENABLED)
    771          /*
    772           *   BD_Get_Fast_Duration_us(), BD_Fast_Overload(), BD_Get_PWM_Duration_us(), BD_PWM_Overload() are
    773           *   private functions. Implementation is micro specific, so they are placed in the BoardDebugging_prv.h file
    774           *   with the pragma inline
    775           */
    776          
    777          void BoardDebugging__FastIsrAnalysis(void)
    778          {
    779              uint16 temp;
    780              temp = BD_Get_Fast_Duration_us();
    781              BD_Fast_Isr_Duration_us = temp;
    782          
    783              if (temp > BD_Fast_Isr_Max_us)
    784              {   // update the max counter
    785                  BD_Fast_Isr_Max_us = BD_Fast_Isr_Duration_us;
    786              }
    787              // CPU overload
    788              BD_Fast_Overload(BD_Fast_Isr_Ovl_Perc);
    789          }
    790          
    791          void BoardDebugging__PwmIsrAnalysis(void)
    792          {
    793              float32 temp;
    794              temp = BD_Get_PWM_Duration_us();
    795              BD_Pwm_Isr_Duration_us = temp;
    796              if (temp > BD_Pwm_Isr_Max_us)
    797              {   // update the max counter
    798                  BD_Pwm_Isr_Max_us = BD_Pwm_Isr_Duration_us;
    799              }
    800          
    801              // CPU overload
    802              BD_PWM_Overload(BD_Pwm_Isr_Ovl_Perc);
    803          }
    804          #endif
    805          
    806          
    807          
    808          //=====================================================================================================================
    809          //-------------------------------------- Private Functions ------------------------------------------------------------
    810          //=====================================================================================================================
    811          
    812          #if (BD_ADC_NOISE_ASSESSMENT == ENABLED)
    813          static void AdcNoiseInit()
    814          {
    815              //Adc Noise counters initialization
    816              Current_A.Signal_K_1     = 0;
    817              Current_B.Signal_K_1     = 0;
    818              Current_C.Signal_K_1     = 0;
    819              DcBus.Signal_K_1         = 0;
    820          
    821              Current_A.Signal_K_2     = 0;
    822              Current_B.Signal_K_2     = 0;
    823              Current_C.Signal_K_2     = 0;
    824              DcBus.Signal_K_2         = 0;
    825          
    826          
    827              Current_A.Noise_Ampl_Max = 0;
    828              Current_B.Noise_Ampl_Max = 0;
    829              Current_C.Noise_Ampl_Max = 0;
    830              DcBus.Noise_Ampl_Max     = 0;
    831          
    832              Current_A.Noise_Cnt      = 0;
    833              Current_B.Noise_Cnt      = 0;
    834              Current_C.Noise_Cnt      = 0;
    835              DcBus.Noise_Cnt          = 0;
    836          
    837              Current_Noise_Thr = BD_CURRENT_NOISE_THR;
    838              DcBus_Noise_Thr = BD_DC_BUS_NOISE_THR;
    839          
    840              Noise_Measure_Window = BD_NOISE_WINDOW;
    841              Noise_Measure_Window_Cnt = 0;
    842          
    843          }
    844          
    845          static void AdcNoiseHandler()
    846          {
    847              sint16 current_a;
    848              sint16 current_b;
    849              sint16 current_c;
    850              sint16 dc_bus;
    851          
    852              // convert floating point mcl currents and DCbus voltage back to 1.15 notation
    853              // (to be used, for instance, in case of third current reconstruction)
    854              current_a = (sint16) BD_CURRENT(Mcl_IO.Is_ABC.A);
    855              current_b = (sint16) BD_CURRENT(Mcl_IO.Is_ABC.B);
    856              current_c = (sint16) BD_CURRENT(Mcl_IO.Is_ABC.C);
    857              dc_bus    = (sint16) BD_VOLTAGE(Mcl_IO.Vdc);
    858          
    859          
    860              //--------------- Motor Current Adc Noise measurement -----------------------
    861              AdcNoiseMeasure(current_a, &Current_A, Current_Noise_Thr);
    862              AdcNoiseMeasure(current_b, &Current_B, Current_Noise_Thr);
    863              AdcNoiseMeasure(current_c, &Current_C, Current_Noise_Thr);
    864          
    865              //--------------- Dc Bus  Noise measurement -------------------------
    866              AdcNoiseMeasure(dc_bus, &DcBus, DcBus_Noise_Thr);
    867          
    868          }
    869          
    870          
    871          static void AdcNoiseMeasure(sint16 signal, NOISE_SIGNAL_TYPE* noise_signal, uint16 noise_thr)
    872          {
    873              sint16 signal_mean;
    874              sint16 signal_delta;
    875          
    876          
    877              signal_mean = (signal>>1) + (noise_signal->Signal_K_2 >>1);
    878          
    879              signal_delta = MATHCALC__ABS(noise_signal->Signal_K_1 - signal_mean);
    880          
    881              if(signal_delta > noise_thr)
    882              {
    883                  if(noise_signal->Noise_Ampl_Max < signal_delta)
    884                  {
    885                      noise_signal->Noise_Ampl_Max = signal_delta;
    886                  }
    887          
    888                  noise_signal->Noise_Cnt++;
    889              }
    890          
    891              noise_signal->Signal_K_2 = noise_signal->Signal_K_1;
    892              noise_signal->Signal_K_1 = signal;
    893          
    894          }
    895          
    896          
    897          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BoardDebugging__250usHandler
         0   -> MasterCommander__FastHandler
      24   BoardDebugging__25msHandler
        24   -> Mci__ClearError
        24   -> Mci__GetErrorList
        24   -> Mci__Manual_Injection
        24   -> Mci__Run
        24   -> Mci__Stop
        24   -> Micro__ForceReset
        24   -> SpeedRefGen__GetStatus
        24   -> ThermalModel__GetStatorTemperature
       8   BoardDebugging__Initialize
         8   -> MasterCommander__Initialize
       0   BoardDebugging__PwmHandler
         0   -> MasterCommander__PwmHandler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_29
       4  ??DataTable1_3
       4  ??DataTable1_30
       4  ??DataTable1_31
       4  ??DataTable1_32
       4  ??DataTable1_33
       4  ??DataTable1_34
       4  ??DataTable1_35
       4  ??DataTable1_36
       4  ??DataTable1_37
       4  ??DataTable1_38
       4  ??DataTable1_39
       4  ??DataTable1_4
       4  ??DataTable1_40
       4  ??DataTable1_41
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      80  BD_Update_Cmd
          BD_Select_Method
          BD_Motor
          BD_Manual_Method
          BD_Reset
          My_MC_Cycle
          My_MC_Cycle_Phase
          My_MC_Braking
          My_MC_Braking_Region
          My_MC_Spin
          My_MC_Spin_Phase
          BD_Target_Stop
          My_MC_Cycle_Counter
          My_MC_Cycle_Counter_On
          My_MC_Cycle_Counter_Off
          My_MC_Cycle_Duration_Min
          My_MC_Braking_Phase
          My_MC_Braking_Runs
          My_MC_Braking_Runs_Total
          BD_Target_Speed
          BD_Target_Accel
          My_MC_Braking_Decel
          My_MC_Spin_Decel_Stop
          BD_Level_x32
          BD_Level_Rate_x32
          BD_Param_x32
          BD_Param_Rate_x32
          My_MC_TR
          My_MC_Max_Spin_Speed
          My_MC_Cycle_Counter_Duration
          My_MC_Braking_Counter
          My_MC_Spin_Counter
          My_MC_Temp_Stop
          Clear_Fault_Timer
       4  BoardDebugging__250usHandler
    2446  BoardDebugging__25msHandler
     150  BoardDebugging__Initialize
       4  BoardDebugging__PwmHandler

 
    80 bytes in section .data
 2 772 bytes in section .text
 
 2 772 bytes of CODE memory
    80 bytes of DATA memory

Errors: none
Warnings: none
