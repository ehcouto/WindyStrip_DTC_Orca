###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        13/Mar/2025  15:30:59
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  Category\Application\DigitalFilter\DigitalFilter.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        DigitalFilter.obj -l ..\listings\DigitalFilter.lst
#        Category\Application\DigitalFilter\DigitalFilter.c
#    List file    =  ..\listings\DigitalFilter.lst
#    Object file  =  DigitalFilter.obj
#
###############################################################################

C:\Data\Repository\WindyStrip_DTC_Orca\source\Category\Application\DigitalFilter\DigitalFilter.c
      1          /**
      2           *  @file       
      3           *
      4           *  @brief      Digital Filter module.
      5           *
      6           *  @details    Generic digital filtering module with direct-form II and direct-form II transposed implementations for
      7           *              single-section filters and second-order section filters. The module stores no information, but expects
      8           *              storage to be provided by each caller. Caller also provides filter coefficients and filter order or
      9           *              number of sections. Single-section filters are susceptible to numerical precision and roundoff issues,
     10           *              especially for high sample rates, low bandwidth, and high filter order. In these situations, it is
     11           *              better to utilize a second-order sections implementation. Second-order section filters are recommended
     12           *              for filter orders above 3.
     13           *
     14           *  @section    Applicable_Documents
     15           *					List here all the applicable documents if needed. <tr>	
     16           *
     17           *  $Header: DigitalFilter.c 1.1 2016/02/02 14:39:20EST Guilherme Bencke Teixeira da Silva (BENCKG1) Exp  $
     18           *
     19           *  @copyright  Copyright 2015-$Date: 2016/02/02 14:39:20EST $. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
     20           */
     21          //---------------------------------------------------------------------------------------------------------------------
     22          //---------------------------------------------------------------------------------------------------------------------
     23          
     24          
     25          //-------------------------------------- Include Files ----------------------------------------------------------------
     26          #include "C_Extensions.h"
     27          #include "DigitalFilter.h" 
     28          //-------------------------------------- PUBLIC (Variables) -----------------------------------------------------------
     29          
     30          //-------------------------------------- PRIVATE (Variables, Constants & Defines) -------------------------------------
     31          
     32          //-------------------------------------- PRIVATE (Function Prototypes) ------------------------------------------------
     33          
     34          //=====================================================================================================================
     35          //-------------------------------------- Public Functions -------------------------------------------------------------
     36          //=====================================================================================================================
     37          
     38          //---------------------------------------------------------------------------------------------------------------------
     39          
     40          /**
     41           * @brief Direct-form II single-section digital filtering routine
     42           *
     43           * @details Filters the input data by the provided filter. Direct-form II implementation. The leading denominator
     44           * coefficient is assumed to be normalized to 1. Single-section filters are susceptible to numerical precision and
     45           * roundoff issues, especially for high sample rates, low bandwidth, and high filter order. In these situations, it is
     46           * better to utilize a second-order sections implementation.
     47           * In the figure below, z^-1 (z-inverse) represents a delay, the bi's represent numerator coefficients, and the ai's
     48           * represent denominator coefficients. A filter state exists for each delay. n is the filter order. The state array is
     49           * arranged with element [0] corresponding to the uppermost delay in the diagram (smallest delay), and element [n]
     50           * corresponding to the bottom delay in the diagram (largest delay).
     51           *
     52           *       u  ----> ( - ) ------------o-----|b0>--> ( + ) ------> y
     53           *                  ^               |               ^
     54           *                  |               V               |
     55           *                  |            | z^-1 |           |
     56           *                  |               |               |
     57           *                ( + ) <--<a0|-----o-----|b1>--> ( + )
     58           *                  ^               |               ^
     59           *                  |               V               |
     60           *                  |            | z^-1 |           |
     61           *                  |               |               |
     62           *                ( + ) <--<a1|-----o-----|b2>--> ( + )
     63           *                  ^               |               ^
     64           *                  |                               |
     65           *                                  .
     66           *                                  .
     67           *                                  .
     68           *
     69           *                                  |
     70           *                                  V
     71           *                  ^            | z^-1 |           ^
     72           *                  |               |               |
     73           *                  '------<an|-----o-----|bn+1>----'
     74           *
     75           *
     76           * @param u = input signal to be filtered
     77           * @param filter = filter object by which to filter the input signal
     78           *
     79           * @return The filtered output
     80           */
     81          #pragma optimize = none // Optimizations disabled to avoid faulty behavior with IAR C/C++ Compiler V2.60.5.1930 for Renesas RX

   \                                 In section .text, align 4, keep-with-next
     82          DIGITAL_FILTER_SIGNAL_DATA_TYPE DigitalFilter__DF2(DIGITAL_FILTER_SIGNAL_DATA_TYPE u, DIGITAL_FILTER_SINGLE_SECTION_TYPE filter, DIGITAL_FILTER_SIGNAL_DATA_TYPE *states)
     83          {
   \                     DigitalFilter__DF2: (+1)
   \   00000000   0xB407             PUSH     {R0-R2}
   \   00000002   0xEEF0 0x0A40      VMOV.F32 S1,S0
     84              sint8 i;
     85              DIGITAL_FILTER_SIGNAL_DATA_TYPE y = 0.0f;
   \   00000006   0xED9F 0x....      VLDR.W   S0,??DataTable3  ;; 0x0
     86          
     87              for(i = (filter.Order-1); i >= 0; i--)      // loop over filter states from bottom of diagram to top
   \   0000000A   0xF99D 0x1008      LDRSB    R1,[SP, #+8]
   \   0000000E   0x1E49             SUBS     R1,R1,#+1
   \   00000010   0x0008             MOVS     R0,R1
   \                     ??DigitalFilter__DF2_0: (+1)
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD426             BMI.N    ??DigitalFilter__DF2_1
     88              {                                           // so that the states may be updated in sequence
     89                  u -= filter.Den[i] * states[i];
   \   00000018   0x9901             LDR      R1,[SP, #+4]
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000020   0xED91 0x1A00      VLDR     S2,[R1, #0]
   \   00000024   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000026   0xEB13 0x0180      ADDS     R1,R3,R0, LSL #+2
   \   0000002A   0xEDD1 0x1A00      VLDR     S3,[R1, #0]
   \   0000002E   0xEE41 0x0A61      VMLS.F32 S1,S2,S3
     90                  y += filter.Num[i+1] * states[i];
   \   00000032   0x9900             LDR      R1,[SP, #+0]
   \   00000034   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000036   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000003A   0xED91 0x1A01      VLDR     S2,[R1, #+4]
   \   0000003E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000040   0xEB13 0x0180      ADDS     R1,R3,R0, LSL #+2
   \   00000044   0xEDD1 0x1A00      VLDR     S3,[R1, #0]
   \   00000048   0xEE01 0x0A21      VMLA.F32 S0,S2,S3
     91          
     92                  if(i > 0)           // Do not try to fill the first state in this way
   \   0000004C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xDB07             BLT.N    ??DigitalFilter__DF2_2
     93                  {
     94                  	states[i] = states[i-1];  // shift filter states to the next higher delay
   \   00000052   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000054   0xEB13 0x0180      ADDS     R1,R3,R0, LSL #+2
   \   00000058   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   0000005C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000005E   0xF843 0x1020      STR      R1,[R3, R0, LSL #+2]
     95                  }
     96              }
   \                     ??DigitalFilter__DF2_2: (+1)
   \   00000062   0x1E40             SUBS     R0,R0,#+1
   \   00000064   0xE7D5             B.N      ??DigitalFilter__DF2_0
     97          
     98              y += filter.Num[0] * u;
   \                     ??DigitalFilter__DF2_1: (+1)
   \   00000066   0x9900             LDR      R1,[SP, #+0]
   \   00000068   0xED91 0x1A00      VLDR     S2,[R1, #0]
   \   0000006C   0xEE01 0x0A20      VMLA.F32 S0,S2,S1
     99              states[0] = u;           // fill first state
   \   00000070   0xEDC3 0x0A00      VSTR     S1,[R3, #0]
    100          
    101              return y;
   \   00000074   0xB003             ADD      SP,SP,#+12
   \   00000076   0x4770             BX       LR               ;; return
    102          }
    103          
    104          /**
    105           * @brief Direct-form II second-order-sections digital filtering routine
    106           *
    107           * @details Filters the input data by the provided filter. Direct-form II cascaded second-order sections implementation.
    108           * The leading denominator and numerator coefficients for each section are assumed to be normalized to 1. Each section's
    109           * output feeds the subsequent section's input.
    110           * In the figure below, z^-1 (z-inverse) represents a delay, the bi's represent numerator coefficients, and the ai's
    111           * represent denominator coefficients. g represents the section's gain. Each section has 2 states, corresponding to the 2
    112           * delays in each section. The 2 elements inside the biquad array for each section are arranged with element [0] corresponding
    113           * to the uppermost delay in the diagram (smallest delay), and element [1] corresponding to the bottom delay in the diagram
    114           * (largest delay).
    115           *
    116           *                             Section 0                                                     Section n
    117           *  u ---|g>--> ( - ) ------------o-----------> ( + ) ------> . . . ---|g>--> ( - ) ------------o-----------> ( + ) ----> y
    118           *                ^               |               ^                             ^               |               ^
    119           *                |               V               |                             |               V               |
    120           *                |            | z^-1 |           |                             |            | z^-1 |           |
    121           *                |               |               |                             |               |               |
    122           *              ( + ) <--<a0|-----o-----|b0>--> ( + )                         ( + ) <--<a0|-----o-----|b0>--> ( + )
    123           *                ^               |               ^                             ^               |               ^
    124           *                |               V               |                             |               V               |
    125           *                |            | z^-1 |           |                             |            | z^-1 |           |
    126           *                |               |               |                             |               |               |
    127           *                '------<a1|-----o-----|b1>------'                             '------<a1|-----o-----|b1>------'
    128           *
    129           *
    130           * @param u = input signal to be filtered
    131           * @param filter = filter object by which to filter the input signal
    132           *
    133           * @return The filtered output
    134           */
    135          #pragma optimize = none // Optimizations disabled to avoid faulty behavior with IAR C/C++ Compiler V2.60.5.1930 for Renesas RX

   \                                 In section .text, align 4, keep-with-next
    136          DIGITAL_FILTER_SIGNAL_DATA_TYPE DigitalFilter__DF2SOS(DIGITAL_FILTER_SIGNAL_DATA_TYPE u, DIGITAL_FILTER_SOS_TYPE filter, BIQUAD_STATE_TYPE *states)
    137          {
   \                     DigitalFilter__DF2SOS: (+1)
   \   00000000   0xB413             PUSH     {R0,R1,R4}
   \   00000002   0xEEF0 0x0A40      VMOV.F32 S1,S0
    138              uint8 i;
    139              sint8 j;
    140              DIGITAL_FILTER_SIGNAL_DATA_TYPE y = 0.0f;
   \   00000006   0xED9F 0x....      VLDR.W   S0,??DataTable3  ;; 0x0
    141          
    142              for(i = 0; i < filter.Num_Sections; i++)        // Loop over the filter sections
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x0018             MOVS     R0,R3
   \                     ??DigitalFilter__DF2SOS_0: (+1)
   \   0000000E   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x4298             CMP      R0,R3
   \   00000016   0xD259             BCS.N    ??DigitalFilter__DF2SOS_1
    143              {
    144                  u *= filter.Coeffs[i].Gain;                 // Apply section gain to section input
   \   00000018   0x9B00             LDR      R3,[SP, #+0]
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2414             MOVS     R4,#+20
   \   0000001E   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   00000022   0x691C             LDR      R4,[R3, #+16]
   \   00000024   0xEE01 0x4A10      VMOV     S2,R4
   \   00000028   0xEE60 0x0A81      VMUL.F32 S1,S1,S2
    145                  y = 0;
   \   0000002C   0xED9F 0x....      VLDR.W   S2,??DataTable3  ;; 0x0
   \   00000030   0xEEB0 0x0A41      VMOV.F32 S0,S2
    146                  for(j = (BIQUAD_FILTER_ORDER - 1); j >= 0; j--)     // Loop over filter states from bottom of diagram (largest delay)
   \   00000034   0x2301             MOVS     R3,#+1
   \   00000036   0x0019             MOVS     R1,R3
   \                     ??DigitalFilter__DF2SOS_2: (+1)
   \   00000038   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000003A   0x2900             CMP      R1,#+0
   \   0000003C   0xD43B             BMI.N    ??DigitalFilter__DF2SOS_3
    147                  {                                                   // to top (least delay) so that the states may be updated in sequence
    148                      u -= filter.Coeffs[i].Den[j] * states[i][j];
   \   0000003E   0x9B00             LDR      R3,[SP, #+0]
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2414             MOVS     R4,#+20
   \   00000044   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   00000048   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000004A   0xEB13 0x0381      ADDS     R3,R3,R1, LSL #+2
   \   0000004E   0x689C             LDR      R4,[R3, #+8]
   \   00000050   0xEE01 0x4A10      VMOV     S2,R4
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xEB12 0x03C0      ADDS     R3,R2,R0, LSL #+3
   \   0000005A   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000005C   0xEB13 0x0381      ADDS     R3,R3,R1, LSL #+2
   \   00000060   0xEDD3 0x1A00      VLDR     S3,[R3, #0]
   \   00000064   0xEE41 0x0A61      VMLS.F32 S1,S2,S3
    149                      y += filter.Coeffs[i].Num[j] * states[i][j];
   \   00000068   0x9B00             LDR      R3,[SP, #+0]
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x2414             MOVS     R4,#+20
   \   0000006E   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   00000072   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000074   0xF853 0x4021      LDR      R4,[R3, R1, LSL #+2]
   \   00000078   0xEE01 0x4A10      VMOV     S2,R4
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0xEB12 0x03C0      ADDS     R3,R2,R0, LSL #+3
   \   00000082   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000084   0xEB13 0x0381      ADDS     R3,R3,R1, LSL #+2
   \   00000088   0xEDD3 0x1A00      VLDR     S3,[R3, #0]
   \   0000008C   0xEE01 0x0A21      VMLA.F32 S0,S2,S3
    150          
    151                      if(j > 0)       // Do not try to fill the first state in this way
   \   00000090   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000092   0x2901             CMP      R1,#+1
   \   00000094   0xDB0D             BLT.N    ??DigitalFilter__DF2SOS_4
    152                      {
    153                      	states[i][j] = states[i][j-1];
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0xEB12 0x03C0      ADDS     R3,R2,R0, LSL #+3
   \   0000009C   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   0xEB12 0x04C0      ADDS     R4,R2,R0, LSL #+3
   \   000000A4   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   000000A6   0xEB14 0x0481      ADDS     R4,R4,R1, LSL #+2
   \   000000AA   0xF854 0x4C04      LDR      R4,[R4, #-4]
   \   000000AE   0xF843 0x4021      STR      R4,[R3, R1, LSL #+2]
    154                      }
    155                  }
   \                     ??DigitalFilter__DF2SOS_4: (+1)
   \   000000B2   0x1E49             SUBS     R1,R1,#+1
   \   000000B4   0xE7C0             B.N      ??DigitalFilter__DF2SOS_2
    156          
    157                  y += u;     // This is the final adder node. Leading numerator coefficient has been normalized to 1.
   \                     ??DigitalFilter__DF2SOS_3: (+1)
   \   000000B6   0xEE30 0x0A20      VADD.F32 S0,S0,S1
    158                  states[i][0] = u;        // fill first state
   \   000000BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BC   0xEB12 0x03C0      ADDS     R3,R2,R0, LSL #+3
   \   000000C0   0xEDC3 0x0A00      VSTR     S1,[R3, #0]
    159          
    160                  u = y;      // Set input in preparation for filtering in the next section
   \   000000C4   0xEEF0 0x0A40      VMOV.F32 S1,S0
    161              }
   \   000000C8   0x1C40             ADDS     R0,R0,#+1
   \   000000CA   0xE7A0             B.N      ??DigitalFilter__DF2SOS_0
    162          
    163              return y;
   \                     ??DigitalFilter__DF2SOS_1: (+1)
   \   000000CC   0xBC13             POP      {R0,R1,R4}
   \   000000CE   0x4770             BX       LR               ;; return
    164          }
    165          
    166          /**
    167           * @brief Direct-form II transposed single-section digital filtering routine
    168           *
    169           * @details Filters the input data by the provided filter. Direct-form II transposed implementation. The leading denominator
    170           * coefficient is assumed to be normalized to 1. Single-section filters are susceptible to numerical precision and
    171           * roundoff issues, especially for high sample rates, low bandwidth, and high order. In these situations, it is
    172           * better to utilize a second-order sections implementation.
    173           * In the figure below, z^-1 (z-inverse) represents a delay, the bi's represent numerator coefficients, and the ai's
    174           * represent denominator coefficients. A filter state exists for each delay. n is the filter order. The state array is
    175           * arranged with element [0] corresponding to the uppermost delay in the diagram (largest delay), and element [n]
    176           * corresponding to the bottom delay in the diagram (smallest delay).
    177           *
    178           *       u  --------o-----|b0>--->( + )-------------o-------> y
    179           *                  |               ^               |
    180           *                  |               |               |
    181           *                  |            | z^-1 |           |
    182           *                  |               ^               |
    183           *                  |               |               |
    184           *                  o-----|b1>--> ( + ) <--<a0|-----o
    185           *                  |               ^               |
    186           *                  |               |               |
    187           *                  |            | z^-1 |           |
    188           *                  |               ^               |
    189           *                  |               |               |
    190           *                  o-----|b2>--> ( + ) <--<a1|-----o
    191           *                  |               ^               |
    192           *                                  |
    193           *
    194           *                                  .
    195           *                                  .
    196           *                                  .
    197           *
    198           *                                  ^
    199           *                                  |
    200           *                  |            | z^-1 |           |
    201           *                  |               ^               |
    202           *                  |               |               |
    203           *                  o---|bn+1>--> ( + ) <--<an|-----o
    204           *
    205           * @param u = input signal to be filtered
    206           * @param filter = filter object by which to filter the input signal
    207           *
    208           * @return The filtered output
    209           */
    210          #pragma optimize = none     // Optimizations disabled to avoid faulty behavior with IAR C/C++ Compiler V2.60.5.1930 for Renesas RX

   \                                 In section .text, align 4, keep-with-next
    211          DIGITAL_FILTER_SIGNAL_DATA_TYPE DigitalFilter__DF2T(DIGITAL_FILTER_SIGNAL_DATA_TYPE u, DIGITAL_FILTER_SINGLE_SECTION_TYPE filter, DIGITAL_FILTER_SIGNAL_DATA_TYPE *states)
    212          {
   \                     DigitalFilter__DF2T: (+1)
   \   00000000   0xB407             PUSH     {R0-R2}
   \   00000002   0xEEF0 0x0A40      VMOV.F32 S1,S0
    213              DIGITAL_FILTER_SIGNAL_DATA_TYPE y = 0.0f;
   \   00000006   0xED9F 0x....      VLDR.W   S0,??DataTable3  ;; 0x0
    214              uint8 i;
    215          
    216              y = u * filter.Num[0] + states[0];
   \   0000000A   0x9900             LDR      R1,[SP, #+0]
   \   0000000C   0xED91 0x1A00      VLDR     S2,[R1, #0]
   \   00000010   0xEDD3 0x1A00      VLDR     S3,[R3, #0]
   \   00000014   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   00000018   0xEEB0 0x0A61      VMOV.F32 S0,S3
    217          
    218              for ( i = 0; i < filter.Order; i++)             // Loop over filter states, from top of diagram (largest delay) to bottom
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x0008             MOVS     R0,R1
   \                     ??DigitalFilter__DF2T_0: (+1)
   \   00000020   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD237             BCS.N    ??DigitalFilter__DF2T_1
    219              {                                               // (least delay) so that the states may be updated in sequence
    220                  if(i < (filter.Order - 1) )         // fill all but the
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000030   0x1E49             SUBS     R1,R1,#+1
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xDA1A             BGE.N    ??DigitalFilter__DF2T_2
    221                  {
    222                  	states[i] = states[i+1] + u * filter.Num[i+1] - y * filter.Den[i];
   \   00000036   0x9900             LDR      R1,[SP, #+0]
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000003E   0xED91 0x1A01      VLDR     S2,[R1, #+4]
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0xEB13 0x0180      ADDS     R1,R3,R0, LSL #+2
   \   00000048   0xEDD1 0x1A01      VLDR     S3,[R1, #+4]
   \   0000004C   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   00000050   0x9901             LDR      R1,[SP, #+4]
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000058   0xED91 0x1A00      VLDR     S2,[R1, #0]
   \   0000005C   0xEE40 0x1A41      VMLS.F32 S3,S0,S2
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0xEB13 0x0180      ADDS     R1,R3,R0, LSL #+2
   \   00000066   0xEDC1 0x1A00      VSTR     S3,[R1, #0]
   \   0000006A   0xE014             B.N      ??DigitalFilter__DF2T_3
    223                  }
    224                  else
    225                  {
    226                  	states[i] = u * filter.Num[i+1] - y * filter.Den[i];
   \                     ??DigitalFilter__DF2T_2: (+1)
   \   0000006C   0x9900             LDR      R1,[SP, #+0]
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000074   0xED91 0x1A01      VLDR     S2,[R1, #+4]
   \   00000078   0xEE20 0x1A81      VMUL.F32 S2,S1,S2
   \   0000007C   0x9901             LDR      R1,[SP, #+4]
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000084   0xEDD1 0x1A00      VLDR     S3,[R1, #0]
   \   00000088   0xEE00 0x1A61      VMLS.F32 S2,S0,S3
   \   0000008C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   0xEB13 0x0180      ADDS     R1,R3,R0, LSL #+2
   \   00000092   0xED81 0x1A00      VSTR     S2,[R1, #0]
    227                  }
    228              }
   \                     ??DigitalFilter__DF2T_3: (+1)
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \   00000098   0xE7C2             B.N      ??DigitalFilter__DF2T_0
    229              return y;
   \                     ??DigitalFilter__DF2T_1: (+1)
   \   0000009A   0xB003             ADD      SP,SP,#+12
   \   0000009C   0x4770             BX       LR               ;; return
    230          }
    231          
    232          /**
    233           * @brief Direct-form II transposed second-order-sections digital filtering routine
    234           *
    235           * @details Filters the input data by the provided filter. Direct-form II transposed cascaded second-order sections implementation.
    236           * The leading denominator and numerator coefficients for each section are assumed to be normalized to 1. Each section's
    237           * output feeds the subsequent section's input.
    238           * In the figure below, z^-1 (z-inverse) represents a delay, the bi's represent numerator coefficients, and the ai's
    239           * represent denominator coefficients. g represents the section's gain. Each section has 2 states, corresponding to the 2
    240           * delays in each section. The 2 elements inside the biquad array for each section are arranged with element [0] corresponding
    241           * to the uppermost delay in the diagram (largest delay), and element [1] corresponding to the bottom delay in the diagram
    242           * (smallest delay).
    243           *
    244           *                            Section 0                                                  Section n
    245           *    u ---|g>---o------------>( + )-------------o------->  . . .  ---|g>---o------------>( + )-------------o-------> y
    246           *               |               ^               |                          |               ^               |
    247           *               |               |               |                          |               |               |
    248           *               |            | z^-1 |           |                          |            | z^-1 |           |
    249           *               |               ^               |                          |               ^               |
    250           *               |               |               |                          |               |               |
    251           *               o-----|b0>--> ( + ) <--<a0|-----o                          o-----|b0>--> ( + ) <--<a0|-----o
    252           *               |               ^               |                          |               ^               |
    253           *               |               |               |                          |               |               |
    254           *               |            | z^-1 |           |                          |            | z^-1 |           |
    255           *               |               ^               |                          |               ^               |
    256           *               |               |               |                          |               |               |
    257           *               o-----|b1>--> ( + ) <--<a1|-----o                          o-----|b1>--> ( + ) <--<a1|-----o
    258           *
    259           * @param u = input signal to be filtered
    260           * @param filter = filter object by which to filter the input signal
    261           *
    262           * @return The filtered output
    263           */
    264          //#pragma optimize = none // Optimizations disabled to avoid faulty behavior with IAR C/C++ Compiler V2.60.5.1930 for Renesas RX

   \                                 In section .text, align 4, keep-with-next
    265          DIGITAL_FILTER_SIGNAL_DATA_TYPE DigitalFilter__DF2TSOS(DIGITAL_FILTER_SIGNAL_DATA_TYPE u, DIGITAL_FILTER_SOS_TYPE filter, BIQUAD_STATE_TYPE *states)
    266          {
   \                     DigitalFilter__DF2TSOS: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
    267              uint8 i,j;
    268              DIGITAL_FILTER_SIGNAL_DATA_TYPE y = 0.0f;
    269          
    270              for(i = 0; i < filter.Num_Sections; i++)
   \   00000002   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000006   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x0
   \   0000000A   0xB348             CBZ.N    R0,??DigitalFilter__DF2TSOS_0
   \   0000000C   0x9900             LDR      R1,[SP, #+0]
    271              {
    272                  u *= filter.Coeffs[i].Gain;
   \                     ??DigitalFilter__DF2TSOS_1: (+1)
   \   0000000E   0x690B             LDR      R3,[R1, #+16]
   \   00000010   0xEE00 0x3A90      VMOV     S1,R3
   \   00000014   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
    273          
    274                  y = u + states[i][0];
   \   00000018   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
    275          
    276                  for ( j = 0; j < BIQUAD_FILTER_ORDER; j++)            // loop over delays
    277                  {
    278                      if(j < (BIQUAD_FILTER_ORDER - 1) )
    279                      {
    280                      	states[i][j] = states[i][j+1] + u * filter.Coeffs[i].Num[j] - y * filter.Coeffs[i].Den[j];
   \   0000001C   0x680B             LDR      R3,[R1, #+0]
   \   0000001E   0xEE01 0x3A10      VMOV     S2,R3
   \   00000022   0x688B             LDR      R3,[R1, #+8]
   \   00000024   0xED92 0x2A01      VLDR     S4,[R2, #+4]
   \   00000028   0xEE70 0x0A20      VADD.F32 S1,S0,S1
   \   0000002C   0xEE01 0x3A90      VMOV     S3,R3
   \   00000030   0xEE00 0x2A01      VMLA.F32 S4,S0,S2
   \   00000034   0xEE00 0x2AE1      VMLS.F32 S4,S1,S3
   \   00000038   0xED82 0x2A00      VSTR     S4,[R2, #0]
    281                      }
    282                      else
    283                      {
    284                      	states[i][j] = u * filter.Coeffs[i].Num[j] - y * filter.Coeffs[i].Den[j];
   \   0000003C   0x684B             LDR      R3,[R1, #+4]
   \   0000003E   0xEE01 0x3A10      VMOV     S2,R3
   \   00000042   0x68CB             LDR      R3,[R1, #+12]
   \   00000044   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000048   0xEE01 0x3A10      VMOV     S2,R3
   \   0000004C   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000050   0xED82 0x0A01      VSTR     S0,[R2, #+4]
    285                      }
    286                  }
    287                  u = y;
    288              }
   \   00000054   0x3114             ADDS     R1,R1,#+20
   \   00000056   0x3208             ADDS     R2,R2,#+8
   \   00000058   0xEEB0 0x0A60      VMOV.F32 S0,S1
   \   0000005C   0x1E40             SUBS     R0,R0,#+1
   \   0000005E   0xD1D6             BNE.N    ??DigitalFilter__DF2TSOS_1
    289          
    290              return y;
   \                     ??DigitalFilter__DF2TSOS_0: (+1)
   \   00000060   0xEEB0 0x0A60      VMOV.F32 S0,S1
   \   00000064   0xB002             ADD      SP,SP,#+8
   \   00000066   0x4770             BX       LR               ;; return
    291          }
    292          
    293          /**
    294           *  @brief  Reset States of second-order-sections digital filter
    295           *
    296           *  @param filter = filter whose states are to be reset
    297           *
    298           */

   \                                 In section .text, align 2, keep-with-next
    299          void  DigitalFilter__ResetSOS(BIQUAD_STATE_TYPE *states, uint8 num_sections)
    300          {
    301              uint8 i,j;
    302          
    303              for(i = 0; i < num_sections; i++)
   \                     DigitalFilter__ResetSOS: (+1)
   \   00000000   0xB129             CBZ.N    R1,??DigitalFilter__ResetSOS_0
    304              {
    305                  for(j = 0; j < BIQUAD_FILTER_ORDER; j++)
    306                  {
    307                  	states[i][j] = 0.0f;
   \                     ??DigitalFilter__ResetSOS_1: (+1)
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x6002             STR      R2,[R0, #+0]
   \   00000006   0x6042             STR      R2,[R0, #+4]
    308                  }
    309              }
   \   00000008   0x3008             ADDS     R0,R0,#+8
   \   0000000A   0x1E49             SUBS     R1,R1,#+1
   \   0000000C   0xD1F9             BNE.N    ??DigitalFilter__ResetSOS_1
    310          }
   \                     ??DigitalFilter__ResetSOS_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    311          
    312          /**
    313           *  @brief  Reset States of single-section digital filter
    314           *
    315           *  @param filter = filter whose states are to be reset
    316           *
    317           */

   \                                 In section .text, align 2, keep-with-next
    318          void  DigitalFilter__ResetSingleSection(DIGITAL_FILTER_SINGLE_SECTION_TYPE filter, DIGITAL_FILTER_SIGNAL_DATA_TYPE *states)
    319          {
   \                     DigitalFilter__ResetSingleSection: (+1)
   \   00000000   0xB407             PUSH     {R0-R2}
    320              uint8 i;
    321          
    322              for(i = 0; i < filter.Order; i++)
   \   00000002   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xB1F9             CBZ.N    R1,??DigitalFilter__ResetSingleSection_0
   \   0000000A   0xF011 0x0203      ANDS     R2,R1,#0x3
   \   0000000E   0xD007             BEQ.N    ??DigitalFilter__ResetSingleSection_1
    323              {
    324              	states[i] = 0.0f;
   \                     ??DigitalFilter__ResetSingleSection_2: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0xF04F 0x0C00      MOV      R12,#+0
   \   00000016   0xF843 0xC020      STR      R12,[R3, R0, LSL #+2]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x1E52             SUBS     R2,R2,#+1
   \   0000001E   0xD1F7             BNE.N    ??DigitalFilter__ResetSingleSection_2
   \                     ??DigitalFilter__ResetSingleSection_1: (+1)
   \   00000020   0x0889             LSRS     R1,R1,#+2
   \   00000022   0xD012             BEQ.N    ??DigitalFilter__ResetSingleSection_0
   \                     ??DigitalFilter__ResetSingleSection_3: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0xB2C0             UXTB     R0,R0
   \   00000040   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    325              }
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x1E49             SUBS     R1,R1,#+1
   \   00000048   0xD1EC             BNE.N    ??DigitalFilter__ResetSingleSection_3
    326          }
   \                     ??DigitalFilter__ResetSingleSection_0: (+1)
   \   0000004A   0xB003             ADD      SP,SP,#+12
   \   0000004C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x00000000         DC32     0x0
    327          
    328          
    329          //=====================================================================================================================
    330          //-------------------------------------- Private Functions ------------------------------------------------------------
    331          //=====================================================================================================================
    332          
    333          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   DigitalFilter__DF2
      12   DigitalFilter__DF2SOS
      12   DigitalFilter__DF2T
       8   DigitalFilter__DF2TSOS
       0   DigitalFilter__ResetSOS
      12   DigitalFilter__ResetSingleSection


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
     120  DigitalFilter__DF2
     208  DigitalFilter__DF2SOS
     158  DigitalFilter__DF2T
     104  DigitalFilter__DF2TSOS
      16  DigitalFilter__ResetSOS
      78  DigitalFilter__ResetSingleSection

 
 688 bytes in section .text
 
 688 bytes of CODE memory

Errors: none
Warnings: none
