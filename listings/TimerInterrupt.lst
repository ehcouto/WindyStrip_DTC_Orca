###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        19/Nov/2024  13:15:51
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  XCategory\Driver\TimerInterrupt\TimerInterrupt.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        TimerInterrupt.obj -l ..\listings\TimerInterrupt.lst
#        XCategory\Driver\TimerInterrupt\TimerInterrupt.c
#    List file    =  ..\listings\TimerInterrupt.lst
#    Object file  =  TimerInterrupt.obj
#
###############################################################################

C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Driver\TimerInterrupt\TimerInterrupt.c
      1          /**
      2           *	  @file
      3           *    @brief    Timer Interrupt GDM module for MKV03X implements the
      4           *              Timer Interrupt Standard API (Application Programming Interface)
      5           *    @details  Timer Interrupt module gives the Timer interrupt service to the application,
      6           *              basically it is initialized and after that every defined interval an interruption is generated
      7           *              which drives the slotted Architecture where user can execute the Application
      8           *
      9           *  $Header: TimerInterrupt.c 1.3 2015/08/11 08:04:23EDT Natak Rahul (NATAKRB) Exp  $
     10           *  @copyright  Copyright 2012-$Date: 2015/08/11 08:04:23EDT $. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
     11           *
     12           */
     13          //-------------------------------------- Include Files ----------------------------------------------------------------
     14          #include "C_Extensions.h"
     15          #include "Micro.h"
     16          #include "TimerInterrupt.h"
     17          #include "string.h"
     18          
     19          //-------------------------------------- PRIVATE (Variables, Constants & Defines) -------------------------------------
     20          #ifndef SYSTICK_PREEMPTION_PRIORITY
     21              #define SYSTICK_PREEMPTION_PRIORITY 1
     22          #endif
     23          
     24          #ifndef SYSTICK_SUB_PRIORITY
     25              #define SYSTICK_SUB_PRIORITY        1
     26          #endif
     27          
     28          #define DEF_1MHZ                			1000000			//It generates a Timer clock freq = 1MHz
     29          #define DEF_1KHZ                            1000			//It generates a Timer clock freq = 1KHz
     30          
     31          #define TIMER_RELOAD_COUNT()            (Micro__GetClock()->HCLK_Frequency / (DEF_1MHZ/INTERRUPT_INTERVAL));
     32          #define TIMER_RELOAD_LONG_COUNT()       (Micro__GetClock()->HCLK_Frequency / (DEF_1MHZ/TIMERITERUPT_LONG_INTERVAL_IN_MS));
     33          #define HCLK_IN_MHZ()                   (Micro__GetClock()->HCLK_Frequency / DEF_1MHZ)
     34          //=====================================================================================================================
     35          //-------------------------------------- Public Functions -------------------------------------------------------------
     36          //=====================================================================================================================
     37          //---------------------------------------------------------------------------------------------------------------------
     38          /**
     39           *    @brief    This method initializes the Timer interrupt module
     40           *    @details  1. This method should be called after initialization of all the modules like micro, Gpio, Hmi, Lsi,
     41           *    				Wide etc.
     42           *
     43           *              2. This function initializes the system tick timer and its interrupt and start the system tick timer.
     44           *		           Counter is in free running mode to generate periodical interrupts.
     45           *
     46           *		        3. You can change the SysTick IRQ priority by changing the below macro -
     47           *		        	#define SYSTICK_PREEMPTION_PRIORITY		0
     48           *
     49           *		        4. SysTick time base uses the below formula:
     50           *		                 Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
     51           */

   \                                 In section .text, align 2, keep-with-next
     52          void TimerInterrupt__Initialize(void)
     53          {
   \                     TimerInterrupt__Initialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     54          
     55          	//Disable the System Core timer
     56          	SYSTICK.CTRL &= SYSTICK_COUNTER_DISABLE;
   \   00000002   0x....             LDR.N    R4,??DataTable1  ;; 0xe000e010
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0x0040             LSLS     R0,R0,#+1
   \   0000000A   0x6020             STR      R0,[R4, #+0]
     57          
     58          	 //AHB clock divided by 8 selected as SysTick clock source.
     59          	SYSTICK.LOAD  = TIMER_RELOAD_COUNT();
   \   0000000C   0x.... 0x....      BL       Micro__GetClock
   \   00000010   0xF44F 0x617A      MOV      R1,#+4000
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000001A   0x6060             STR      R0,[R4, #+4]
     60          
     61          	//Set Priority for SysTick_IRQ_CHANNEL
     62          	Micro__NVICEnableIRQ (SYSTICK_IRQ_CHANNEL, SYSTICK_PREEMPTION_PRIORITY, SYSTICK_SUB_PRIORITY);
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0xF04F 0x30FF      MOV      R0,#-1
   \   00000024   0x.... 0x....      BL       Micro__NVICEnableIRQ
     63          
     64          	SYSTICK.VAL   = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x60A0             STR      R0,[R4, #+8]
     65          
     66          	// Enable SysTick IRQ CLock source and SysTick Timer
     67          	SYSTICK.CTRL  = SYSTICK_CTRL_CLKSOURCE_MSK | SYSTICK_CTRL_TICKINT_MSK | SYSTICK_CTRL_ENABLE_MSK;
   \   0000002C   0x2007             MOVS     R0,#+7
   \   0000002E   0x6020             STR      R0,[R4, #+0]
     68          
     69          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
     70          
     71          
     72          //---------------------------------------------------------------------------------------------------------------------
     73          /**
     74           *    @brief    It sets the timer interrupt for long duration
     75           *    @details  Long interval value is depends on the 'TIMERITERUPT_LONG_INTERVAL_IN_MS' macro value
     76           */

   \                                 In section .text, align 2, keep-with-next
     77          void TimerInterrupt__SetLongInterval(void)
     78          {
   \                     TimerInterrupt__SetLongInterval: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     79          	//Disable the System Core timer
     80          	SYSTICK.CTRL &= SYSTICK_COUNTER_DISABLE;
   \   00000002   0x....             LDR.N    R4,??DataTable1  ;; 0xe000e010
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0x0040             LSLS     R0,R0,#+1
   \   0000000A   0x6020             STR      R0,[R4, #+0]
     81          
     82          	 //AHB clock divided by 8 selected as SysTick clock source.
     83              SYSTICK.LOAD  = TIMER_RELOAD_LONG_COUNT();
   \   0000000C   0x.... 0x....      BL       Micro__GetClock
   \   00000010   0x2164             MOVS     R1,#+100
   \   00000012   0x6840             LDR      R0,[R0, #+4]
   \   00000014   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000018   0x6060             STR      R0,[R4, #+4]
     84          
     85              //Configure the SysTick handler priority
     86              Micro__NVICEnableIRQ (SYSTICK_IRQ_CHANNEL, SYSTICK_PREEMPTION_PRIORITY, SYSTICK_SUB_PRIORITY);
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0xF04F 0x30FF      MOV      R0,#-1
   \   00000022   0x.... 0x....      BL       Micro__NVICEnableIRQ
     87          
     88              SYSTICK.VAL   = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x60A0             STR      R0,[R4, #+8]
     89          
     90              // Enable SysTick IRQ CLock source and SysTick Timer
     91              SYSTICK.CTRL  = SYSTICK_CTRL_CLKSOURCE_MSK | SYSTICK_CTRL_TICKINT_MSK | SYSTICK_CTRL_ENABLE_MSK;
   \   0000002A   0x2007             MOVS     R0,#+7
   \   0000002C   0x6020             STR      R0,[R4, #+0]
     92          
     93              SERVICE_WATCHDOG();
   \   0000002E   0xF3EF 0x8010      MRS      R0,PRIMASK
   \   00000032   0xB672             CPSID    I
   \   00000034   0x....             LDR.N    R1,??DataTable1_1  ;; 0x4005200c
   \   00000036   0xF24A 0x6202      MOVW     R2,#+42498
   \   0000003A   0x800A             STRH     R2,[R1, #+0]
   \   0000003C   0xF24B 0x4280      MOVW     R2,#+46208
   \   00000040   0x800A             STRH     R2,[R1, #+0]
   \   00000042   0xF380 0x8810      MSR      PRIMASK,R0
     94          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x4005200C         DC32     0x4005200c
     95          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TimerInterrupt__Initialize
         8   -> Micro__GetClock
         8   -> Micro__NVICEnableIRQ
       8   TimerInterrupt__SetLongInterval
         8   -> Micro__GetClock
         8   -> Micro__NVICEnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      50  TimerInterrupt__Initialize
      72  TimerInterrupt__SetLongInterval

 
 130 bytes in section .text
 
 130 bytes of CODE memory

Errors: none
Warnings: none
