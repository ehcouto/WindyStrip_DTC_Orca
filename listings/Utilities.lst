###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        19/Nov/2024  13:15:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  XCategory\Common\Utilities\Utilities.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        Utilities.obj -l ..\listings\Utilities.lst
#        XCategory\Common\Utilities\Utilities.c
#    List file    =  ..\listings\Utilities.lst
#    Object file  =  Utilities.obj
#
###############################################################################

C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Common\Utilities\Utilities.c
      1          /**
      2           *  @file
      3           *
      4           *  @brief      modules which is a collection of commonly used operations with:\n
      5           *              Merging Bytes\n
      6           *              Manipulating Bits in arrays.
      7           *
      8           *  @details    The function sin this file are independent of microcontroller, endianess
      9           *
     10           *
     11           *  $Header: Utilities.c 1.1 2015/03/17 16:33:04EDT MANOEL GARBUIO DE SOUZA (SOUZAMG) Exp  $
     12           *
     13           *  @copyright  Copyright 2011-$Date: 2015/03/17 16:33:04EDT $. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
     14           */
     15          //---------------------------------------------------------------------------------------------------------------------
     16          //---------------------------------------------------------------------------------------------------------------------
     17          //-------------------------------------- Include Files ----------------------------------------------------------------
     18          #include "C_Extensions.h"
     19          #include "Utilities.h"
     20          //-------------------------------------- PUBLIC (Variables) -----------------------------------------------------------
     21          

   \                                 In section .text, align 4, keep-with-next
     22          static const unsigned short BYTE_SET_MASK[] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
   \                     BYTE_SET_MASK:
   \   00000000   0x0001 0x0002      DC16 1, 2, 4, 8, 16, 32, 64, 128
   \              0x0004 0x0008
   \              0x0010 0x0020
   \              0x0040 0x0080

   \                                 In section .text, align 4, keep-with-next
     23          static const unsigned short BYTE_CLR_MASK[] = {0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F};
   \                     BYTE_CLR_MASK:
   \   00000000   0x00FE 0x00FD      DC16 254, 253, 251, 247, 239, 223, 191, 127
   \              0x00FB 0x00F7
   \              0x00EF 0x00DF
   \              0x00BF 0x007F
     24          
     25          //-------------------------------------- PRIVATE (Variables, Constants & Defines) -------------------------------------
     26          
     27          //-------------------------------------- PRIVATE (Function Prototypes) ------------------------------------------------
     28          
     29          
     30          //=====================================================================================================================
     31          //-------------------------------------- Public Functions -------------------------------------------------------------
     32          //=====================================================================================================================
     33          //---------------------------------------------------------------------------------------------------------------------
     34          /**
     35           * @brief This method extracts a 32bits unsigned long from an unsigned char array
     36           * @param array unsigned char * pointer to the source array
     37           * @return unsigned long resulting of the data extraction.
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          unsigned long int Utilities__ConvertArrayTo32bits(unsigned char * array)
     40          {
     41              unsigned long int retval;
     42              retval = ((unsigned long int)array[0]) << 24;
     43              retval += ((unsigned long int)array[1]) << 16;
     44              retval += ((unsigned long int)array[2]) << 8;
     45              retval += ((unsigned long int)array[3]);
     46              return (retval);
   \                     Utilities__ConvertArrayTo32bits: (+1)
   \   00000000   0x7842             LDRB     R2,[R0, #+1]
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xEB02 0x6101      ADD      R1,R2,R1, LSL #+24
   \   0000000A   0x7882             LDRB     R2,[R0, #+2]
   \   0000000C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000000E   0xEB01 0x2102      ADD      R1,R1,R2, LSL #+8
   \   00000012   0x1808             ADDS     R0,R1,R0
   \   00000014   0x4770             BX       LR               ;; return
     47          }
     48          
     49          //---------------------------------------------------------------------------------------------------------------------
     50          /**
     51           * @brief This method extracts a 24bits unsigned long from an unsigned char array
     52           * @param array unsigned char *pointer to the source array.
     53           * @return unsigned long resulting of the data extraction.
     54           */

   \                                 In section .text, align 2, keep-with-next
     55          unsigned long int Utilities__ConvertArrayTo24bits(unsigned char * array)
     56          {
     57              unsigned long int retval;
     58              retval = ((unsigned long int)array[0]) << 16;
     59              retval += ((unsigned long int)array[1]) << 8;
     60              retval += ((unsigned long int)array[2]);
     61              return (retval);
   \                     Utilities__ConvertArrayTo24bits: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x7842             LDRB     R2,[R0, #+1]
   \   00000004   0x7880             LDRB     R0,[R0, #+2]
   \   00000006   0x0212             LSLS     R2,R2,#+8
   \   00000008   0xEB02 0x4101      ADD      R1,R2,R1, LSL #+16
   \   0000000C   0x1808             ADDS     R0,R1,R0
   \   0000000E   0x4770             BX       LR               ;; return
     62          }
     63          
     64          
     65          //---------------------------------------------------------------------------------------------------------------------
     66          /**
     67           * @brief This method merges 2 bytes into a unsigned short int 16bits
     68           * @param msb most significant byte
     69           * @param lsb least significant byte
     70           * @return unsigned short with it the result of the merging.
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          unsigned short int Utilities__Merg2BytesTo16bits(unsigned char msb, unsigned char lsb)
     73          {
     74              unsigned short int retval;
     75              retval = ((unsigned short int)msb) << 8;
     76              retval += ((unsigned short int)lsb);
     77              return (retval);
   \                     Utilities__Merg2BytesTo16bits: (+1)
   \   00000000   0x0200             LSLS     R0,R0,#+8
   \   00000002   0xFA50 0xF081      UXTAB    R0,R0,R1
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x4770             BX       LR               ;; return
     78          }
     79          
     80          //---------------------------------------------------------------------------------------------------------------------
     81          /**
     82           * @brief This method extracts a 16bits unsigned short from an unsigned char array
     83           * @param array unsigned char *pointer to the source array.
     84           * @return unsigned short resulting of the data extraction.
     85           */

   \                                 In section .text, align 2, keep-with-next
     86          unsigned short int Utilities__ConvertArrayTo16bits(unsigned char * array)
     87          {
     88              return (Utilities__Merg2BytesTo16bits(array[0],array[1]));
   \                     Utilities__ConvertArrayTo16bits: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0xEB00 0x2001      ADD      R0,R0,R1, LSL #+8
   \   00000008   0xB280             UXTH     R0,R0
   \   0000000A   0x4770             BX       LR               ;; return
     89          }
     90          
     91          //---------------------------------------------------------------------------------------------------------------------
     92          /**
     93           * @brief This method is used to set a bit within an unsigned char array
     94           * @details the bit would vary from 0 to 255 which means the array can be only 32bytes long
     95           * @param array pointer to the unsigned char array
     96           * @param bit bit in the array (0 to 255)
     97           * @param value value to be set in the bit (0 / 1)
     98           */

   \                                 In section .text, align 2, keep-with-next
     99          void Utilities__SetBitInArray(unsigned char * array, unsigned char bit, unsigned char value)
    100          {
    101              unsigned char s_byte;
    102              unsigned char s_bit;
    103              s_byte = bit / 8;
   \                     Utilities__SetBitInArray: (+1)
   \   00000000   0x08CB             LSRS     R3,R1,#+3
    104              s_bit = bit % 8;
   \   00000002   0xF001 0x0107      AND      R1,R1,#0x7
    105          
    106              if (value)
   \   00000006   0xF813 0xC000      LDRB     R12,[R3, R0]
   \   0000000A   0xB13A             CBZ.N    R2,??Utilities__SetBitInArray_0
    107              {
    108                  array[s_byte] |= BYTE_SET_MASK[s_bit];
   \   0000000C   0x.... 0x....      ADR.W    R2,BYTE_SET_MASK
   \   00000010   0xF832 0x1011      LDRH     R1,[R2, R1, LSL #+1]
   \   00000014   0xEA41 0x010C      ORR      R1,R1,R12
   \   00000018   0x5419             STRB     R1,[R3, R0]
    109              }
    110              else
    111              {
    112                  array[s_byte] &= BYTE_CLR_MASK[s_bit];
    113              }
    114          
    115          }
   \   0000001A   0x4770             BX       LR
   \                     ??Utilities__SetBitInArray_0: (+1)
   \   0000001C   0x.... 0x....      ADR.W    R2,BYTE_CLR_MASK
   \   00000020   0xF832 0x1011      LDRH     R1,[R2, R1, LSL #+1]
   \   00000024   0xEA01 0x010C      AND      R1,R1,R12
   \   00000028   0x5419             STRB     R1,[R3, R0]
   \   0000002A   0x4770             BX       LR               ;; return
    116          
    117          //---------------------------------------------------------------------------------------------------------------------
    118          /**
    119           * @brief This method is used to set a bit within an unsigned char array
    120           * @details the bit would vary from 0 to 255 which means the array can be only 32bytes long
    121           * @param array pointer to the unsigned char array
    122           * @param bit bit in the array (0 to 255)
    123           * @return Value of the specific bit
    124           */

   \                                 In section .text, align 2, keep-with-next
    125          unsigned char Utilities__GetBitInArray(unsigned char * array, unsigned char bit)
    126          {
    127              if (array[bit / 8] & BYTE_SET_MASK[bit % 8])
   \                     Utilities__GetBitInArray: (+1)
   \   00000000   0x08CA             LSRS     R2,R1,#+3
   \   00000002   0xF001 0x0107      AND      R1,R1,#0x7
   \   00000006   0x5C10             LDRB     R0,[R2, R0]
   \   00000008   0x.... 0x....      ADR.W    R2,BYTE_SET_MASK
   \   0000000C   0xF832 0x1011      LDRH     R1,[R2, R1, LSL #+1]
   \   00000010   0x4208             TST      R0,R1
   \   00000012   0xD001             BEQ.N    ??Utilities__GetBitInArray_0
    128              {
    129                  return (TRUE);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x4770             BX       LR
    130              }
    131              else
    132              {
    133                  return (FALSE);
   \                     ??Utilities__GetBitInArray_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x4770             BX       LR               ;; return
    134              }
    135          }
    136          
    137          //---------------------------------------------------------------------------------------------------------------------
    138          /**
    139           * @brief This method is used to toggle a bit within an unsigned char array
    140           * @details the bit would vary from 0 to 255 which means the array can be only 32bytes long
    141           * @param array pointer to the unsigned char array
    142           * @param bit bit in the array (0 to 255)
    143           */

   \                                 In section .text, align 2, keep-with-next
    144          void Utilities__ToggleBitInArray(unsigned char * array, unsigned char bit)
    145          {
    146              array[bit / 8] ^= BYTE_SET_MASK[bit % 8];
   \                     Utilities__ToggleBitInArray: (+1)
   \   00000000   0x08CA             LSRS     R2,R1,#+3
   \   00000002   0x.... 0x....      ADR.W    R12,BYTE_SET_MASK
   \   00000006   0x5C13             LDRB     R3,[R2, R0]
   \   00000008   0xF001 0x0107      AND      R1,R1,#0x7
   \   0000000C   0xF83C 0x1011      LDRH     R1,[R12, R1, LSL #+1]
   \   00000010   0x4059             EORS     R1,R1,R3
   \   00000012   0x5411             STRB     R1,[R2, R0]
    147          }
   \   00000014   0x4770             BX       LR               ;; return
    148          
    149          //---------------------------------------------------------------------------------------------------------------------
    150          /**
    151           * @brief This method counts the number of bits with a value of one in an array
    152           * @param array unsigned char *pointer to the source array.
    153           * @param size number of bytes in the array.
    154           * @return The number of bits with a value of one in the array.
    155           */

   \                                 In section .text, align 4, keep-with-next
    156          unsigned short int Utilities__CountOneBitsInArray(unsigned char * array, unsigned char size)
    157          {
   \                     Utilities__CountOneBitsInArray: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    158              unsigned short int retval;
    159              unsigned char byte_index;
    160              unsigned char byte_value;
    161              unsigned char bit_mask;
    162          
    163              retval = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    164              for (byte_index = 0; byte_index < size; byte_index++)
   \   00000004   0xB161             CBZ.N    R1,??Utilities__CountOneBitsInArray_0
    165              {
    166                  byte_value = array[byte_index];
   \                     ??Utilities__CountOneBitsInArray_1: (+1)
   \   00000006   0x7803             LDRB     R3,[R0, #+0]
    167                  for (bit_mask = 0x80; bit_mask > 0; bit_mask >>= 1)
   \   00000008   0xF05F 0x0480      MOVS.W   R4,#+128
    168                  {
    169                      if ((byte_value & bit_mask) > 0)
   \                     ??Utilities__CountOneBitsInArray_2: (+1)
   \   0000000C   0xEA04 0x0503      AND      R5,R4,R3
   \   00000010   0x2D01             CMP      R5,#+1
   \   00000012   0xBFA8             IT       GE 
    170                      {
    171                          retval++;
   \   00000014   0x1C52             ADDGE    R2,R2,#+1
    172                      }
    173                  }
   \   00000016   0x0864             LSRS     R4,R4,#+1
   \   00000018   0xD1F8             BNE.N    ??Utilities__CountOneBitsInArray_2
    174              }
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x1E49             SUBS     R1,R1,#+1
   \   0000001E   0xD1F2             BNE.N    ??Utilities__CountOneBitsInArray_1
    175              return retval;
   \                     ??Utilities__CountOneBitsInArray_0: (+1)
   \   00000020   0xBC30             POP      {R4,R5}
   \   00000022   0xB290             UXTH     R0,R2
   \   00000024   0x4770             BX       LR               ;; return
    176          }
    177          
    178          //=====================================================================================================================
    179          //-------------------------------------- Private Functions ------------------------------------------------------------
    180          //=====================================================================================================================
    181          
    182          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Utilities__ConvertArrayTo16bits
       0   Utilities__ConvertArrayTo24bits
       0   Utilities__ConvertArrayTo32bits
       8   Utilities__CountOneBitsInArray
       0   Utilities__GetBitInArray
       0   Utilities__Merg2BytesTo16bits
       0   Utilities__SetBitInArray
       0   Utilities__ToggleBitInArray


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  BYTE_CLR_MASK
      16  BYTE_SET_MASK
      12  Utilities__ConvertArrayTo16bits
      16  Utilities__ConvertArrayTo24bits
      22  Utilities__ConvertArrayTo32bits
      38  Utilities__CountOneBitsInArray
      28  Utilities__GetBitInArray
      10  Utilities__Merg2BytesTo16bits
      44  Utilities__SetBitInArray
      22  Utilities__ToggleBitInArray

 
 224 bytes in section .text
 
 224 bytes of CODE memory

Errors: none
Warnings: none
