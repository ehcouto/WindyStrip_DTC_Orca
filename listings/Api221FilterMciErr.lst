###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        19/Nov/2024  13:15:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        ProjectSpecific\Application\Api221_Filter_Mci_Err\Api221FilterMciErr.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        Api221FilterMciErr.obj -l ..\listings\Api221FilterMciErr.lst
#        ProjectSpecific\Application\Api221_Filter_Mci_Err\Api221FilterMciErr.c
#    List file    =  ..\listings\Api221FilterMciErr.lst
#    Object file  =  Api221FilterMciErr.obj
#
###############################################################################

C:\Data\Python\Windy_sBpm_Floating\source\ProjectSpecific\Application\Api221_Filter_Mci_Err\Api221FilterMciErr.c
      1          /**
      2           * @file        Api221FilterMciErr.c
      3           * @brief       Api221 Filter mci errors - module to be placed between MCI and API221 to filter
      4           *              error messages. E.g., when ACU disables motor control via class B and mci class A
      5           *              throws an error.
      6           *
      7           * @copyright   Copyright 2017 Whirlpool Corporation.  All rights reserved - CONFIDENTIAL.
      8           *
      9           */
     10          
     11          //-------------------------------------- Include Files ----------------------------------------------------------------
     12          #include "Compiler_defs.h"                          //!< Compiler definition

  #if (MICRO_IS_LITTLE_ENDIAN == 1)
       ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Driver\API\Micro\C_Extensions.h",256  Remark[Pe193]: 
          zero used for undefined preprocessing identifier
          "MICRO_IS_LITTLE_ENDIAN"

  #if (MICRO_IS_LITTLE_ENDIAN == 1)
       ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Driver\API\Micro\C_Extensions.h",296  Remark[Pe193]: 
          zero used for undefined preprocessing identifier
          "MICRO_IS_LITTLE_ENDIAN"

  #if (MICRO_IS_LITTLE_ENDIAN == 1)
       ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Driver\API\Micro\C_Extensions.h",321  Remark[Pe193]: 
          zero used for undefined preprocessing identifier
          "MICRO_IS_LITTLE_ENDIAN"
     13          #include "C_Extensions.h"                           //!< C extension
     14          #include "SRAPI020Safety_prm.h"                     //!< Class B API020 (Safety relevant communication - parameters)

  PACKED typedef struct API019_APPLIANCE_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",42  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_BOARD_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",50  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_TEST_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",141  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_SERVICE_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",150  Remark[Pe082]: 
          storage class is not first

  PACKED typedef struct API019_PROJECT_DATA_STRUCT
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Application\Reveal_APIs\API019ProductInfo\API019ProductInfo_Defs.h",183  Remark[Pe082]: 
          storage class is not first
     15          #include "SRAPI020Safety.h"                         //!< Class B API020 (Safety relevant communication)
     16          #include "Mci.h"                                    //!< Mci - Motor Control Interface
     17          #include "Api221FilterMciErr.h"                     //!< Include the api221 filter header file
     18          
     19          
     20          
     21          
     22          //---------------------------------------------------------------------------------------------------------------------
     23          /*
     24           *  @brief      Get all MCI Errors list but force2stop in the case it was disabled by SRAPI020
     25           *  @param      Motor indexer
     26           *
     27          @startuml
     28              title Force2Stop Bit Management
     29              hide footbox
     30              autonumber
     31          
     32              box "ACU" #DDDDFF
     33                  participant "SRAPI020Safety" as ACU020
     34                  participant "API221MotionCtrl" as ACU221
     35              end box
     36              box "MCU" #DDFFDD
     37                  participant "SRAPI020Safety" as MCU020
     38                  participant "API221MotionCtrl" as MCU221
     39                  participant "Api221FilterMciErr" as TBD
     40                  participant "MotorActivity And\nMotion Modules" as MA
     41                  participant "SR Motor\nModules" as SRMCU
     42                  participant MCI
     43              end box
     44          
     45              == Stop Using API020 ==
     46          
     47              ACU020 --> MCU020 : Disable Motor
     48              MCU020 <- SRMCU : SRAPI020Safety__GetRxValue()
     49              MCU020 --> SRMCU : Ok, RxValue (Disabled)
     50              SRMCU -> MCI : Disable Motor
     51              MCU221 -> TBD : Get MCU Errors
     52              TBD -> MCI : Get MCI Errors
     53              MCI --> TBD : All MCI Errors
     54              'TBD -> SRMCU : Was Disabled Received?
     55              'TBD <-- SRMCU : Yes/No
     56              MCU020 <- TBD : SRAPI020Safety__GetRxValue()
     57              alt disabled
     58                  MCU020 --> TBD : Ok, RxValue (Disabled)
     59                  MCU221 <-- TBD : No Errors
     60                  TBD -> MA : Clear Errors
     61              else else
     62                  MCU020 --> TBD : Not Ok or RxValue (Enabled)
     63                  loop for each potential MCI Error
     64                      TBD -> MCI : Mci__GetError()
     65                      TBD <-- MCI : FALSE
     66                  end loop
     67                  MCU221 <-- TBD : Errors
     68              end alt
     69          
     70              == Normal Run Operation ==
     71          
     72              ACU221 -> MCU221 : Run
     73              MCU221 -> MA : Run
     74              MA -> MCI : Run
     75              loop during normal operation
     76                  alt if API020 sends a value
     77                      ACU020 --> MCU020 : Enable Motor
     78                  end alt
     79                  MCU020 <- SRMCU : SRAPI020Safety__GetRxValue()
     80                  MCU020 --> SRMCU : Ok, RxValue (Enabled)
     81                  SRMCU -> MCI : Enable Motor
     82                  MCU221 -> TBD : Get MCU Errors
     83                  loop for each potential MCI Error
     84                      TBD -> MCI : Mci__GetError()
     85                      TBD <-- MCI : FALSE
     86                  end loop
     87                  MCU221 <-- TBD : Errors
     88              end loop
     89          
     90              == Failed API020 Communications ==
     91          
     92              alt if API020 sends a value
     93                  ACU020 --> MCU020 : Corrupt Message
     94                  MCU020 -> MCU020 : Corrupt RxValue
     95              else if API020 timeout expires
     96                  MCU020 -> MCU020 : Corrupt RxValue
     97              end alt
     98              MCU020 <- SRMCU : SRAPI020Safety__GetRxValue()
     99              MCU020 --> SRMCU : Not Ok
    100              SRMCU -> MCI : Disable Motor
    101          
    102          @enduml
    103           *
    104           */

   \                                 In section .text, align 2, keep-with-next
    105          uint32 Api221FilterMciErr__GetMCUErrorList(MOTOR_ENUM_TYPE motor)
    106          {
   \                     Api221FilterMciErr__GetMCUErrorList: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x4604             MOV      R4,R0
    107              uint8 srapi20_alive;
    108              SRAPI020_SPEED_MONITOR_RX_BIT_TYPE speed_monitor_status_api20_rx;
    109              uint32 mci_errors;
    110              uint32 temp_u32;
    111          
    112              // Get all errors from mci
    113              mci_errors = Mci__GetErrorList(motor);
   \   00000006   0x.... 0x....      BL       Mci__GetErrorList
   \   0000000A   0x4605             MOV      R5,R0
    114          
    115              // alive means CRC matched, timeout not expired and packet sequence is correct.
    116              srapi20_alive = SRAPI020Safety__GetRxValue(API020_RX_SPEED_MONITOR_STATUS, &speed_monitor_status_api20_rx);
    117          
    118              // Check if safe communication is still alive
    119              if(srapi20_alive)
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       SRAPI020Safety__GetRxValue
   \   00000014   0xB180             CBZ.N    R0,??Api221FilterMciErr__GetMCUErrorList_0
    120              {
    121                  // If motor is enabled from ACU via class B
    122                  if(BIT_TEST(speed_monitor_status_api20_rx,SRAPI020_SPEED_MONITOR__RX_ENABLED))
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0x07C0             LSLS     R0,R0,#+31
   \   0000001C   0xD40C             BMI.N    ??Api221FilterMciErr__GetMCUErrorList_0
    123                  {
    124                      // left blank intentionally by doing nothing here, just let
    125                      // the mci_error go thru with all errors read from mci
    126                  }
    127                  else // If motor is disabled from ACU via class B
    128                  {
    129                      if(mci_errors)
   \   0000001E   0xB15D             CBZ.N    R5,??Api221FilterMciErr__GetMCUErrorList_0
    130                      {
    131                          // Return all errors from Mci but force2stop
    132                          temp_u32 = mci_errors & ((1UL<<MCI_ERROR_ANY_ERROR_FOUND) + (1UL<<MCI_ERROR_CLASS_B_FORCE2STOP));
    133                          if(temp_u32 == mci_errors)
   \   00000020   0x....             LDR.N    R0,??DataTable1  ;; 0x40001
   \   00000022   0x4028             ANDS     R0,R0,R5
   \   00000024   0x42A8             CMP      R0,R5
   \   00000026   0xBF04             ITT      EQ 
    134                          {
    135                              // Clears all errors in Mci in the case that force2stop here is the only fault
    136                              Mci__ClearError(motor);
   \   00000028   0x4620             MOVEQ    R0,R4
   \   0000002A   0x.... 0x....      BLEQ     Mci__ClearError
    137                          }
    138          
    139                          // Clear bit in case, no need to check if it was set (save computing time)
    140                          BIT_CLR(mci_errors, MCI_ERROR_CLASS_B_FORCE2STOP);
   \   0000002E   0xF425 0x2580      BIC      R5,R5,#0x40000
    141          
    142                          // Check if bit any error found was set due to force stop error
    143                          if(mci_errors == (1<<MCI_ERROR_ANY_ERROR_FOUND))
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xBF08             IT       EQ 
    144                          {
    145                              // clear all error variable because the only error found
    146                              // was the force 2 stop which is already cleared in mci_error variable
    147                              mci_errors = 0;
   \   00000036   0x2500             MOVEQ    R5,#+0
    148                          }
    149                      }
    150                  }
    151              }
    152          
    153              return(mci_errors);
   \                     ??Api221FilterMciErr__GetMCUErrorList_0: (+1)
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0xB001             ADD      SP,SP,#+4
   \   0000003C   0xBD30             POP      {R4,R5,PC}       ;; return
    154          }
    155          
    156          
    157          
    158          
    159          //---------------------------------------------------------------------------------------------------------------------
    160          /*
    161           * @brief       Get a specific error
    162           * @details     Force 2 stop error shall not be reported in the case SRAPI020 disabled the motor
    163           * @return      TRUE: specific error was found; FALSE: no error found
    164           *
    165           */

   \                                 In section .text, align 2, keep-with-next
    166          uint8 Api221FilterMciErr__GetError(MOTOR_ENUM_TYPE motor, MCI_ERROR_TYPE error)
    167          {
   \                     Api221FilterMciErr__GetError: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    168              uint32 mci_error;
    169              uint32 all_mci_errors;
    170          
    171              // Get all mci errors but force 2 stop according to srapi020 to disable
    172              all_mci_errors = Api221FilterMciErr__GetMCUErrorList(motor);
   \   00000008   0x.... 0x....      BL       Mci__GetErrorList
   \   0000000C   0x4606             MOV      R6,R0
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       SRAPI020Safety__GetRxValue
   \   00000016   0xB180             CBZ.N    R0,??Api221FilterMciErr__GetError_0
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x07C0             LSLS     R0,R0,#+31
   \   0000001E   0xD40C             BMI.N    ??Api221FilterMciErr__GetError_0
   \   00000020   0xB15E             CBZ.N    R6,??Api221FilterMciErr__GetError_0
   \   00000022   0x....             LDR.N    R0,??DataTable1  ;; 0x40001
   \   00000024   0x4030             ANDS     R0,R0,R6
   \   00000026   0x42B0             CMP      R0,R6
   \   00000028   0xBF04             ITT      EQ 
   \   0000002A   0x4620             MOVEQ    R0,R4
   \   0000002C   0x.... 0x....      BLEQ     Mci__ClearError
   \   00000030   0xF426 0x2680      BIC      R6,R6,#0x40000
   \   00000034   0x2E01             CMP      R6,#+1
   \   00000036   0xBF08             IT       EQ 
   \   00000038   0x2600             MOVEQ    R6,#+0
    173          
    174              mci_error = FALSE;
   \                     ??Api221FilterMciErr__GetError_0: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
    175              if(BIT_TEST(all_mci_errors, error))
   \   0000003C   0xFA26 0xF105      LSR      R1,R6,R5
   \   00000040   0x07C9             LSLS     R1,R1,#+31
   \   00000042   0xBF48             IT       MI 
    176              {
    177                  mci_error = TRUE;
   \   00000044   0x2001             MOVMI    R0,#+1
    178              }
    179          
    180          
    181              return(mci_error);
   \   00000046   0xB002             ADD      SP,SP,#+8
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return
    182          }
    183          
    184          
    185          
    186          
    187          //---------------------------------------------------------------------------------------------------------------------
    188          /*
    189           * @brief   Request to Mci to clear all its internal errors
    190           * @return  TRUE: all errors were cleared
    191           *          FALSE: at least one error could not be cleared
    192           */

   \                                 In section .text, align 2, keep-with-next
    193          uint8 Api221FilterMciErr__ClearError(MOTOR_ENUM_TYPE motor)
    194          {
    195              return(Mci__ClearError(motor));
   \                     Api221FilterMciErr__ClearError: (+1)
   \   00000000   0x.... 0x....      B.W      Mci__ClearError
    196          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x00040001         DC32     0x40001
    197          
    198          
    199          
    200          
    201          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Api221FilterMciErr__ClearError
         0   -> Mci__ClearError
      24   Api221FilterMciErr__GetError
        24   -> Mci__ClearError
        24   -> Mci__GetErrorList
        24   -> SRAPI020Safety__GetRxValue
      16   Api221FilterMciErr__GetMCUErrorList
        16   -> Mci__ClearError
        16   -> Mci__GetErrorList
        16   -> SRAPI020Safety__GetRxValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  Api221FilterMciErr__ClearError
      74  Api221FilterMciErr__GetError
      62  Api221FilterMciErr__GetMCUErrorList

 
 144 bytes in section .text
 
 144 bytes of CODE memory

Errors: none
Warnings: none
