###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        13/Mar/2025  15:30:58
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  Category\Application\Beagle\Beagle.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        Beagle.obj -l ..\listings\Beagle.lst
#        Category\Application\Beagle\Beagle.c
#    List file    =  ..\listings\Beagle.lst
#    Object file  =  Beagle.obj
#
###############################################################################

C:\Data\Repository\WindyStrip_DTC_Orca\source\Category\Application\Beagle\Beagle.c
      1          /**********************************************************************************************************************
      2           *  @file       Beagle.c
      3           *  @brief      Beagle module sends high speed data through SPI port with DMA operation.
      4           *
      5           *  @details    The protocol does not implement handshake.
      6           *
      7           *---------------------------------------------------------------------------------------------------------------------
      8           *------------------- Copyright 2013.  Whirlpool Corporation.  All rights reserved - CONFIDENTIAL ---------------------
      9           *---------------------------------------------------------------------------------------------------------------------
     10           */
     11          #include "C_Extensions.h"
     12          #if(__ICCRX__)
                     ^
Remark[Pe193]: zero used for undefined preprocessing identifier "__ICCRX__"
     13          #include "Dtc.h"
     14          #endif
     15          #include "Spi.h"
     16          #include "Gpio.h"

  extern const volatile GPIO_DEF * GPIO_PORT_LIST[];
  ^
"C:\Data\Repository\WindyStrip_DTC_Orca\source\XCategory\Driver\Gpio\Gpio_macros.h",34  Remark[Pe083]: 
          type qualifier specified more than once

  PACKED typedef struct
         ^
"C:\Data\Repository\WindyStrip_DTC_Orca\source\XCategory\Driver\API\Gpio\Gpio.h",41  Remark[Pe082]: 
          storage class is not first
     17          #include "Beagle.h"
     18          
     19          
     20          #if( (defined BEAGLE_PORT) && (defined BEAGLE_PIN) && (defined BEAGLE_SPI_PORT) && (defined BEAGLE_BUFFER_SIZE))
     21          
     22              #define BEAGLE_MODULE_IS_ENABLED
     23          
     24              #define SET_FLAG_SSL_BIT()          GPIO__PIN_SET(BEAGLE_PORT, BEAGLE_PIN)
     25              #define RESET_FLAG_SSL_BIT()        GPIO__PIN_CLR(BEAGLE_PORT, BEAGLE_PIN)
     26              #define CONFIG_FLAG_SSL_BIT()       Gpio__PinConfig(BEAGLE_PORT, BEAGLE_PIN, OUTPUT_PUSHPULL)
     27          
     28              typedef enum
     29              {
     30                  BEAGLE_START_TX = 0,
     31                  BEAGLE_IGNORE_CALLS,
     32                  BEAGLE_IDLE_TX,
     33                  BEAGLE_ALL_STEPS
     34              } BEAGLE_STATE_TYPE;
     35          

   \                                 In section .bss, align 4
     36              static BEAGLE_STATE_TYPE Beagle_State;
   \                     Beagle_State:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \   00000008                      DS8 4
     37              static BEAGLE_DATA_TYPE *Beagle_Data_Pointer;
     38          
     39              static unsigned short Beagle_Ignore_Counter;
     40              static unsigned short Beagle_Skip_Counter;
     41          
     42          #else
     43              #warning Beagle is compiled, but the parameters are not set in the parameter file, e.g. no data shall be sent.
     44          #endif
     45          
     46          
     47          
     48          
     49          //---------------------------------------------------------------------------------------------------------------------
     50          /**
     51           *  @brief      Initialize the Beagle module and all of its variable.
     52           *
     53           *  @param      none.
     54           *  @return     none.
     55           */

   \                                 In section .text, align 2, keep-with-next
     56          void Beagle__Init(BEAGLE_DATA_TYPE *beagle_data_buffer)
     57          {
   \                     Beagle__Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     58          #if defined BEAGLE_MODULE_IS_ENABLED
     59              CONFIG_FLAG_SSL_BIT();
   \   00000004   0x2206             MOVS     R2,#+6
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       Gpio__PinConfig
     60              RESET_FLAG_SSL_BIT();
   \   0000000E   0x....             LDR.N    R1,??DataTable3
   \   00000010   0x6889             LDR      R1,[R1, #+8]
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x6088             STR      R0,[R1, #+8]
     61          
     62          #if(__ICCRX__)
                     ^
Remark[Pe193]: zero used for undefined preprocessing identifier "__ICCRX__"
     63              Dtc__Initialize();
     64          #endif
     65          
     66              Spi__Initialize(BEAGLE_SPI_PORT);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       Spi__Initialize
     67          
     68          #if(__ICCARM__)
     69              Spi__SetConfiguration(BEAGLE_SPI_PORT, SPI_POLARITY_SCK_IDLE_0, SPI_EDGE_FIRST, SPI_ODER_MSB_FIRST);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x4611             MOV      R1,R2
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x4608             MOV      R0,R1
   \   00000024   0x.... 0x....      BL       Spi__SetConfiguration
     70              Spi__Enable(BEAGLE_SPI_PORT);
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       Spi__Enable
     71          #endif
     72          
     73              Beagle_State = BEAGLE_IDLE_TX;
   \   0000002E   0x....             LDR.N    R0,??DataTable3_1
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x7001             STRB     R1,[R0, #+0]
     74          
     75              Beagle_Skip_Counter = BEAGLE_SKIP_CALLS;        // Loads the default value to the timer.
     76          
     77              Beagle_Data_Pointer = beagle_data_buffer;
   \   00000034   0x6084             STR      R4,[R0, #+8]
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x8081             STRH     R1,[R0, #+4]
     78          #endif
     79          }
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
     80          
     81          
     82          
     83          //---------------------------------------------------------------------------------------------------------------------
     84          /**
     85           *  @brief      Load floating data to the buffer only when the previous buffer is already sent.
     86           *              In the case of sending data at top rate, call the load right before the Beagle__HighSpeedHandler.
     87           *              The BEAGLE_DATA_TYPE shall be "float" or "signed long"
     88           *
     89           *  @param      none.
     90           *  @return     none.
     91           */

   \                                 In section .text, align 2, keep-with-next
     92          BOOL_TYPE Beagle__TriggerTXData(void)
     93          {
     94          #if defined BEAGLE_MODULE_IS_ENABLED
     95              BOOL_TYPE ret_val = FALSE;
     96          
     97              if(Beagle_State == BEAGLE_IDLE_TX)
   \                     Beagle__TriggerTXData: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_1
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2902             CMP      R1,#+2
   \   00000006   0xD105             BNE.N    ??Beagle__TriggerTXData_0
     98              {
     99                  // Reset the ssl bit, just in case.
    100                  RESET_FLAG_SSL_BIT();
   \   00000008   0x....             LDR.N    R2,??DataTable3
   \   0000000A   0x6892             LDR      R2,[R2, #+8]
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x6091             STR      R1,[R2, #+8]
    101          
    102                  // Start the Beagle TX, after copying the buffer
    103                  Beagle_State = BEAGLE_START_TX;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    104              }
    105          
    106              return(ret_val);
   \                     ??Beagle__TriggerTXData_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
    107          #else
    108              return(FALSE);
    109          #endif
    110          }
    111          
    112          
    113          //---------------------------------------------------------------------------------------------------------------------
    114          /**
    115           *  @brief      Handler to be called at high rate according to the application.
    116           *              It might be called at 16kHz or 4kHz or any other rate the user needs.
    117           *
    118           *  @param      none.
    119           *  @return     none.
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          void Beagle__HighSpeedHandler(void)
    122          {
   \                     Beagle__HighSpeedHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    123          #if defined BEAGLE_MODULE_IS_ENABLED
    124          
    125              if(Beagle_State == BEAGLE_IDLE_TX)
   \   00000002   0x....             LDR.N    R4,??DataTable3_1
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xD104             BNE.N    ??Beagle__HighSpeedHandler_0
    126              {
    127                  RESET_FLAG_SSL_BIT();
   \   0000000A   0x....             LDR.N    R1,??DataTable3
   \   0000000C   0x6889             LDR      R1,[R1, #+8]
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x6088             STR      R0,[R1, #+8]
   \   00000012   0xBD10             POP      {R4,PC}
    128              }
    129              else if(Beagle_State == BEAGLE_START_TX)
   \                     ??Beagle__HighSpeedHandler_0: (+1)
   \   00000014   0xB970             CBNZ.N   R0,??Beagle__HighSpeedHandler_1
    130              {
    131                  SET_FLAG_SSL_BIT();
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable3
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x6048             STR      R0,[R1, #+4]
    132                  Spi__Write(BEAGLE_SPI_PORT, (unsigned char *)Beagle_Data_Pointer, (unsigned short)(BEAGLE_BUFFER_SIZE*4));
   \   0000001E   0x2230             MOVS     R2,#+48
   \   00000020   0x68A1             LDR      R1,[R4, #+8]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       Spi__Write
    133          
    134                  if(Beagle_Skip_Counter >= 1)
   \   00000028   0x88A0             LDRH     R0,[R4, #+4]
   \   0000002A   0xB150             CBZ.N    R0,??Beagle__HighSpeedHandler_2
    135                  {
    136                      Beagle_State = BEAGLE_IGNORE_CALLS;
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x7021             STRB     R1,[R4, #+0]
    137                      Beagle_Ignore_Counter = Beagle_Skip_Counter;
   \   00000030   0x8060             STRH     R0,[R4, #+2]
   \   00000032   0xBD10             POP      {R4,PC}
    138                  }
    139                  else
    140                  {
    141                      Beagle_State = BEAGLE_IDLE_TX;
    142                  }
    143              }
    144              else if(Beagle_State == BEAGLE_IGNORE_CALLS)
   \                     ??Beagle__HighSpeedHandler_1: (+1)
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD106             BNE.N    ??Beagle__HighSpeedHandler_3
    145              {
    146                  if(Beagle_Ignore_Counter)
   \   00000038   0x8860             LDRH     R0,[R4, #+2]
   \   0000003A   0xB110             CBZ.N    R0,??Beagle__HighSpeedHandler_2
    147                  {
    148                      Beagle_Ignore_Counter--;
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0x8060             STRH     R0,[R4, #+2]
   \   00000040   0xBD10             POP      {R4,PC}
    149                  }
    150                  else
    151                  {
    152                      Beagle_State = BEAGLE_IDLE_TX;
   \                     ??Beagle__HighSpeedHandler_2: (+1)
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x7020             STRB     R0,[R4, #+0]
    153                  }
    154              }
    155          
    156          #endif
    157          }
   \                     ??Beagle__HighSpeedHandler_3: (+1)
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    158          
    159          
    160          
    161          //---------------------------------------------------------------------------------------------------------------------
    162          /**
    163           *  @brief      Update or change the rate of the Beagle sending rate.
    164           *
    165           *  @param      new_rate: define the new rate, the Beagle rate will depend up on the rate
    166           *              of the method Beagle__HighSpeedHandler()
    167           *  @return     none.
    168           */

   \                                 In section .text, align 2, keep-with-next
    169          void Beagle__ChangeRate(unsigned short new_rate)
    170          {
    171          #if defined BEAGLE_MODULE_IS_ENABLED
    172              Beagle_Skip_Counter = new_rate;
   \                     Beagle__ChangeRate: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3_1
   \   00000002   0x8088             STRH     R0,[R1, #+4]
    173          #endif
    174          }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     GPIO_PORT_LIST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     Beagle_State

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Beagle__ChangeRate
       8   Beagle__HighSpeedHandler
         8   -> Spi__Write
       8   Beagle__Init
         8   -> Gpio__PinConfig
         8   -> Spi__Enable
         8   -> Spi__Initialize
         8   -> Spi__SetConfiguration
       0   Beagle__TriggerTXData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
      12  Beagle_State
          Beagle_Ignore_Counter
          Beagle_Skip_Counter
          Beagle_Data_Pointer
       6  Beagle__ChangeRate
      72  Beagle__HighSpeedHandler
      60  Beagle__Init
      24  Beagle__TriggerTXData

 
  12 bytes in section .bss
 170 bytes in section .text
 
 170 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
