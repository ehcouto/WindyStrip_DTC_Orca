###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        19/Nov/2024  13:15:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  Category\Application\ProtocolInfo\ProtocolInfo.c
#    Command line =  
#        -I./ -I../cx/ -I../cx/inc/ -ICategory/ -ICategory/Application/
#        -ICategory/Application/ApplicationWasherMcu/
#        -ICategory/Application/ApplicationWasherMcu/AnalysisAverage/
#        -ICategory/Application/ApplicationWasherMcu/Arbitration/
#        -ICategory/Application/ApplicationWasherMcu/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Motion/
#        -ICategory/Application/ApplicationWasherMcu/Motion/MotionError/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Pulse/
#        -ICategory/Application/ApplicationWasherMcu/Motion/RotateXDeg/
#        -ICategory/Application/ApplicationWasherMcu/Motion/SpinDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/StopDrum/
#        -ICategory/Application/ApplicationWasherMcu/Motion/Wash/
#        -ICategory/Application/ApplicationWasherMcu/MotorActivity/
#        -ICategory/Application/ApplicationWasherMcu/SpeedMaintain/
#        -ICategory/Application/BandLimiter/ -ICategory/Application/Beagle/
#        -ICategory/Application/CommandManager/
#        -ICategory/Application/DigitalFilter/
#        -ICategory/Application/Extraction/
#        -ICategory/Application/Extraction/CodeGeneration/
#        -ICategory/Application/Extraction/CodeGeneration/SharedUtils/
#        -ICategory/Application/Extraction/Dependencies/
#        -ICategory/Application/FaultManager/
#        -ICategory/Application/MciSensorsWm/ -ICategory/Application/MciSetWm/
#        -ICategory/Application/MciSetWmFloat/ -ICategory/Application/ParamEst/
#        -ICategory/Application/ParamEstExc/ -ICategory/Application/Params/
#        -ICategory/Application/ProtocolInfo/
#        -ICategory/Application/ProtocolMainExternal/
#        -ICategory/Application/SRMotorSafetyInfoParamsMgr_Core/
#        -ICategory/Application/ThermalModel/
#        -ICategory/Application/ThermalModel/ThermalModelCore/
#        -ICategory/Common/ -ICategory/Common/BoardDebugging/
#        -ICategory/Common/MasterCommander/
#        -ICategory/Common/MasterCommander/Source/
#        -ICategory/Common/MasterCommander/Source/HAL/ -ICategory/Hbl/
#        -IProjectSpecific/ -IProjectSpecific/Application/
#        -IProjectSpecific/Application/API007App/
#        -IProjectSpecific/Application/Api221_Filter_Mci_Err/
#        -IProjectSpecific/Application/ModeManagement/
#        -IProjectSpecific/Application/ProductInfo/
#        -IProjectSpecific/Application/RemoteFunctions/
#        -IProjectSpecific/Application/SRMcuSpeedMonitor/
#        -IProjectSpecific/Application/ThermalModel/
#        -IProjectSpecific/CommonCore/ -IProjectSpecific/Driver/
#        -IProjectSpecific/Indesit/ -IProjectSpecific/MasterCommander/
#        -IProjectSpecific/Mci/ -IProjectSpecific/Mci/Mcl/
#        -IProjectSpecific/Mci/Mcl/old_xls/ -IXCategory/
#        -IXCategory/Application/ -IXCategory/Application/MciParametersLoader/
#        -IXCategory/Application/Mode/ -IXCategory/Application/Reveal_APIs/
#        -IXCategory/Application/Reveal_APIs/API003Disc/
#        -IXCategory/Application/Reveal_APIs/API005LowLevel/
#        -IXCategory/Application/Reveal_APIs/API007Data/
#        -IXCategory/Application/Reveal_APIs/API009System/
#        -IXCategory/Application/Reveal_APIs/API010PollVar/
#        -IXCategory/Application/Reveal_APIs/API011AppCtr/
#        -IXCategory/Application/Reveal_APIs/API013RemoteFunction/
#        -IXCategory/Application/Reveal_APIs/API018Diagnostic/
#        -IXCategory/Application/Reveal_APIs/API019ProductInfo/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/
#        -IXCategory/Application/Reveal_APIs/API220MotorControl/API/
#        -IXCategory/Application/Reveal_APIs/API221MotionCtrl/
#        -IXCategory/Application/Reveal_APIs/SRAPI020Safety/
#        -IXCategory/Application/SFUpdater/ -IXCategory/Common/
#        -IXCategory/Common/Crc16/ -IXCategory/Common/Crc8/
#        -IXCategory/Common/Log/ -IXCategory/Common/SettingFile/
#        -IXCategory/Common/SRClockMonitor/ -IXCategory/Common/SRData/
#        -IXCategory/Common/SRException/ -IXCategory/Common/SRFlow/
#        -IXCategory/Common/SRIsrMonitor/ -IXCategory/Common/SRMain/
#        -IXCategory/Common/SRMcuSpeedMonitor/ -IXCategory/Common/SRPowerMgr/
#        -IXCategory/Common/SRSignature/ -IXCategory/Common/SRSystemConfig/
#        -IXCategory/Common/SRTimerReference/ -IXCategory/Common/SystemConfig/
#        -IXCategory/Common/SystemTimers/ -IXCategory/Common/Utilities/
#        -IXCategory/Driver/ -IXCategory/Driver/API/
#        -IXCategory/Driver/API/Comparator/ -IXCategory/Driver/API/DataFlash/
#        -IXCategory/Driver/API/Dma/ -IXCategory/Driver/API/Flash/
#        -IXCategory/Driver/API/Gpio/ -IXCategory/Driver/API/Micro/
#        -IXCategory/Driver/API/Spi/ -IXCategory/Driver/API/SRMCAtod/
#        -IXCategory/Driver/API/SRMCPwm/ -IXCategory/Driver/API/TimerInterrupt/
#        -IXCategory/Driver/API/Uart/ -IXCategory/Driver/Comparator/
#        -IXCategory/Driver/DataFlash/ -IXCategory/Driver/Dma/
#        -IXCategory/Driver/Flash/ -IXCategory/Driver/Gpio/
#        -IXCategory/Driver/Micro/ -IXCategory/Driver/Spi/
#        -IXCategory/Driver/SRMCAtod/ -IXCategory/Driver/SRMCPwm/
#        -IXCategory/Driver/TimerInterrupt/ -IXCategory/Driver/Uart/
#        -IXCategory/Hbl/ -IXCategory/Hbl/Mci/
#        -IXCategory/Hbl/Mci/InverterTemp/ -IXCategory/Hbl/Mci/Mcl/
#        -IXCategory/Hbl/Mci/Mcl/Braking/ -IXCategory/Hbl/Mci/Mcl/MacroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MclFvt/ -IXCategory/Hbl/Mci/Mcl/MicroBlocks/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/ClrkPark/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Filters/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Math/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/Pi/
#        -IXCategory/Hbl/Mci/Mcl/MicroBlocks/PwmModulation/
#        -IXCategory/Hbl/Mci/Mcl/ResistanceEstimation/
#        -IXCategory/Hbl/Mci/PowerModuleManager/
#        -IXCategory/Hbl/Mci/SpeedRefGen/ -IXCategory/Hbl/Mci/SurgeRelay/
#        -IXCategory/Hbl/SRMotorSafetyMgr/
#        -IXCategory/Hbl/SRMotorSafetyMgr/API/ -IXCategory/Service/
#        -IXCategory/Service/Reveal/ -IXCategory/Service/Win/ --remarks
#        --no_tbaa --debug --use_c++_inline --only_stdout --dlib_config
#        ..\cx\inc\DLib_Config_Normal.h -r -D
#        ENABLE_JUMP_TO_APPLICATION_WITHOUT_IAP_FIRMWARE -D ARM_MATH_CM4 -e
#        --silent --endian=little --cpu Cortex-M4 --fpu=VFPv4_sp -Ohs -o
#        ProtocolInfo.obj -l ..\listings\ProtocolInfo.lst
#        Category\Application\ProtocolInfo\ProtocolInfo.c
#    List file    =  ..\listings\ProtocolInfo.lst
#    Object file  =  ProtocolInfo.obj
#
###############################################################################

C:\Data\Python\Windy_sBpm_Floating\source\Category\Application\ProtocolInfo\ProtocolInfo.c
      1          /**
      2           *  @file       ProtocolInfo.c
      3           *
      4           *  @brief      Indesit Legacy protocol application specific serial buffer information
      5           *
      6           *  $Header: $
      7           *
      8           *  @copyright  Copyright 2016-$Date$. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
      9           */
     10          //---------------------------------------------------------------------------------------------------------------------
     11          //---------------------------------------------------------------------------------------------------------------------
     12          
     13          
     14          //-------------------------------------- Include Files ----------------------------------------------------------------
     15          #include "ProtocolInfo.h"
     16          #include "C_Extensions.h"
     17          #include "Mci.h"
     18          //#include "SensorsAlgorithms.h"
     19          #include "MciSensorsWm.h"
     20          #include "FaultManager.h"
     21          #include "Params.h"

  PACKED typedef struct
         ^
"C:\Data\Python\Windy_sBpm_Floating\source\XCategory\Common\SettingFile\SettingFile.h",39  Remark[Pe082]: 
          storage class is not first
     22          // LUT includes
     23          #include "CommandManager.h"
     24          #include "Mcl.h"
     25          #include "MclDqCtrl.h"
     26          #include "MclSpeedCtrl.h"
     27          #include "MclDqRef.h"
     28          #include "MclObserver.h"
     29          #include "BoardDebugging.h"
     30          #include "SRSignature.h"
     31          
     32          #if (APPLIANCE_TYPE == APPLIANCE_TYPE_WASHER)
     33          #include "SRMotorSafetyInfoParamsMgr.h"

   \                                 In section .data, align 4
     34          static SR_MOTOR_SAFETY_INFO_LIST_TYPE Protocol_SafetyInfo;
   \                     Protocol_SafetyInfo:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0
   \   0000006E   0x00 0x00          DC8 0, 0
   \   00000070   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000080   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000090   0x014C 0x00E4      DC16 332, 228, 20, 2, 2, 2, 2, 2, 2, 2, 52, 32, 2
   \              0x0014 0x0002
   \              0x0002 0x0002
   \              0x0002 0x0002
   \              0x0002 0x0002
   \              0x0034 0x0020
   \              0x0002       
   \   000000AA   0x00 0x00          DC8 0, 0
     35          #endif
     36          //-------------------------------------- PUBLIC (Variables) -----------------------------------------------------------
     37          
     38          //-------------------------------------- PRIVATE (Variables, Constants & Defines) -------------------------------------
     39          // symbol MICRO_FLASH_CRC created by the IELF tool, this holds the calculated CRC value on the flash memory.
     40          extern uint16 MICRO_FLASH_CRC;
     41          static uint8 ClassB_Signature[32];    // Required to copy Class B Signature in RAM
     42          static uint16 Micro_Flash_Crc_Holder; // Holder required to copy Flash CRC in RAM
     43          static PROTOCOL_INFO_TYPE Protocol_Info;
     44          
     45          
     46          static uint16 LUT_Data_Sizes[] = {
     47              sizeof(SF_Application_Params),
     48              sizeof(Mcl_Quantities),
     49          #if (MCI_FVT_TESTS == ENABLED)
     50              sizeof(FvtResult),
     51          #else
     52              sizeof(uint16),
     53          #endif
     54          #if	(PLATFORM_USED == PLATFORM_2_5_BASED)
     55              sizeof(uint16),
     56          #else
     57          	sizeof(uint16),
     58          #endif
     59              sizeof(uint16),
     60              sizeof(uint16),
     61              sizeof(uint16),
     62              sizeof(uint16), // Dummy placeholder - sRampParams
     63              sizeof(uint16), // Dummy placeholder - sMiscs
     64              sizeof(uint16),
     65              sizeof(Mci_ClassB_Prm),
     66              sizeof(ClassB_Signature),
     67              sizeof(Micro_Flash_Crc_Holder),
     68          };
     69          
     70          // Init in run time
     71          static uint16 LUT_Pointers[15];
     72          
     73          #define LktSize         sizeof(LUT_Pointers)/2
     74          
     75          #define RPM_TO_IQ_PLT_2_5(value)        (signed long)IQMATH__REAL2IQ((value), 19800, IQ15)
     76          
     77          static IDENTTABLE_TYPE Ident_Table;
     78          
     79          //-------------------------------------- PRIVATE (Function Prototypes) ------------------------------------------------
     80          
     81          
     82          //=====================================================================================================================
     83          //-------------------------------------- Public Functions -------------------------------------------------------------
     84          //=====================================================================================================================
     85          
     86          //---------------------------------------------------------------------------------------------------------------------
     87          /**
     88           *  @brief      It Initializes the module ProtocolInfo and its variables
     89           *
     90           */

   \                                 In section .text, align 4, keep-with-next
     91          void ProtocolInfo__Initialize(void)
     92          {
   \                     ProtocolInfo__Initialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     93              uint8* temp;
     94              uint8 i;
     95          
     96          
     97          #if (APPLIANCE_TYPE == APPLIANCE_TYPE_WASHER)
     98          
     99              SRMotorSafetyInfoParmsMgr__Initialize();
   \   00000002   0x.... 0x....      BL       SRMotorSafetyInfoParmsMgr__Initialize
    100          
    101          	// Protocol Info Buffer initialization
    102              Protocol_Info.Active_Power = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R4,??DataTable3
   \   0000000A   0x61A0             STR      R0,[R4, #+24]
    103              Protocol_Info.Balance = 0;
    104              Protocol_Info.Balance_Window = 0;
    105              Protocol_Info.Crc_Safety = 0;
    106              Protocol_Info.Fault = 0;
    107              Protocol_Info.Fdb_Flags = 0;
   \   0000000C   0x6160             STR      R0,[R4, #+20]
    108              Protocol_Info.Me_Mean = 0;
   \   0000000E   0x6120             STR      R0,[R4, #+16]
    109              Protocol_Info.Me_Mean_Window = 0;
   \   00000010   0x6260             STR      R0,[R4, #+36]
    110              Protocol_Info.OH_Motor_Index = 0;
    111              Protocol_Info.OH_Spinning_Index = 0;
    112              Protocol_Info.OH_Washing_Index = 0;
   \   00000012   0x6220             STR      R0,[R4, #+32]
    113              Protocol_Info.Omega = 0;
   \   00000014   0x60E0             STR      R0,[R4, #+12]
    114              Protocol_Info.Safety_Cnt = 0;
   \   00000016   0x60A0             STR      R0,[R4, #+8]
    115              Protocol_Info.Safety_Flags = 0;
    116              Protocol_Info.Total_Energy_Hi = 0;
    117              Protocol_Info.Total_Energy_Lo = 0;
   \   00000018   0x61E0             STR      R0,[R4, #+28]
    118              Protocol_Info.Version = 0;
   \   0000001A   0x8520             STRH     R0,[R4, #+40]
    119          #elif (APPLIANCE_TYPE == APPLIANCE_TYPE_DISHWASHER)
    120          	// Protocol Info Buffer initialization
    121              Protocol_Info.Fault = 0;
    122              Protocol_Info.Omega = 0;
    123              Protocol_Info.Virtual_Sensor_State_Machine = 0;
    124              Protocol_Info.OH_Motor_Index= 0;
    125              Protocol_Info.Omega = 0;
    126              Protocol_Info.Mean = 0;
    127              Protocol_Info.Fdb_Flags = 0;
    128              Protocol_Info.Active_Power = 0;
    129              Protocol_Info.Total_Energy_Hi = 0;
    130              Protocol_Info.Total_Energy_Lo = 0;
    131              Protocol_Info.Vdc_Max_Copy = 0;
    132          #endif
    133              // Copy from Flash to RAM both CRC and Signature
    134              Micro_Flash_Crc_Holder = MICRO_FLASH_CRC;
   \   0000001C   0x....             LDR.N    R0,??DataTable3_1
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0xF8A4 0x006C      STRH     R0,[R4, #+108]
    135              temp = SRSignature__GetClassBSignature();
   \   00000024   0x.... 0x....      BL       SRSignature__GetClassBSignature
    136              for (i = 0; i < 32; i++)
   \   00000028   0xF104 0x0170      ADD      R1,R4,#+112
   \   0000002C   0xF05F 0x0208      MOVS.W   R2,#+8
    137              {
    138                  ClassB_Signature[i] = *temp++;
   \                     ??ProtocolInfo__Initialize_0: (+1)
   \   00000030   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   00000034   0xF801 0x3B01      STRB     R3,[R1], #+1
    139              }
   \   00000038   0x1E52             SUBS     R2,R2,#+1
   \   0000003A   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   0000003E   0xF801 0x3B01      STRB     R3,[R1], #+1
   \   00000042   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   00000046   0xF801 0x3B01      STRB     R3,[R1], #+1
   \   0000004A   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   0000004E   0xF801 0x3B01      STRB     R3,[R1], #+1
   \   00000052   0xD1ED             BNE.N    ??ProtocolInfo__Initialize_0
    140          
    141              // LUT Pointers initialization - Addresses in Word format
    142              LUT_Pointers[0] = ((uint16)(&SF_Application_Params) >> 1);
                                        ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   00000054   0x....             LDR.N    R0,??DataTable3_2
   \   00000056   0x0400             LSLS     R0,R0,#+16
   \   00000058   0x0C40             LSRS     R0,R0,#+17
   \   0000005A   0x85A0             STRH     R0,[R4, #+44]
    143              LUT_Pointers[1] = ((uint16)(&Mcl_Quantities) >> 1);
                                        ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   0000005C   0x....             LDR.N    R0,??DataTable3_3
   \   0000005E   0x0400             LSLS     R0,R0,#+16
   \   00000060   0x0C40             LSRS     R0,R0,#+17
   \   00000062   0x85E0             STRH     R0,[R4, #+46]
    144          #if (MCI_FVT_TESTS == ENABLED)
    145              LUT_Pointers[2] = ((uint16)(&FvtResult) >> 1);
                                        ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   00000064   0x....             LDR.N    R0,??DataTable3_4
   \   00000066   0x0400             LSLS     R0,R0,#+16
   \   00000068   0x0C40             LSRS     R0,R0,#+17
   \   0000006A   0x8620             STRH     R0,[R4, #+48]
    146          #else
    147              LUT_Pointers[2] = ((uint16)(0));
    148          #endif
    149          #if (PLATFORM_USED == PLATFORM_2_5_BASED)
    150              LUT_Pointers[3] = ((uint16)0);
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x8660             STRH     R0,[R4, #+50]
    151          #else
    152              LUT_Pointers[3] = ((uint16)(0));
    153          #endif
    154          
    155              LUT_Pointers[4] = ((uint16)(0));
   \   00000070   0x6360             STR      R0,[R4, #+52]
    156              LUT_Pointers[5] = ((uint16)(0));
    157              LUT_Pointers[6] = ((uint16)(0));
   \   00000072   0x63A0             STR      R0,[R4, #+56]
    158              LUT_Pointers[7] = ((uint16)0);
    159              LUT_Pointers[8] = ((uint16)0); // Dummy placeholder - sRampParams
   \   00000074   0x63E0             STR      R0,[R4, #+60]
    160              LUT_Pointers[9] = ((uint16)0); // Dummy placeholder - sMiscs
    161              LUT_Pointers[10] = ((uint16)0);
   \   00000076   0xF8A4 0x0040      STRH     R0,[R4, #+64]
    162              LUT_Pointers[11] = ((uint16)(&Mci_ClassB_Prm) >> 1);
                                         ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   0000007A   0x....             LDR.N    R0,??DataTable3_5
   \   0000007C   0x0400             LSLS     R0,R0,#+16
   \   0000007E   0x0C40             LSRS     R0,R0,#+17
   \   00000080   0xF8A4 0x0042      STRH     R0,[R4, #+66]
    163              LUT_Pointers[12] = ((uint16)(&ClassB_Signature[0]) >> 1);
                                         ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   00000084   0xF104 0x0070      ADD      R0,R4,#+112
   \   00000088   0x0400             LSLS     R0,R0,#+16
   \   0000008A   0x0C40             LSRS     R0,R0,#+17
   \   0000008C   0xF8A4 0x0044      STRH     R0,[R4, #+68]
    164              LUT_Pointers[13] = ((uint16)(&Micro_Flash_Crc_Holder) >> 1);
                                         ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   00000090   0xF104 0x006C      ADD      R0,R4,#+108
   \   00000094   0x0400             LSLS     R0,R0,#+16
   \   00000096   0x0C40             LSRS     R0,R0,#+17
   \   00000098   0xF8A4 0x0046      STRH     R0,[R4, #+70]
    165              LUT_Pointers[14] = ((uint16)(&LUT_Data_Sizes) >> 1);
                                         ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   0000009C   0xF104 0x0090      ADD      R0,R4,#+144
   \   000000A0   0x0400             LSLS     R0,R0,#+16
   \   000000A2   0x0C40             LSRS     R0,R0,#+17
   \   000000A4   0xF8A4 0x0048      STRH     R0,[R4, #+72]
    166              // Ident Table initialization
    167              Ident_Table.Ident_Table_0 = (uint16)(((uP_MODEL<<4)+uPManufacturer)<<8)|((BoardType<<4)+APPLIANCE_TYPE);
   \   000000A8   0xF24E 0x0032      MOVW     R0,#+57394
   \   000000AC   0xF8A4 0x004C      STRH     R0,[R4, #+76]
    168              Ident_Table.Ident_Table_1 = (uint16)(((((uint16)ExtendedAddr<<7)+(WriteBlockSize<<6)+(IdentFormat<<5)+(Alignment<<4)+(ErrorChecking<<3)+ProjectCode)<<8)|(FW_VERSION_A));
   \   000000B0   0xF641 0x6008      MOVW     R0,#+7688
   \   000000B4   0xF8A4 0x004E      STRH     R0,[R4, #+78]
    169              Ident_Table.Ident_Table_2 = (uint16)((FW_VERSION_B<<8)|(FW_VERSION_C));
   \   000000B8   0xF240 0x4004      MOVW     R0,#+1028
   \   000000BC   0xF8A4 0x0050      STRH     R0,[R4, #+80]
    170              Ident_Table.Ident_Table_3 = (uint16)((RamAddrHi<<8)|(RamAddrLo));
   \   000000C0   0x2001             MOVS     R0,#+1
   \   000000C2   0xF8A4 0x0052      STRH     R0,[R4, #+82]
    171              Ident_Table.Ident_Table_4 = (uint16)((EEPAddrHi<<8)|(EEPAddrLo));
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0xF8A4 0x0054      STRH     R0,[R4, #+84]
    172              Ident_Table.LUT_Pointers_Address = ((uint16)(&LUT_Pointers) >> 1); // address in word format
                                                         ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   000000CC   0xF104 0x002C      ADD      R0,R4,#+44
   \   000000D0   0x0400             LSLS     R0,R0,#+16
   \   000000D2   0x0C40             LSRS     R0,R0,#+17
   \   000000D4   0xF8A4 0x0056      STRH     R0,[R4, #+86]
    173              Ident_Table.Ident_Table_5 = (uint16)((EEPSize<<8)|(LktSize));
   \   000000D8   0x200F             MOVS     R0,#+15
   \   000000DA   0xF8A4 0x0058      STRH     R0,[R4, #+88]
    174              Ident_Table.Ident_Table_6 = 0;
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0xF8A4 0x005A      STRH     R0,[R4, #+90]
    175              Ident_Table.Ident_Table_7 = 0;
   \   000000E4   0x65E0             STR      R0,[R4, #+92]
    176              Ident_Table.Ident_Table_8 = 0;
    177              Ident_Table.Ident_Table_9 = 0;
   \   000000E6   0x6620             STR      R0,[R4, #+96]
    178              Ident_Table.Ident_Table_10 = 0;
    179              Ident_Table.Ident_Table_11 = 0;
   \   000000E8   0x6660             STR      R0,[R4, #+100]
    180              Ident_Table.Ident_Table_12 = 0;
    181              Ident_Table.Ident_Table_13 = 0;
   \   000000EA   0xF8A4 0x0068      STRH     R0,[R4, #+104]
    182          
    183              FaultManager__Reset();
   \   000000EE   0xE8BD 0x4010      POP      {R4,LR}
   \   000000F2   0x.... 0x....      B.W      FaultManager__Reset
    184          }
    185          
    186          
    187          //---------------------------------------------------------------------------------------------------------------------
    188          /**
    189           *  @brief      ProtocolInfo 2 ms Handler
    190           *
    191           *  @details    Populate the InfoBuffer with the latest information
    192           *
    193           *  @remarks    The update of the fault information is performed here
    194           *
    195           */

   \                                 In section .text, align 2, keep-with-next
    196          void ProtocolInfo__1msHandler(void)
    197          {
   \                     ProtocolInfo__1msHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    198              sint16 speed;
    199          
    200              FaultManager__UpdateFault();
   \   00000002   0x.... 0x....      BL       FaultManager__UpdateFault
    201          
    202              Protocol_Info.Fault = FaultManager__GetFaultToPublish();
   \   00000006   0x....             LDR.N    R4,??DataTable3
   \   00000008   0x.... 0x....      BL       FaultManager__GetFaultToPublish
   \   0000000C   0x8160             STRH     R0,[R4, #+10]
    203          
    204              // Speed Measure Sign Imposition
    205              if((FALSE == Mci__GetDigital(MOTOR0, MCI_DI_MOTOR_RUNNING)) && (FaultManager__GetFaultToPublish() == NO_FAULT))
   \   0000000E   0x2104             MOVS     R1,#+4
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       Mci__GetDigital
   \   00000016   0xB910             CBNZ.N   R0,??ProtocolInfo__1msHandler_0
   \   00000018   0x.... 0x....      BL       FaultManager__GetFaultToPublish
   \   0000001C   0xB160             CBZ.N    R0,??ProtocolInfo__1msHandler_1
    206              {// No Currents -> Speed is Zero
    207                  Protocol_Info.Omega = 0;
    208              }
    209              else
    210              {// Current -> Speed is NOT Zero
    211                  speed = RPM_TO_IQ_PLT_2_5(Mci__GetAnalog(MOTOR0, MCI_AI_ACTUAL_SPEED_S16)>>16);
   \                     ??ProtocolInfo__1msHandler_0: (+1)
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       Mci__GetAnalog
   \   00000026   0x1400             ASRS     R0,R0,#+16
   \   00000028   0x03C0             LSLS     R0,R0,#+15
   \   0000002A   0xF644 0x5158      MOVW     R1,#+19800
   \   0000002E   0xFB90 0xF0F1      SDIV     R0,R0,R1
    212          
    213                  if(speed != 0)
   \   00000032   0xB200             SXTH     R0,R0
   \   00000034   0xB900             CBNZ.N   R0,??ProtocolInfo__1msHandler_1
    214                  {
    215                      Protocol_Info.Omega = speed;
    216                  }
    217                  else
    218                  {
    219                      Protocol_Info.Omega = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??ProtocolInfo__1msHandler_1: (+1)
   \   00000038   0x81A0             STRH     R0,[R4, #+12]
    220                  }
    221              }
    222          
    223          #ifndef INTERNAL_PARAMS
    224          	if(Params__IsReady() == TRUE)
    225          	{
    226          		BIT_CLR(Protocol_Info.Fdb_Flags, TRIPHASE_PARAMS_READ);
    227          	}
    228          	else
    229          #endif
    230          	{
    231          		BIT_SET(Protocol_Info.Fdb_Flags, TRIPHASE_PARAMS_READ);
   \   0000003A   0x8AA0             LDRH     R0,[R4, #+20]
   \   0000003C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000040   0x82A0             STRH     R0,[R4, #+20]
    232          	}
    233          
    234          
    235          #if (APPLIANCE_TYPE == APPLIANCE_TYPE_WASHER)
    236              Protocol_Info.Me_Mean = MciSensorsWm__GetIndesitAnalog(MCISENSORSWM_AI_TORQUE_MEAN);  //lint !e63
   \   00000042   0x2019             MOVS     R0,#+25
   \   00000044   0x.... 0x....      BL       MciSensorsWm__GetIndesitAnalog
   \   00000048   0x8220             STRH     R0,[R4, #+16]
    237              //Protocol_Info.Me_Mean_Window = MciSensorsWm__GetAnalog(SENSORS_AI_TORQUE_MEAN_WINDOW);
    238          
    239              Protocol_Info.Balance = MciSensorsWm__GetIndesitAnalog(MCISENSORSWM_AI_BALANCE);
   \   0000004A   0x201A             MOVS     R0,#+26
   \   0000004C   0x.... 0x....      BL       MciSensorsWm__GetIndesitAnalog
   \   00000050   0x8260             STRH     R0,[R4, #+18]
    240              //Protocol_Info.Balance_Window = SensorsAlgorithms__GetAnalog(SENSORS_AI_BALANCE_WINDOW);
    241          
    242          
    243          
    244          
    245              //--------------------------------Global Data--------------------------------------
    246              //Power Meter
    247          //	Protocol_Info.Active_Power = MciSensorsWm__GetAnalog(SENSORS_AI_MOTOR_LINE_POWER);
    248          //	Protocol_Info.Total_Energy_Hi = MciSensorsWm__GetAnalog(SENSORS_AI_MOTOR_LINE_POWER_HI);
    249          //	Protocol_Info.Total_Energy_Lo = MciSensorsWm__GetAnalog(SENSORS_AI_MOTOR_LINE_POWER_LO);
    250          
    251              //Overheating Indexes
    252          //	Protocol_Info.OH_Spinning_Index = 0;
    253              Protocol_Info.OH_Washing_Index = MciSensorsWm__GetIndesitAnalog(MCISENSORSWM_AI_OVERHEATING_WASHING);
   \   00000052   0x201B             MOVS     R0,#+27
   \   00000054   0x.... 0x....      BL       MciSensorsWm__GetIndesitAnalog
   \   00000058   0x8420             STRH     R0,[R4, #+32]
    254              Protocol_Info.OH_Motor_Index = 0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x8460             STRH     R0,[R4, #+34]
    255          
    256              // Fw Version Init according to ident content
    257              Protocol_Info.Version = (FW_VERSION_A << 12) + (FW_VERSION_B << 8) + FW_VERSION_PROTOCOL;
   \   0000005E   0xF248 0x4004      MOVW     R0,#+33796
   \   00000062   0x8520             STRH     R0,[R4, #+40]
    258              //--------------------------------Global Data--------------------------------------
    259          #elif (APPLIANCE_TYPE == APPLIANCE_TYPE_DISHWASHER)
    260          
    261              //--------------------------------Global Data--------------------------------------
    262                //Power Meter
    263            	Protocol_Info.Active_Power = SensorsAlgorithms__GetAnalog(SENSORS_AI_MOTOR_LINE_POWER);
    264            	Protocol_Info.Total_Energy_Hi = SensorsAlgorithms__GetAnalog(SENSORS_AI_MOTOR_LINE_POWER_HI);
    265            	Protocol_Info.Total_Energy_Lo = SensorsAlgorithms__GetAnalog(SENSORS_AI_MOTOR_LINE_POWER_LO);
    266          
    267              //Overheating Indexes
    268          	Protocol_Info.OH_Motor_Index = 0;
    269          
    270          	// Fw Version Init according to ident content
    271          	Protocol_Info.Vdc_Max_Copy = Mci__GetAnalog(MOTOR0, MCI_AI_BUS_VOLTAGE); //TODO: check if aligned with Dea701 requirement
    272                //--------------------------------Global Data--------------------------------------
    273          
    274          
    275          #endif
    276          }
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
    277          
    278          //---------------------------------------------------------------------------------------------------------------------
    279          /**
    280           *  @brief      Get a pointer to the InfoBuffer structure
    281           *
    282           *  @return     Reference to the InfoBuffer structure. See the @ref ProtocolInfo.h
    283           *              file for reference.
    284           *
    285           */

   \                                 In section .text, align 2, keep-with-next
    286          PROTOCOL_INFO_TYPE* ProtocolInfo__GetInfo(void)
    287          {
   \                     ProtocolInfo__GetInfo: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    288          
    289          #if (APPLIANCE_TYPE == APPLIANCE_TYPE_WASHER)
    290          	//Safety Information
    291          	Protocol_SafetyInfo = SRMotorSafetyInfoParmsMgr__GetInfo();
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      BL       SRMotorSafetyInfoParmsMgr__GetInfo
   \   0000000A   0x....             LDR.N    R4,??DataTable3
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x2206             MOVS     R2,#+6
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy
    292          	Protocol_Info.Safety_Cnt = Protocol_SafetyInfo.Counter;
   \   00000016   0x8820             LDRH     R0,[R4, #+0]
   \   00000018   0x8120             STRH     R0,[R4, #+8]
    293          	Protocol_Info.Safety_Flags = Protocol_SafetyInfo.Info_Flags;
    294          	Protocol_Info.Crc_Safety = Protocol_SafetyInfo.Crc;
    295          #endif
    296          	return &Protocol_Info;
   \   0000001A   0xB002             ADD      SP,SP,#+8
   \   0000001C   0x8860             LDRH     R0,[R4, #+2]
   \   0000001E   0x82E0             STRH     R0,[R4, #+22]
   \   00000020   0x88A0             LDRH     R0,[R4, #+4]
   \   00000022   0x81E0             STRH     R0,[R4, #+14]
   \   00000024   0xF104 0x0008      ADD      R0,R4,#+8
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    297          }
    298          
    299          //---------------------------------------------------------------------------------------------------------------------
    300          /**
    301           *  @brief      Get a pointer to the Ident_Table structure
    302           *
    303           *  @return     Reference to the Ident_Table structure.
    304           *
    305           */

   \                                 In section .text, align 2, keep-with-next
    306          IDENTTABLE_TYPE* ProtocolInfo__GetIdent(void)
    307          {
    308              return &Ident_Table;
   \                     ProtocolInfo__GetIdent: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_6
   \   00000002   0x4770             BX       LR               ;; return
    309          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     Protocol_SafetyInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     MICRO_FLASH_CRC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     SF_Application_Params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     Mcl_Quantities

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     FvtResult

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     Mci_ClassB_Prm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     Protocol_SafetyInfo+0x4C
    310          //=====================================================================================================================
    311          //-------------------------------------- Private Functions ------------------------------------------------------------
    312          //=====================================================================================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ProtocolInfo__1msHandler
         8   -> FaultManager__GetFaultToPublish
         8   -> FaultManager__UpdateFault
         8   -> MciSensorsWm__GetIndesitAnalog
         8   -> Mci__GetAnalog
         8   -> Mci__GetDigital
       0   ProtocolInfo__GetIdent
      16   ProtocolInfo__GetInfo
        16   -> SRMotorSafetyInfoParmsMgr__GetInfo
        16   -> __aeabi_memcpy
       8   ProtocolInfo__Initialize
         0   -> FaultManager__Reset
         8   -> SRMotorSafetyInfoParmsMgr__Initialize
         8   -> SRSignature__GetClassBSignature


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
     102  ProtocolInfo__1msHandler
       4  ProtocolInfo__GetIdent
      42  ProtocolInfo__GetInfo
     246  ProtocolInfo__Initialize
     172  Protocol_SafetyInfo
          Protocol_Info
          LUT_Pointers
          Ident_Table
          Micro_Flash_Crc_Holder
          ClassB_Signature
          LUT_Data_Sizes

 
 172 bytes in section .data
 422 bytes in section .text
 
 422 bytes of CODE memory
 172 bytes of DATA memory

Errors: none
Warnings: 8
