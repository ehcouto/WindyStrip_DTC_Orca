/*
 * File: ExtractionExpStructs.h
 *
 * Code generated for Simulink model 'Extraction'.
 *
 * Model version                  : 1.7455
 * Simulink Coder version         : 8.12 (R2017a) 16-Feb-2017
 * C/C++ source code generated on : Wed May 30 12:13:53 2018
 */

#ifndef RTW_HEADER_ExtractionExpStructs_h_
#define RTW_HEADER_ExtractionExpStructs_h_
#include "rtwtypes.h"

typedef enum
{
    CAB_HIT_STATE_NONE = 0,            /* Default value */
    CAB_HIT_STATE_IDLE,
    CAB_HIT_STATE_FILTER_WARM_UP,
    CAB_HIT_STATE_MONITORING_SPEED,
    CAB_HIT_STATE_MONITORING_SOFT_CAB_HIT,
    CAB_HIT_STATE_SOFT_THRESHOLD_CROSSED
}

CAB_HIT_STATE;

typedef enum
{
    CEM_STATE_NONE = 0,                /* Default value */
    CEM_STATE_IDLE,
    CEM_STATE_RUNNING
}

CEM_STATE;

typedef enum
{
    EXTRACTION_STATE_NONE = 0,         /* Default value */
    EXTRACTION_STATE_IDLE,
    EXTRACTION_STATE_LOW_SPEED,
    EXTRACTION_STATE_HIGH_SPEED,
    EXTRACTION_STATE_EXTRACTION_COMPLETE,
    EXTRACTION_STATE_REBALANCE,
    EXTRACTION_STATE_EXECUTING_ANTIFOAM,
    EXTRACTION_STATE_CONFIGURING,
    EXTRACTION_STATE_MOTOR_STOPPING
}

EXTRACTION_STATE;

typedef enum
{
    EXTR_ACCEL_STATE_NONE = 0,         /* Default value */
    EXTR_ACCEL_STATE_SUPERVISOR_IDLE,
    EXTR_ACCEL_STATE_DISABLING_ACCELEROMETER,
    EXTR_ACCEL_STATE_SENDING_COMMAND,
    EXTR_ACCEL_STATE_MEASURING_BASELINE,
    EXTR_ACCEL_STATE_ACCELEROMETER_IDLE,
    EXTR_ACCEL_STATE_STARTING_ACCELEROMETER,
    EXTR_ACCEL_STATE_MEASURING_ACCELERATION,
    EXTR_ACCEL_STATE_SUPERVISOR_DISABLED
}

EXTR_ACCEL_STATE;

typedef uint8 EXTR_FAULT;

#define EXTR_FAULT_LOW_SPD_INVALID_CONFIG ((EXTR_FAULT)0)        /* Default value */
#define EXTR_FAULT_LOW_SPD_HIGH_UNB_DETECTED ((EXTR_FAULT)1)
#define EXTR_FAULT_LOW_SPD_CAB_HIT_DETECTED ((EXTR_FAULT)2)
#define EXTR_FAULT_HIGH_SPD_INVALID_CONFIG ((EXTR_FAULT)3)
#define EXTR_FAULT_HIGH_SPD_RAMP_VISCOUS_EXCEEDED ((EXTR_FAULT)4)
#define EXTR_FAULT_HIGH_SPD_PLATEAU_HOLD_DECISION ((EXTR_FAULT)5)
#define EXTR_FAULT_HIGH_SPD_PLATEAU_REGRESS_DECISION ((EXTR_FAULT)6)
#define EXTR_FAULT_HIGH_SPD_CEM_EVENT  ((EXTR_FAULT)7)
#define EXTR_FAULT_HIGH_SPD_LOAD_MASS_LIMIT_EXCEEDED ((EXTR_FAULT)8)
#define EXTR_FAULT_HIGH_SPD_SPEED_LIMIT_EXCEEDED ((EXTR_FAULT)9)
#define EXTR_FAULT_HIGH_SPD_VIB_MAP_FLOOR_DISP ((EXTR_FAULT)10)
#define EXTR_FAULT_HIGH_SPD_CAB_HIT_DETECTED ((EXTR_FAULT)11)
#define EXTR_FAULT_HIGH_SPD_EXT_UNB_CHK_FAILED ((EXTR_FAULT)12)
#define EXTR_FAULT_REBAL_INVALID_CONFIG ((EXTR_FAULT)13)
#define EXTR_FAULT_REBAL_SHORT_DIST_LIMIT_EXCEEDED ((EXTR_FAULT)14)
#define EXTR_FAULT_ANTIFOAM_NOTIFICATION ((EXTR_FAULT)15)
#define EXTR_FAULT_SPEED_ERROR_EXCEEDED ((EXTR_FAULT)16)
#define EXTR_FAULT_MCI_FAULT_DETECTED  ((EXTR_FAULT)17)
#define EXTR_FAULT_CLEAN_WASHER_P2P_TORQUE_EXCEEDED ((EXTR_FAULT)18)
#define EXTR_FAULT_CLEAN_WASHER_ACCEL_EXCEEDED ((EXTR_FAULT)19)
#define EXTR_FAULT_CLEAN_WASHER_LOAD_MASS_EXCEEDED ((EXTR_FAULT)20)
#define EXTR_FAULT_CLEAN_WASHER_UNBALANCE_EXCEEDED ((EXTR_FAULT)21)
#define EXTR_FAULT_REBAL_P2P_TORQUE_EXCEEDED ((EXTR_FAULT)22)
#define EXTR_FAULT_HIGH_SPD_RAMP_FRICTION_EXCEEDED ((EXTR_FAULT)23)
#define EXTR_FAULT_ACCEL_CAB_HIT_DETECTED ((EXTR_FAULT)24)
#define EXTR_FAULT_ACCEL_CAB_HIT_COUNT_EXCEEDED ((EXTR_FAULT)25)
#define EXTR_FAULT_ACCEL_VIB_MAP_FLOOR_DISP_EXCEEDED ((EXTR_FAULT)26)
#define EXTR_FAULT_HIGH_SPEED_REBALANCE_COUNT_EXCEEDED ((EXTR_FAULT)27)

typedef enum
{
    EXTR_FLOAT_FB_ENUM_LOAD_MASS_LOW_SPEED = 0,/* Default value */
    EXTR_FLOAT_FB_ENUM_LOAD_MASS_HIGH_SPEED,
    EXTR_FLOAT_FB_ENUM_UNBALANCE_LOW_SPEED,
    EXTR_FLOAT_FB_ENUM_FRICTION_HIGH_SPEED,
    EXTR_FLOAT_FB_ENUM_VISCOUS_FRICTION_HIGH_SPEED,
    EXTR_FLOAT_FB_ENUM_MAX_CABINET_ACCELERATION,
    EXTR_FLOAT_FB_ENUM_SPEED_AT_MAX_CABINET_ACCELERATION,
    EXTR_FLOAT_FB_ENUM_MAX_FLOOR_DISPLACEMENT,
    EXTR_FLOAT_FB_ENUM_COUNT
}

EXTR_FLOAT_FB_ENUM;

typedef enum
{
    EXTR_HIGH_SPD_FAULT_NONE = 0,      /* Default value */
    EXTR_HIGH_SPD_FAULT_RAMP_VISCOUS_EXCEEDED,
    EXTR_HIGH_SPD_FAULT_RAMP_FRICTION_EXCEEDED,
    EXTR_HIGH_SPD_FAULT_PLATEAU_HOLD_DECISION,
    EXTR_HIGH_SPD_FAULT_PLATEAU_REGRESS_DECISION,
    EXTR_HIGH_SPD_FAULT_CEM_EVENT,
    EXTR_HIGH_SPD_FAULT_VIB_MAP_FLOOR_DISP,
    EXTR_HIGH_SPD_FAULT_CAB_HIT_DETECTED,
    EXTR_HIGH_SPD_FAULT_LOAD_MASS_LIMIT_EXCEEDED,
    EXTR_HIGH_SPD_FAULT_INVALID_SETUP,
    EXTR_HIGH_SPD_FAULT_MAX_SPEED_REACHED,
    EXTR_HIGH_SPD_FAULT_EXT_UNB_CHK_FAILED,
    EXTR_HIGH_SPD_FAULT_SPEED_ERROR_EXCEEDED
}

EXTR_HIGH_SPD_FAULT;

typedef enum
{
    EXTR_INT32_FB_ENUM_REBAL_CNT_LOW_SPEED = 0,/* Default value */
    EXTR_INT32_FB_ENUM_REBAL_CNT_HIGH_SPEED,
    EXTR_INT32_FB_ENUM_CEM_EVENT_COUNT,
    EXTR_INT32_FB_ENUM_SOFT_CAB_HIT_COUNT,
    EXTR_INT32_FB_ENUM_HARD_CAB_HIT_COUNT,
    EXTR_INT32_FB_ENUM_CURRENT_SPIN_PULSE_INDEX,
    EXTR_INT32_FB_ENUM_COUNT,
	EXTR_INT32_FB_ENUM_HIGH_SPEED_STATUS
}

EXTR_INT32_FB_ENUM;

typedef enum
{
    EXTR_LOW_SPD_FAULT_NONE = 0,       /* Default value */
    EXTR_LOW_SPD_FAULT_INVALID_CONFIG,
    EXTR_LOW_SPD_FAULT_OPT_RAMP_HIGH_UNBALANCE,
    EXTR_LOW_SPD_FAULT_SPEED_ERROR_EXCEEDED
}

EXTR_LOW_SPD_FAULT;

typedef enum
{
    EXTR_REBAL_FAULT_NONE = 0,         /* Default value */
    EXTR_REBAL_FAULT_INVALID_DIST_PROFILE,
    EXTR_REBAL_FAULT_SHORT_DIST_COUNT_EXCEEDED,
    EXTR_REBAL_FAULT_REBAL_REQUESTED
}

EXTR_REBAL_FAULT;

typedef enum
{
    EXTR_REBAL_STATE_NONE = 0,         /* Default value */
    EXTR_REBAL_STATE_IDLE,
    EXTR_REBAL_STATE_RAMPING_TO_DIST_SPEED,
    EXTR_REBAL_STATE_MOTOR_STARTING,
    EXTR_REBAL_STATE_MOTOR_STOPPING,
    EXTR_REBAL_STATE_DETECTING_PEAKS_AND_TROUGHS,
    EXTR_REBAL_STATE_VERIFYING_LOAD_DISTRIBUTION,
    EXTR_REBAL_STATE_DROPPING_SPEED,
    EXTR_REBAL_STATE_EXECUTING_STATIC_PROFILE,
    EXTR_REBAL_STATE_PLATEAU,
    EXTR_REBAL_STATE_MOTOR_OFF,
    EXTR_REBAL_STATE_STOPPING_MOTOR
}

EXTR_REBAL_STATE;

typedef enum
{
    EXTR_SUP_SPEED_ERROR_MONITOR_STATE_NONE = 0,/* Default value */
    EXTR_SUP_SPEED_ERROR_MONITOR_STATE_MONITORING_SPEED_COMMAND,
    EXTR_SUP_SPEED_ERROR_MONITOR_STATE_MONITORING_MOTOR_STATE,
    EXTR_SUP_SPEED_ERROR_MONITOR_STATE_MOTOR_ON
}

EXTR_SUP_SPEED_ERROR_MONITOR_STATE;

typedef enum
{
    EXT_UNB_CHECK_STATE_NONE = 0,      /* Default value */
    EXT_UNB_CHECK_STATE_IDLE,
    EXT_UNB_CHECK_STATE_SEARCHING_SPEED,
    EXT_UNB_CHECK_STATE_SKIPPING_SAMPLES,
    EXT_UNB_CHECK_STATE_CALCULATING_AVG_UNB
}

EXT_UNB_CHECK_STATE;

typedef enum
{
    HIGH_SPEED_PLATEAU_DECISION_NONE = 0,/* Default value */
    HIGH_SPEED_PLATEAU_DECISION_ADVANCE,
    HIGH_SPEED_PLATEAU_DECISION_MONITOR,
    HIGH_SPEED_PLATEAU_DECISION_HOLD,
    HIGH_SPEED_PLATEAU_DECISION_REGRESS
}

HIGH_SPEED_PLATEAU_DECISION;

typedef enum
{
    HIGH_SPEED_PLATEAU_STATE_NONE = 0, /* Default value */
    HIGH_SPEED_PLATEAU_STATE_IDLE,
    HIGH_SPEED_PLATEAU_STATE_WAITING_PE_STABILIZATION_TIME,
    HIGH_SPEED_PLATEAU_STATE_FILLING_FRICTION_BUFFER,
    HIGH_SPEED_PLATEAU_STATE_MONITORING_PLATEAU_SETTLING,
    HIGH_SPEED_PLATEAU_STATE_CALCULATING_FRICTION_BASELINE,
    HIGH_SPEED_PLATEAU_STATE_CALIBRATION_END,
    HIGH_SPEED_PLATEAU_STATE_MONITORING_FRICTION,
    HIGH_SPEED_PLATEAU_STATE_WAITING_PLATEAU_TIME
}

HIGH_SPEED_PLATEAU_STATE;

typedef enum
{
    HIGH_SPEED_RAMP_STATE_NONE = 0,    /* Default value */
    HIGH_SPEED_RAMP_STATE_IDLE,
    HIGH_SPEED_RAMP_STATE_WAITING_STABILIZATION_TIME,
    HIGH_SPEED_RAMP_STATE_WAITING_PE_COV_RESET_TIME,
    HIGH_SPEED_RAMP_STATE_MONITORING,
    HIGH_SPEED_RAMP_STATE_RAMPING
}

HIGH_SPEED_RAMP_STATE;

typedef enum
{
    HIGH_SPEED_STATE_NONE = 0,         /* Default value */
    HIGH_SPEED_STATE_IDLE,
    HIGH_SPEED_STATE_CONFIGURING_PULSE,
    HIGH_SPEED_STATE_RAMP,
    HIGH_SPEED_STATE_PLATEAU,
    HIGH_SPEED_STATE_PLATEAU_COMPLETE,
    HIGH_SPEED_STATE_DIST_SPEED,
    HIGH_SPEED_STATE_EXTENDED_PLATEAU_RAMPING,
    HIGH_SPEED_STATE_EXTENDED_PLATEAU_DELAY,
    HIGH_SPEED_STATE_HIGH_SPEED_COMPLETE,
    HIGH_SPEED_STATE_REBALANCE,
    HIGH_SPEED_STATE_FAULT_INVALID_SETUP
}

HIGH_SPEED_STATE;

typedef enum
{
    LOAD_MEAS_STATE_NONE = 0,          /* Default value */
    LOAD_MEAS_STATE_IDLE,
    LOAD_MEAS_STATE_PARAM_EST_SETUP,
    LOAD_MEAS_STATE_WAITING_CONVERGENCE,
    LOAD_MEAS_STATE_AVERAGING_MEASUREMENTS,
    LOAD_MEAS_STATE_MEASUREMENT_COMPLETE,
    LOAD_MEAS_STATE_WAITING_BALANCE_INDEX,
    LOAD_MEAS_STATE_VERIFYING_LIMITS
}

LOAD_MEAS_STATE;

typedef enum
{
    LOW_SPEED_STATE_NONE = 0,          /* Default value */
    LOW_SPEED_STATE_IDLE,
    LOW_SPEED_STATE_PE_INIT,
    LOW_SPEED_STATE_DISTRIBUTION,
    LOW_SPEED_STATE_LOAD_MEASUREMENT,
    LOW_SPEED_STATE_BASIC_UNBALANCE_CHECK,
    LOW_SPEED_STATE_OPTIMAL_RAMP,
    LOW_SPEED_STATE_MDDP,
    LOW_SPEED_STATE_SETTING_DIST_SPEED,
    LOW_SPEED_STATE_WAITING_DIST_SPEED_TIMEOUT,
    LOW_SPEED_STATE_EXECUTING_ANTIFOAM_ROUTINE,
    LOW_SPEED_STATE_LOW_SPEED_COMPLETED
}

LOW_SPEED_STATE;

typedef enum
{
    MDDP_STATE_NONE = 0,               /* Default value */
    MDDP_STATE_IDLE,
    MDDP_STATE_CALC_MDDP_PARAMETERS,
    MDDP_STATE_RAMPING,
    MDDP_STATE_PLATEAU_END,
    MDDP_STATE_PLATEAU,
    MDDP_STATE_RAMPING_DOWN
}

MDDP_STATE;                            /* enumeration to track active leaf state of Extraction/Extraction/LowSpeed/LowSpeedAlgorithms/MDDP/MDDPLogic */

/* Observed states from the motor control application. */
typedef struct
{
    /* Estimated torque in the motor shaft reference. */
    float32 Torque;

    /* Estimated speed in the motor shaft reference. */
    float32 Speed;

    /* Sine of the estimated position in the motor shaft reference frame. */
    float32 Sin_Theta;

    /* Cosine of the estimated position in the motor shaft reference frame. */
    float32 Cos_Theta;

    /* Speed reference in the motor shaft frame. */
    float32 Speed_Ref;
}

MOTOR_OUTPUT_TYPE;

typedef enum
{
    OPT_RAMP_EXIT_REASON_NONE = 0,     /* Default value */
    OPT_RAMP_EXIT_REASON_UB_SMALL,
    OPT_RAMP_EXIT_REASON_RAMP_AT_OPTIMAL_TIME,
    OPT_RAMP_EXIT_REASON_UB_LARGE
}

OPT_RAMP_EXIT_REASON;

typedef enum
{
    OPT_RAMP_STATE_NONE = 0,           /* Default value */
    OPT_RAMP_STATE_IDLE,
    OPT_RAMP_STATE_PLATEAU,
    OPT_RAMP_STATE_LIMITS_CONVERGING,
    OPT_RAMP_STATE_CONVERGENCE_TIMEOUT,
    OPT_RAMP_STATE_RAMP_AT_OPTIMAL_TIME,
    OPT_RAMP_STATE_UB_LARGE,
    OPT_RAMP_STATE_UB_SMALL
}

OPT_RAMP_STATE;

typedef enum
{
    PE_INIT = 0,                       /* Default value */
    PE_HANDLER,
    PE_START,
    PE_STOP,
    PE_SETUP,
    PE_RESET,
    PE_COV_RESET,
    PE_SELECT_OUTPUTS,
    PE_READ_OUTPUTS
}

PARAM_EST_COMMANDS;

typedef enum
{
    EXC_INIT = 0,                      /* Default value */
    EXC_HANDLER,
    EXC_SETUP,
    EXC_SET_DATA,
    EXC_ENABLE,
    EXC_DISABLE
}

PARAM_EST_EXC_COMMANDS;

typedef struct
{
    float32 Inertia;
    float32 UB;
    float32 UB_Angle;
    float32 Viscous_Friction;
    float32 Coulomb_Friction;
    float32 Friction;
    float32 BB_mgr;
    float32 BB_PhaseLag;
}

PARAM_EST_OUTPUT_TYPE;

/* This structure holds the input data for the interpolation routines.
   The interpolation block output will be LUT[k]*(1+f). */
typedef struct
{
    /* LUT index. */
    uint8 k;

    /* Fraction of the current index. */
    float32 f;
}

PRE_LOOKUP_OUTPUT_TYPE;

typedef enum
{
    VIB_MAP_STATE_NONE = 0,            /* Default value */
    VIB_MAP_STATE_IDLE,
    VIB_MAP_STATE_MONITORING_SPEED,
    VIB_MAP_STATE_FILTER_WARM_UP,
    VIB_MAP_STATE_MONITORING_ACCELERATION,
    VIB_MAP_STATE_MONITORING_FLOOR_DISPLACEMENT,
    VIB_MAP_STATE_FD_THRESHOLD_CROSSED
}

VIB_MAP_STATE;

/* Structure that holds converging thresholds information. */
typedef struct
{
    /* How much the threshold shall be decreased every second. */
    float32 Slope;

    /* Initial value of the threshold. */
    float32 Offset;
}

SLOPE_THRESHOLD_TYPE;

/* This structure defines a V type threshold, with an upper and a lower
   thresholds that shall converge with time. */
typedef struct
{
    /* Upper threshold specification. */
    SLOPE_THRESHOLD_TYPE Upper;

    /* Lower threshold specification. */
    SLOPE_THRESHOLD_TYPE Lower;
}

V_THRESHOLD_TYPE;

#endif                                 /* RTW_HEADER_ExtractionExpStructs_h_ */

/*
 * File trailer for generated code.
 *
 * [EOF]
 */
