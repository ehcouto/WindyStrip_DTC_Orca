/**
 *  @file
 *
 *  @brief      API file for the ParamEst (Parameter Estimation) module.
 *
 *  @copyright  Copyright 2014 Whirlpool Corporation. All rights reserved - CONFIDENTIAL
 */
//---------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------
#ifndef PARAMEST_H_
#define PARAMEST_H_

#include "DigitalFilter.h"
#include "ParamEst_prm.h"

//=====================================================================================================================
//-------------------------------------- PUBLIC (Extern Variables, Constants & Defines) -------------------------------
//=====================================================================================================================

/**
 *  Upper limit in radians for angles handled by and returned from ParamID module. This limit will define the range of
 *  output angles from #ParamID__GetParameterValue for input arguments of #PARAMID_UBPHASE, #PARAMID_BBPHASE,
 *  and #PARAMID_BBPHASEDIFF. It is important to understand the range of these outputs if using them in the application.
 *  The range of angles will be defined by [PARAM_EST_ANGLE_WRAP_UPPER_LIMIT-2*PI, PARAM_EST_ANGLE_WRAP_UPPER_LIMIT]
 *  Type: float
 */
#define PARAM_EST_ANGLE_WRAP_UPPER_LIMIT      ((float)PI)

#define FILTER_DISABLED		255U

//! The list of indices in the Kalman_Vector, for use in assigning adaptation rates to each parameter independently.
typedef enum PARAM_EST_KALMAN_TUNING_ENUM
{
    PARAM_EST_KALMAN_INERTIA,
    PARAM_EST_KALMAN_VISCOUS,
    PARAM_EST_KALMAN_COULOMB,
    PARAM_EST_KALMAN_UNBALANCE,
    PARAM_EST_KALMAN_BALLBALANCER,
    PARAM_EST_LENGTH_KALMAN
} PARAM_EST_KALMAN_TUNING_TYPE;

//! The names of the parameters the user may request from the ParamID module.
typedef enum PARAM_EST_PARAMETER_ENUM
{
	PARAM_EST_INVALID_MEASUREMENT = -1,
    PARAM_EST_INERTIA = 0,    //!< Inertia, kg-m^2
#if MODEL_BK_EULER == ENABLED || MODEL_HYB_ACCEL == ENABLED
    PARAM_EST_VISCOUS,        //!< Viscous drag term, N-m-s/rad
#endif
    PARAM_EST_COULOMB,        //!< Coulomb Friction, N-m
    PARAM_EST_FRICTION,       //!< Combined Friction b*w + c, N-m
    PARAM_EST_UBMAG,          //!< Unbalance Moment, N-m (mgr)
    PARAM_EST_UBPHASE,        //!< Unbalance Phase angle, radians, with respect to drum position
    PARAM_EST_RESIDUAL,       //!< Residual (y - y_hat), also known as error
#if MODEL_BK_EULER_B0_BB == ENABLED
    PARAM_EST_BBMAG,          //!< Ball Balancer Moment, N-m (mgr_bb)
    PARAM_EST_BBPHASE,        //!< Ball Balancer Phase Angle, radians, with respect to ball balancer reference angle #Alpha_BB,
                              //!< as generated by the BB_Lag parameter in #PARAM_EST_SETUP_TYPE. Range is defined in
    PARAM_EST_BBPHASEDIFF,    //!< Unbalance to Ball Balancer Phase Difference, radians (angle_ub - angle_bb).
                              //!< This is a raw difference of unbalance phase minus ball balancer phase.

    PARAM_EST_BBPHASELAG,     //!< Ball balancer phase lag, with respect to unbalance. Drum-direction-independent. A return
                              //!< value of X degrees indicates the ball balancers are lagging the rotation of the load
                              //!< unbalance by X degrees, regardless of direction of rotation of the drum.
#endif
    PARAM_EST_NUM_PARAMETERS  //!< Number of parameters
} PARAM_EST_PARAMETER_TYPE;

//! Parameter Estimation Model Realization
typedef enum PARAM_EST_MODEL_REALIZATION_ENUM
{
#if MODEL_BK_EULER_B0 == ENABLED
    PARAM_EST_MODEL_BK_EULER_B0,      	//!< Backward Euler, with no viscous drag (coloumb friction only)
#endif
#if MODEL_BK_EULER == ENABLED
	PARAM_EST_MODEL_BK_EULER,           //!< Backward Euler, with viscous drag and coloumb friction
#endif
#if MODEL_HYB_ACCEL == ENABLED
	PARAM_EST_MODEL_HYB_ACCEL,          //!< Continuous Model, with viscous drag and coloumb friction
#endif
#if MODEL_BK_EULER_B0_BB == ENABLED
	PARAM_EST_MODEL_BK_EULER_B0_BB,		//!< Backward Euler, with no viscous drag (coloumb friction only) and a Ball Balancer Ring
#endif
    PARAM_EST_NUM_OF_MODELS
} PARAM_EST_MODEL_TYPE;

//! Parameter Estimation Type of adaptation
typedef enum PARAM_EST_ADAPT_ENUM
{
    PARAM_EST_ADAPTATION_FORGETTING = 0,      //!< Forgetting factor adaptation used for tuning all parameters evenly (easiest)
    PARAM_EST_ADAPTATION_KALMAN,              //!< Kalman-style adaptation used for tuning for each parameter independently (tailored performance)
    PARAM_EST_ADAPTATION_BOTH,                //!< Both of the above together.
    PARAM_EST_NUM_OF_ADAPTATIONS
} PARAM_EST_ADAPT_TYPE;

//! The configuration parameters of the ParamID module.
typedef PACKED struct
{
    //! Lag factor for ball balancer angle construction (should be between 0 and 1). This is the factor that multiplies
    //! the drum speed when calculating ball balancer angle. For example, a lag of 0.97 implies the ball balancers are
    //! moving at 97% of the drum speed.
    float 						BB_Lag;

    float 						Forgetting; //!< Scalar forgetting factor - forgetting method (should be between 0.1 and 1)

    //! Vector of adaptation values for each parameter (Kalman method). Each element in this vector affects the adaptation rate of the
    //! individual parameters in the model. The user should use the indices provided in the #KALMAN_TUNING_ENUM list
    //! to assign values to this vector, e.g. .Kalman_Vector[PARAM_EST_KALMAN_INERTIA], .Kalman_Vector[PARAM_EST_KALMAN_UNBALANCE], etc.
    float 						Kalman_Vector[PARAM_EST_LENGTH_KALMAN];

    //! Parameter estimation regression model and adaptation type. Used to retrive the nibbles from the config byte.
    union
    {
        unsigned char BitField;
        struct
        {
            PARAM_EST_ADAPT_TYPE Adapt_Type:4;	//!< Parameter Estimation Type of adaptation
            PARAM_EST_MODEL_TYPE Model:4;		//!< Parameter Estimation Model Realization
        } Struct;
    } Model_Config;

    unsigned char           	Filter_Configuration_Index;    	//!< Displacement for the Parameter Estimation Filter Configuration Table.
    															//!< 255 = Filter is disabled
} PARAM_EST_SETUP_TYPE;

//=====================================================================================================================
//-------------------------------------- PUBLIC (Function Prototypes) -------------------------------------------------
//=====================================================================================================================

void ParamEst__Initialize(void);
void ParamEst__Handler(void);

void ParamEst__Enable(BOOL_TYPE reset);
void ParamEst__Disable(void);
BOOL_TYPE ParamEst__IsRunning(void);
float ParamEst__GetParameterValue(PARAM_EST_PARAMETER_TYPE parameter);
void ParamEst__CovReset(float p0);
void ParamEst__GetSetup(PARAM_EST_SETUP_TYPE *parameters);
void ParamEst__SetSetup(const PARAM_EST_SETUP_TYPE *parameters);
BOOL_TYPE ParamEst__GetSettingFileError(void);
#ifdef MATLAB_MEX_FILE
void ParamEst__SetInputs(float torque_nm, float speed_rpm, float sin_drum_pos, float cos_drum_pos);
#endif

#endif // PARAMEST_H_


