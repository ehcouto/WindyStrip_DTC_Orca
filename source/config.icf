/**
 *  @file		Config.icf       
 *
 *  @brief      This file contains the linker configurations related to MKV3x micro
 *
 *  @details    
 *
 *  @copyright  Copyright 2016-$Date: 2016/03/16 14:15:12EDT $. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
 */
//---------------------------------------------------------------------------------------------------------------------

/*=======================================================================================================*/
/* Memory Map for MKV3x Micro-controller. Only modify the value as per the micro specification
/*-------------------------------------------------------------------------------------------------------*/
define symbol MICRO_KV_PART = 30;
define symbol PLATFORM_2_5 = 1;

if (MICRO_KV_PART == 30)
{
	/*-Memory Regions-*/
	if (PLATFORM_2_5 == 1)
	{	
		//Windy Strip KV30 64 Kb Configuration
		define exported symbol FLASH_TOTAL_SIZE     = 0x10000;		//64k 
		define exported symbol SETTINGFILE_SIZE   	= 0x0;			//TODO:Needs to adjust the number based on settingfile.bin file size
	}
	else
	{
		//Windy Strip KV30 128 Kb Configuration
		define exported symbol FLASH_TOTAL_SIZE 	= 0x20000;		//128k 
		define exported symbol SETTINGFILE_SIZE   	= 0x1800;		//TODO:Needs to adjust the number based on settingfile.bin file size
	}

define exported symbol RAM_TOTAL_SIZE 		   		= 0x4000;		//16k
define exported symbol __RAM_CODE_SIZE              = 0;       
define exported symbol __DATAFLASH_SIZE   		   	= 0xFF;

}
else
{
//Windy Strip KV31 256 Kb Configuration
define exported symbol FLASH_TOTAL_SIZE 		   	= 0x40000;		//256k 
define exported symbol RAM_TOTAL_SIZE 		   		= 0xC000;		//48k
define exported symbol __RAM_CODE_SIZE              = 0x4000;       
define exported symbol __DATAFLASH_SIZE   		   	= 0xFF;
define exported symbol SETTINGFILE_SIZE   	   		= 0x1800;		//TODO:Needs to adjust the number based on settingfile.bin file size
}

/*-Sizes-*/
define symbol __ICFEDIT_size_cstack__ 			= 0x400;
define symbol __ICFEDIT_size_heap__   			= 0x100;



/*------------ End of Memory Map ------------------------------------------------------------------------*/






/*=======================================================================================================*/
/* Mapping the sections - Do not change
/*-------------------------------------------------------------------------------------------------------*/

if (PLATFORM_2_5 == 1)
{
/*-Do not change the size */
define exported symbol IAP_SIZE       						= 0x0600;		//For Nucleus Framework its mandatory to have the IAP

define exported symbol INTERRUPT_TABLE_SIZE					= 0x168;		//Actual interrupt vector size is 0x0168
}
else
{
/*-Do not change the size */
define exported symbol IAP_SIZE       						= 0x0600;		//For Nucleus Framework its mandatory to have the IAP

define exported symbol INTERRUPT_TABLE_SIZE					= 0x410;		//Actual interrupt vector size is 0x0168
}


define exported symbol __ICFEDIT_INTERRUPT_TABLE_start__  	= IAP_SIZE;

define exported symbol __ICFEDIT_region_ROM_start__			= __ICFEDIT_INTERRUPT_TABLE_start__+INTERRUPT_TABLE_SIZE;
define exported symbol __ICFEDIT_region_ROM_end__			= (__ICFEDIT_region_ROM_start__ + FLASH_TOTAL_SIZE - IAP_SIZE - INTERRUPT_TABLE_SIZE - SETTINGFILE_SIZE - 1); 

if (MICRO_KV_PART == 30)
{
//Windy Strip KV30 128 Kb Configuration
define exported symbol __ICFEDIT_region_RAM_start__ 	    = (0x20000000 - (RAM_TOTAL_SIZE/2));
define exported symbol __ICFEDIT_region_RAM_end__   	    = (0x20000000 + ((RAM_TOTAL_SIZE/2) - 1));
}
else
{
//Windy Strip KV31 256 Kb Configuration
define exported symbol __ICFEDIT_region_RAM_start__         = 0x20000000;
define exported symbol __ICFEDIT_region_RAM_end__           = (0x20000000 + (RAM_TOTAL_SIZE * 2 / 3) - 1);
}
define exported symbol __FlashConfig_start__	   	   		= 0x00000400;
define exported symbol __FlashConfig_end__   	   			= 0x0000040f;

define exported symbol __DATAFLASH_start__   				= 0x10000000;
define exported symbol __DATAFLASH_end__ 	   				= (__DATAFLASH_SIZE - 1);

define exported symbol __SettingFile_X_Start__  			= (__ICFEDIT_region_ROM_end__ + 1);

define exported symbol __ICFEDIT_size_stack_bottom__ 		= 0x10;
define exported symbol __ICFEDIT_size_stack_top__        	= 0x10;
define memory mem with size = 4G;

if (MICRO_KV_PART == 30)
{
// SRAM_L for code
//Windy Strip KV30 128 Kb Configuration
define symbol __RAM_func_start__  = __ICFEDIT_region_RAM_end__; 
define symbol __RAM_func_end__    = (__ICFEDIT_region_RAM_end__ + __RAM_CODE_SIZE); 
}
else
{
//Windy Strip KV31 256 Kb Configuration
define symbol __RAM_func_start__  = (__ICFEDIT_region_RAM_start__ - (RAM_TOTAL_SIZE / 3)); 
define symbol __RAM_func_end__    = (__RAM_func_start__ + __RAM_CODE_SIZE - 1); 
}

/*------------ End of Memory Map ------------------------------------------------------------------------*/






/*=======================================================================================================*/
/* RESET Information region - Do not modify
/*-------------------------------------------------------------------------------------------------------*/
define symbol RESETINFO_HEADER_SIZE			 	= 56;
define symbol RESETINFO_HEADER_START         	= __ICFEDIT_region_RAM_start__;
define symbol RESETINFO_HEADER_END           	= RESETINFO_HEADER_START + RESETINFO_HEADER_SIZE;

define symbol RESETINFO_FOOTER_SIZE			 	= 44;
define symbol RESETINFO_FOOTER_START         	= __ICFEDIT_region_RAM_end__ - RESETINFO_FOOTER_SIZE;
define symbol RESETINFO_FOOTER_END           	= __ICFEDIT_region_RAM_end__;

define symbol APPLICATION_RAM_region_start   	= RESETINFO_HEADER_END;
define symbol APPLICATION_RAM_region_end     	= RESETINFO_FOOTER_START;

define region RESETINFO_HEADER_region 			= mem:[from RESETINFO_HEADER_START         to RESETINFO_HEADER_END  ];
define region RESETINFO_FOOTER_region 			= mem:[from RESETINFO_FOOTER_START         to RESETINFO_FOOTER_END  ];

do not initialize  { section .RESET_INFO_HEADER, section .RESET_INFO_FOOTER};

place in RESETINFO_HEADER_region   { section .RESET_INFO_HEADER  };
place in RESETINFO_FOOTER_region   { section .RESET_INFO_FOOTER  };

/*------------ End of RESET Information region ----------------------------------------------------------*/





/*=======================================================================================================*/
/* Memory region allocation
/*-------------------------------------------------------------------------------------------------------*/
define region ROM_region 						= mem:[from __ICFEDIT_region_ROM_start__  to __ICFEDIT_region_ROM_end__];
define region RAM_region   						= mem:[from APPLICATION_RAM_region_start   to APPLICATION_RAM_region_end];
define region RAM_func_region                   = mem:[from __RAM_func_start__ to __RAM_func_end__];
define region FlashConfig_region 				= mem:[from __FlashConfig_start__ to __FlashConfig_end__];


define block CSTACK    with alignment = 8, size = __ICFEDIT_size_cstack__   { };
define block HEAP      with alignment = 8, size = __ICFEDIT_size_heap__     { };
define block STACK_OVERFLOW_SIGNATURE  with alignment = 4, size = 0x10{};
define block STACK_UNDERFLOW_SIGNATURE  with alignment = 4, size = 0x10{};
define block TASKS_STACK    with alignment = 4, fixed order { section TASKS_STACK_SIG1, section TASKS_STACK, section TASKS_STACK_SIG2 };
                                        
define block STACKS                     with alignment = 4, fixed order
                                        {   block STACK_OVERFLOW_SIGNATURE,
                                            block CSTACK,
                                            block STACK_UNDERFLOW_SIGNATURE,
                                            block TASKS_STACK
                                        };

// RAM code 
define block RamCode {section .textrw};

/*------------ End of memory region allocation ---------------------------------------------------------*/






/*=======================================================================================================*/
/* NVData Configuration
/*-------------------------------------------------------------------------------------------------------*/
define exported symbol __DataFlash_Start	   =__DATAFLASH_start__;
define exported symbol __DataFlash_End	       =__DATAFLASH_end__;

define region DATA_FLASH_region = mem:[from __DataFlash_Start to __DataFlash_End];
"DATAFLASH":place in DATA_FLASH_region    
                                    { ro section .dataflash*, section .eeprom };

define block NVDATA_SECTION_HEADER {rw section _header_segment};
define block NVDATA_SECTION_APPLIANCE {rw section _appliance_segment};
define block NVDATA_SECTION_STATISTICS {rw section _statistics_segment};

place at start of   RAM_region      { block NVDATA_SECTION_HEADER,
                                      block NVDATA_SECTION_APPLIANCE,
                                      block NVDATA_SECTION_STATISTICS };

/*------------ End of NVData Configuration ---------------------------------------------------------------*/





/*=======================================================================================================*/
/* Setting file Configuration
/*-------------------------------------------------------------------------------------------------------*/
define exported symbol __SetingFile_Size               	= SETTINGFILE_SIZE;
define exported symbol __SetingFile_Start              = __SettingFile_X_Start__;
define exported symbol __SetingFile_End               	= __SettingFile_X_Start__+SETTINGFILE_SIZE;
define exported symbol __RAM_Start  					= __ICFEDIT_region_RAM_start__;
define exported symbol __RAM_Size						= (__ICFEDIT_region_RAM_end__ - __ICFEDIT_region_RAM_start__);

define region SETTINGFILE_region 						= mem:[from __SettingFile_X_Start__ to (__SettingFile_X_Start__+SETTINGFILE_SIZE-1)];
place at start of SETTINGFILE_region       				{ readonly section .settingfile* };

/*------------ End of Setting file Configuration ---------------------------------------------------------*/





/*=======================================================================================================*/
/* ClassB-Configuration - Do not modify
/*-------------------------------------------------------------------------------------------------------*/
define exported symbol MICRO_FLASH_START 				= __ICFEDIT_region_ROM_start__;
define exported symbol MICRO_FLASH_END   				= __ICFEDIT_region_ROM_end__ - 4;

/* FLASH CRC checksum region on the ROM*/
place at end of ROM_region { ro section .MICRO_CRC_region };

/*------------ End of ClassB Configuration -------------------------------------------------------------*/





/*=======================================================================================================*/
/* IAP (In-Application Programming) configuration for Application project - Do not modify
/*-------------------------------------------------------------------------------------------------------*/
define symbol __NON_MASKABLE_JUMP_INTERRUPT_TABLE_start__ = 0x0000; 

place at address mem:__NON_MASKABLE_JUMP_INTERRUPT_TABLE_start__ { readonly section Non_Maskable_Jump_interrupt_table };


define symbol APPL_BLOCK_1_START 				= __ICFEDIT_region_ROM_start__;
define symbol APPL_BLOCK_1_END   				= __ICFEDIT_region_ROM_end__ - 4;

/* Flash test range symbols are exported and referred in the makefile.bat file and also in the FITMgr_prv.h file */
export symbol APPL_BLOCK_1_START;
export symbol APPL_BLOCK_1_END;

/* This address is shared with the IAP Software */
/* Edit only if the FIT Table start address is different then the below */
define symbol __FIT_APPLICATION_TABLE_start__ 	= __ICFEDIT_INTERRUPT_TABLE_start__ + INTERRUPT_TABLE_SIZE;

/* FLASH CRC checksum region on the ROM*/
/*place at end of ROM_region { ro section .checksum };*/

place at address mem:__FIT_APPLICATION_TABLE_start__ { readonly section FIT_APPL_TABLE_REGION };

/*------------ End of IAP Configuration       ----------------------------------------------------------*/





/*=======================================================================================================*/
/* Placing of the memory
/*-------------------------------------------------------------------------------------------------------*/
initialize by copy 								{ readwrite };
do not initialize  								{ section .noinit, section  STACK_BOTTOM, section  STACK_TOP};
do not initialize  								{ section TASKS_STACK, section TASKS_STACK_SIG1, section TASKS_STACK_SIG2 };

place at address mem:__ICFEDIT_INTERRUPT_TABLE_start__ 	{ readonly section .intvec };

place in FlashConfig_region 							{section FlashConfig};
place in ROM_region   									{ readonly };

place in RAM_region   							{ readwrite};

// The Heap and Stack memory shall be placed at the end of the RAM memory and before the reset signature
// IAP uses the stack memory for code execution and this stack memory shall not be overlap with the data memory used by the application. 
// If the Stack and Heap memory's are placed at the end of the RAM then it will never overwrite the Data memory of the application
place at end of RAM_region         {block HEAP,block STACKS};
place in RAM_func_region                        		{ block RamCode };

 /*------------ End of memory placing       ----------------------------------------------------------*/