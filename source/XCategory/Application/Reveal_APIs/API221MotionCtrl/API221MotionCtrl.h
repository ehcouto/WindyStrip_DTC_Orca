/**
 * @file
 * @brief       Public interface to the API221MotionCtrl module.
 *
 * @details     Refer to the API221MotionCtrl.c source file for more detailed information.
 *
 * @copyright   Copyright 2016-2017 Whirlpool Corporation.  All rights reserved - CONFIDENTIAL.
 */

#ifndef API221MOTIONCTRL_H_
#define API221MOTIONCTRL_H_


#if ((API221_CLIENT_FEATURE == ENABLED) || (API221_SERVER_FEATURE == ENABLED))


//  --- Include Files -------------------------------------------------------------------------------------------------

// -- This Module --
#include "API221MotionCtrl_prm.h"

// -- Other Modules --
#include "ExternalMotorDeclare.h"
#include <limits.h>
#include "Reveal.h"


//=====================================================================================================================
//  --- Public Properties ---------------------------------------------------------------------------------------------
//=====================================================================================================================


// -- Public Constant Declarations --

//! A constant used to identify the API implemented by this module.
#define API221MOTIONCTRL_NUM 221
#define API221MOTIONCTRL_TYPE 1
#define API221MOTIONCTRL_VERSION 1
#define API221MOTIONCTRL_INSTANCES 1

//! Initial value for Synchronization byte that will always accept the data already received.
#define API221_INITIAL_SYNC_TO_ACCEPT_CURRENT UCHAR_MAX


// -- Public Enumerated Constant Declarations --

//! The list of all failure flags supported by API221.
//! These values represent bits of a 32-bit Failure Flags value.
typedef enum API221_FAILURE_FLAGS_ENUM
{
    API221_FF_ANY_ERROR_FOUND       = 0,            //!< Any error found?
    API221_FF_DCBUS_OVER_CURRENT    = 1,            //!< DC bus link over current detected
    API221_FF_DCBUS_OVER_VOLTAGE    = 2,            //!< DC bus link over voltage detected
    API221_FF_DCBUS_UNDER_VOLTAGE   = 3,            //!< DC bus link under voltage detected
    API221_FF_ELECTRONIC_FAILED     = 4,            //!< Electronic drive failure
    API221_FF_INVERTER_OVER_TEMP    = 7,            //!< Module over temperature
    API221_FF_STATOR_OVER_TAMP      = 9,            //!< Stator temperature exceeded the limit and will prevent start for 30 seconds
    API221_FF_LOCKED_ROTOR          = 10,           //!< Rotor is locked according to Class B feedback
    API221_FF_PHASE_LOST            = 11,           //!< Phase lost detected
    API221_FF_MOTOR_OVERHEATING     = 13,           //!< Motor overheating
    API221_FF_MOTOR_OVERLOADED      = 14,           //!< Motor overloaded
    API221_FF_MOTOR_OVER_CURRENT    = 15,           //!< Motor over current detected
    API221_FF_MOTOR_UNDER_CURRENT   = 16,           //!< Motor under current detected
    API221_FF_SPEED_CHECK_FAILED    = 17            //!< Safety speed check for door unlock failed
} API221_FAILURE_FLAGS_TYPE;

//! The list of all status flags supported by API221.
//! These values represent bits of an 8-bit Status Flags value.
typedef enum API221_STATUS_FLAGS_ENUM
{
    API221_STS_ANY_ERROR_FOUND      = 0,            //!< Any error found?
    API221_STS_IS_MOTOR_STOPPED     = 1,            //!< Is motor stopped?
    API221_STS_REACHED_TARGET       = 2,            //!< Target velocity == reference velocity
    API221_STS_IS_IDLE              = 3,            //!< Is the motor idle? If the speed is zero, no error found...
    API221_STS_MOTOR_RUNNING        = 4             //!< Reports motor is running
} API221_STATUS_FLAGS_TYPE;

//! The list of all possible events supported by API221.
//! Any of these events can be generated by any of the motors in the system.
//! To create platform-specific events, define API221_PLATFORM_SPECIFIC_EVENT_LIST in API221MotionCtrl_prm.h.
typedef enum API221_MOTOR_EVENT_ENUM
{
    API221_EVENT_NONE               = 0,            //!< No event has occurred. Used internally by API221
    API221_EVENT_ERROR              = 1,            //!< Error occurred.
    API221_EVENT_STOPPED            = 2,            //!< Motor stopped. (Not for Class B usage)
    API221_EVENT_RAMP_STARTED       = 3,            //!< Motor started a ramp to a new velocity
    API221_EVENT_REACHED_TARGET     = 4,            //!< Motor completed a ramp and reached the target velocity.

#ifdef API221_PLATFORM_SPECIFIC_EVENT_LIST
    API221_PLATFORM_SPECIFIC_EVENT_LIST,
#endif

    API221_EVENT_COUNT
} API221_MOTOR_EVENT_TYPE;


// -- Public Type Declarations --

#if (API221_CLIENT_FEATURE == ENABLED)
    //! A data structure that holds client-side motor events.
    typedef struct API221_EVENT_STRUCT
    {
        API221_MOTOR_EVENT_TYPE Event           : 6;
        API221_CLIENT_MOTOR_INDEX_TYPE Motor    : 2;
    } API221_EVENT_TYPE;
#endif      // #if (API221_CLIENT_FEATURE == ENABLED)


// -- Public Function Type Declarations --

#if (API221_CLIENT_FEATURE == ENABLED)
    //! Function to process a motor activity message.
    typedef void    (*API221_EVENT_MOTOR_HANDLER_TYPE)      (API221_EVENT_TYPE event);

    //! Function to process a motor activity message.
    typedef void    (*API221_FAILURES_HANDLER_TYPE)         (API221_CLIENT_MOTOR_INDEX_TYPE motor, uint32 failures);

    //! Function to process motor status message.
    typedef void    (*API221_MOTOR_STATUS_HANDLER_TYPE)     (API221_CLIENT_MOTOR_INDEX_TYPE motor, uint32 status);

    //! Function to process periodic data status message.
    typedef void    (*API221_PER_DATA_STATUS_HANDLER_TYPE)  (uint16 millisecond_period, uint32* channels_bitmaps, uint8 num_of_motors);
#endif      // #if (API221_CLIENT_FEATURE == ENABLED)


//=====================================================================================================================
//  --- Public Methods ------------------------------------------------------------------------------------------------
//=====================================================================================================================


// Standard module files.
void API221MotionCtrl__Initialize(void);
void API221MotionCtrl__Background(void);
REVEAL_RECIPE_STATUS_TYPE API221MotionCtrl__CommandParser(REVEAL_MSG_TYPE* cmd);
void API221MotionCtrl__FeedbackParser(REVEAL_MSG_TYPE* fbk);

#if (API221_CLIENT_FEATURE == ENABLED)
    // Functions used by the API221_CLIENT_FEATURE
    BOOL_TYPE API221MotionCtrl__AddPeriodicDataChannels(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint32 channels);
    BOOL_TYPE API221MotionCtrl__ClearFailureFlags(API221_CLIENT_MOTOR_INDEX_TYPE client_motor);
    BOOL_TYPE API221MotionCtrl__DeviceMotion(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint8* buffer, uint8 size);
    BOOL_TYPE API221MotionCtrl__DevicePulse(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, EXTERNAL_MOTOR_SIMPLE_COMMAND_TYPE command, EMP_PULSE_PARAM_TYPE* pulse);
    BOOL_TYPE API221MotionCtrl__DeviceRotate(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, EMP_ROTATE_PARAM_TYPE* rotate);
    BOOL_TYPE API221MotionCtrl__DeviceRun(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, sint16 velocity, uint16 acceleration);
    BOOL_TYPE API221MotionCtrl__DeviceStop(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint16 deceleration);
    BOOL_TYPE API221MotionCtrl__DeviceWash(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, EMP_WASH_PARAM_TYPE* wash);
    BOOL_TYPE API221MotionCtrl__GetData(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint8 channel, sint32* data);
    BOOL_TYPE API221MotionCtrl__GetSynchronizedData(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint8 channel, uint8* sync, sint32* data);
    BOOL_TYPE API221MotionCtrl__IsMotorPresentOnBus(API221_CLIENT_MOTOR_INDEX_TYPE client_motor);
    BOOL_TYPE API221MotionCtrl__KeepRunning(API221_CLIENT_MOTOR_INDEX_TYPE client_motor);
    void API221MotionCtrl__RegisterForEvents(API221_EVENT_MOTOR_HANDLER_TYPE event_handler);
    BOOL_TYPE API221MotionCtrl__RemovePeriodicDataChannels(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint32 channels);
    BOOL_TYPE API221MotionCtrl__RequestAnalogData(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint8 channel);
    BOOL_TYPE API221MotionCtrl__RequestFailureFlags(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, API221_FAILURES_HANDLER_TYPE failures_handler);
    BOOL_TYPE API221MotionCtrl__RequestPeriodicDataStatus(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, API221_PER_DATA_STATUS_HANDLER_TYPE per_data_status_handler);
    BOOL_TYPE API221MotionCtrl__RequestStatus(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, API221_MOTOR_STATUS_HANDLER_TYPE motor_status_handler);
    BOOL_TYPE API221MotionCtrl__SetDataPublicationPeriod(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint16 milliseconds);
    void API221MotionCtrl__SynchronizeData(API221_CLIENT_MOTOR_INDEX_TYPE client_motor, uint8 channel, uint8* sync);
    void API221MotionCtrl__UnregisterForEvents(API221_EVENT_MOTOR_HANDLER_TYPE event_handler);
#endif      // #if (API221_CLIENT_FEATURE == ENABLED)

#if (API221_SERVER_FEATURE == ENABLED)
    BOOL_TYPE API221MotionCtrl__PostEvent(uint8 server_motor, API221_MOTOR_EVENT_TYPE event);
#endif      // #if (API221_SERVER_FEATURE == ENABLED)


#endif      // #if ((API221_CLIENT_FEATURE == ENABLED) || (API221_SERVER_FEATURE == ENABLED))
#endif      // API221MOTIONCTRL_H_
