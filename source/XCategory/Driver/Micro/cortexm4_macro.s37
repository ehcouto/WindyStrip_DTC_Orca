;/**
; *  @file
; *  @brief      consists of API defination to access the Cortex-M4F4 core.
; *
; *  $Header: cortexm4_macro.s37 1.1 2015/06/30 16:53:03EDT Natak Rahul (NATAKRB) Exp  $
; *
; *  @copyright  Copyright 2012-$Date: 2015/06/30 16:53:03EDT $. Whirlpool Corporation. All rights reserved - CONFIDENTIAL
; */
;//---------------------------------------------------------------------------------------------------------------------
  
  SECTION .bss:DATA
  PUBLIC 

  SECTION .text:CODE(2)
  
  EXPORT __MSR_MSP
  ; Exported functions
  EXPORT __WFI
  EXPORT __WFE
  EXPORT __SEV
  EXPORT __ISB
  EXPORT __DSB
  EXPORT __DMB
  EXPORT __SVC
  EXPORT __MSR_CONTROL
  EXPORT __MRS_PSP
  EXPORT __MSR_PSP
  EXPORT __MRS_MSP
  EXPORT __RESETPRIMASK
  EXPORT __REV_HalfWord
  EXPORT __REV_Word  
  EXPORT __StartupRegisterTest
  EXPORT __RunRegisterTest
  
;*******************************************************************************
; Function Name  : __WFI
; Description    : Assembler function for the WFI instruction.
; Input          : None
; Return         : None
;*******************************************************************************
__WFI 
 
    WFI
    BX r14

;*******************************************************************************
; Function Name  : __WFE
; Description    : Assembler function for the WFE instruction.
; Input          : None
; Return         : None
;*******************************************************************************
__WFE

    WFE
    BX r14

;*******************************************************************************
; Function Name  : __SEV
; Description    : Assembler function for the SEV instruction.
; Input          : None
; Return         : None
;*******************************************************************************
__SEV

    SEV
    BX r14

;*******************************************************************************
; Function Name  : __ISB
; Description    : Assembler function for the ISB instruction.
; Input          : None
; Return         : None
;*******************************************************************************
__ISB

    ISB
    BX r14

;*******************************************************************************
; Function Name  : __DSB
; Description    : Assembler function for the DSB instruction.
; Input          : None
; Return         : None
;*******************************************************************************
__DSB

    DSB
    BX r14

;*******************************************************************************
; Function Name  : __DMB
; Description    : Assembler function for the DMB instruction.
; Input          : None
; Return         : None
;*******************************************************************************
__DMB

    DMB
    BX r14

;*******************************************************************************
; Function Name  : __SVC
; Description    : Assembler function for the SVC instruction.
; Input          : None
; Return         : None
;*******************************************************************************
__SVC

    SVC 0x01
    BX r14

;*******************************************************************************
; Function Name  : __MSR_CONTROL
; Description    : Assembler function for the MSR instruction.
; Input          : - r0 : Cortex-M0 CONTROL register new value.  
; Return         : None
;*******************************************************************************
__MSR_CONTROL

  MSR CONTROL, r0
  ISB
  BX r14

;*******************************************************************************
; Function Name  : __MRS_PSP
; Description    : Assembler function for the MRS instruction.
; Input          : None
; Return         : - r0 : Process Stack value.
;*******************************************************************************
__MRS_PSP

  MRS r0, PSP
  BX r14

;*******************************************************************************
; Function Name  : __MSR_PSP
; Description    : Assembler function for the MSR instruction.
; Input          : - r0 : Process Stack new value.  
; Return         : None
;*******************************************************************************
__MSR_PSP 
 
    MSR PSP, r0 ; set Process Stack value
    BX r14

;*******************************************************************************
; Function Name  : __MRS_MSP
; Description    : Assembler function for the MRS instruction.
; Input          : None
; Return         : - r0 : Main Stack value.
;*******************************************************************************
__MRS_MSP

  MRS r0, MSP
  BX r14

;*******************************************************************************
; Function Name  : __MSR_MSP
; Description    : Assembler function for the MSR instruction.
; Input          : - r0 : Main Stack new value.  
; Return         : None
;*******************************************************************************
__MSR_MSP 
 
    MSR MSP, r0 ; set Main Stack value
    BX r14
            
;*******************************************************************************
; Function Name  : __RESETPRIMASK
; Description    : Assembler function to reset the PRIMASK.
; Input          : None 
; Return         : None
;*******************************************************************************
__RESETPRIMASK

  CPSIE i
  BX r14

;*******************************************************************************
; Function Name  : __REV_HalfWord
; Description    : Reverses the byte order in HalfWord(16-bit) input variable.
; Input          : - r0 : specifies the input variable
; Return         : - r0 : holds tve variable value after byte reversing.
;*******************************************************************************
__REV_HalfWord 
 
  REV16 r0, r0
  BX r14

;*******************************************************************************
; Function Name  : __REV_Word
; Description    : Reverses the byte order in Word(32-bit) input variable.
; Input          : - r0 : specifies the input variable
; Return         : - r0 : holds tve variable value after byte reversing.
;*******************************************************************************
__REV_Word 
 
  REV r0, r0
  BX r14
  

;*******************************************************************************
; Function Name  : StartupRegisterTest
; Description    : Full Cortex-M0 CPU test at start-up
;                  Note: when possible, BRANCH are 16-bit only (depending on
;                  relative offset to final BL instruction)
; Input          : None.
; Output         : Branch directly to a Fail Safe routine in case of failure
; Return         : TRUE (=1)
;*******************************************************************************/
__StartupRegisterTest:
	;save the register value to be tested
	PUSH {R1-R12, LR}
    MOVS R0, #0x00000000      		; Set Z(ero) Flag
    BNE srt_fail                  	; Fails if Z clear
    SUBS R0,#1                		; Set N(egative) Flag
    BPL srt_fail                  	; Fails if N clear
    ADDS R0,#2                		; Set C(arry) Flag and do not set Z
    BCC srt_fail                	; Fails if C clear
    LDR.W R0,=0x80000000			; Prepares Overflow test
    ADDS R0, R0, R0           		; Set V(overflow) Flag
    BVC srt_fail         			; Fails if V clear
	MOVS R0, #0xFFFFFFFF      		; Prepares Saturation test
	USAT R1,#10,R0            		; Set Q(saturation) Flag
    MRS R0, APSR              		; Get Status register
	CMP R0, #0xB8000000       		; Verifies that N=C=V=Q=1
    BNE srt_fail         			; Fails if Q+N+C=V clear
    
    srt_pass:
    BL __RunRegisterTest
    ;restore the register value
	POP {R1-R12, LR}
    BX LR               ; return to the caller

    srt_fail:
    ;restore the register value
	POP {R1-R12, LR}
	
	MOVS R0, #0x0
	BX LR               ; return to the caller
        
;*******************************************************************************
; Function Name  : RunRegisterTest
; Description    : Full Cortex-M0 CPU test during run-time
;                  Note: when possible, BRANCH are 16-bit only (depending on
;                  relative offset to final BL instruction)
; Input          : None.
; Output         : Branch directly to a Fail Safe routine in case of failure
; Return         : TRUE (=1) if test is ok
;*******************************************************************************/
__RunRegisterTest:

	;save the register value to be tested
	PUSH {R1-R12, LR}
    
	MOVS R0,#0xAAAAAAAA
	CMP R0, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R0, #0x55555555
	CMP R0, #0x55555555
	BNE.W rrt_fail

	; Link register (Register R14)
	MOVS R0, R14              ; Contains the return address and must be saved
	MOVS R14, #0xAAAAAAAA
	CMP R14, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R14, #0x55555555
	CMP R14, #0x55555555
	BNE.W rrt_fail
	MOVS R14, R0
	MOVS R0, #0x0             ; For ramp test

	; Register R1
	MOVS R1, #0xAAAAAAAA
	CMP R1, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R1, #0x55555555
	CMP R1, #0x55555555
	BNE.W rrt_fail
	MOVS R1, #0x01            ; For ramp test

	; Register R2
	MOVS R2, #0xAAAAAAAA
	CMP R2, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R2, #0x55555555
	CMP R2, #0x55555555
	BNE.W rrt_fail
	MOVS R2, #0x02            ; For ramp test
	
	; Register R3
	MOVS R3, #0xAAAAAAAA
	CMP R3, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R3, #0x55555555
	CMP R3, #0x55555555
	BNE.W rrt_fail
	MOVS R3, #0x03            ; For ramp test
	
	; Register R4
	MOVS R4, #0xAAAAAAAA
	CMP R4, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R4, #0x55555555
	CMP R4, #0x55555555
	BNE.W rrt_fail
	MOVS R4, #0x04            ; For ramp test
	
	; Register R5
	MOVS R5, #0xAAAAAAAA
	CMP R5, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R5, #0x55555555
	CMP R5, #0x55555555
	BNE.W rrt_fail
	MOVS R5, #0x05            ; For ramp test
	
	; Register R6
	MOVS R6, #0xAAAAAAAA
	CMP R6, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R6, #0x55555555
	CMP R6, #0x55555555
	BNE.W rrt_fail
	MOVS R6, #0x06            ; For ramp test
	
	; Register R7
	MOVS R7, #0xAAAAAAAA
	CMP R7, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R7, #0x55555555
	CMP R7, #0x55555555
	BNE.W rrt_fail
	MOVS R7, #0x07            ; For ramp test
	
	; Register R8
	MOVS R8, #0xAAAAAAAA
	CMP R8, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R8, #0x55555555
	CMP R8, #0x55555555
	BNE.W rrt_fail
	MOVS R8, #0x08            ; For ramp test
	
	; Register R9
	MOVS R9, #0xAAAAAAAA
	CMP R9, #0xAAAAAAAA
	BNE.W rrt_fail
	MOVS R9, #0x55555555
	CMP R9, #0x55555555
	BNE.W rrt_fail
	MOVS R9, #0x09            ; For ramp test
	
	; Register R10
	MOVS R10, #0xAAAAAAAA
	CMP R10, #0xAAAAAAAA
	BNE rrt_fail
	MOVS R10, #0x55555555
	CMP R10, #0x55555555
	BNE rrt_fail
	MOVS R10, #0x0A           ; For ramp test
	
	; Register R11
	MOVS R11, #0xAAAAAAAA
	CMP R11, #0xAAAAAAAA
	BNE rrt_fail
	MOVS R11, #0x55555555
	CMP R11, #0x55555555
	BNE rrt_fail
	MOVS R11, #0x0B           ; For ramp test
	
	; Register R12
	MOVS R12, #0xAAAAAAAA
	CMP R12, #0xAAAAAAAA
	BNE rrt_fail
	MOVS R12, #0x55555555
	CMP R12, #0x55555555
	BNE rrt_fail
	MOVS R12, #0x0C           ; For ramp test

    ; Ramp pattern verification
	CMP R0, #0x00
	BNE rrt_fail
	CMP R1, #0x01
	BNE rrt_fail
	CMP R2, #0x02
	BNE rrt_fail
	CMP R3, #0x03
	BNE rrt_fail
	CMP R4, #0x04
	BNE rrt_fail
	CMP R5, #0x05
	BNE rrt_fail
	CMP R6, #0x06
	BNE rrt_fail
	CMP R7, #0x07
	BNE rrt_fail
	CMP R8, #0x08
	BNE rrt_fail
	CMP R9, #0x09
	BNE rrt_fail
	CMP R10, #0x0A
	BNE rrt_fail
	CMP R11, #0x0B
	BNE rrt_fail
	CMP R12, #0x0C
	BNE rrt_fail

	; Process Stack pointer (banked Register R13)
	MRS R0, PSP         ; Save process stack value
	MOV R1, #0xAAA8     ; Test is different (PSP is word aligned)
	MOVT R1, #0xAAAA    ; Load in two times and 2 least significant bits cleared
	MSR PSP, R1         ; load process stack value
	MRS R2, PSP         ; Get back process stack value
	CMP R2, R1          ; Verify value
	BNE rrt_fail
	MOV R1, #0x5554     ; Test is different (PSP is word aligned)
	MOVT R1, #0x5555    ; Load in two times and 2 least significant bits cleared
	MSR PSP, R1         ; load process stack value
	MRS R2, PSP         ; Get back process stack value
	CMP R2, R1          ; Verify value
	BNE rrt_fail
	MSR PSP, R0         ; Restore process stack value
	
	; Stack pointer (Register R13)
	MOVS R12, R13       ; Contains the return address and must be saved
	MOV R13, #0xAAA8    ; Test is different (SP is word aligned)
	MOVT R13, #0xAAAA   ; Load in two times and 2 least significant bits cleared
	MOV R1, #0xAAA8     ; It must be loaded half-word by half-word
	MOVT R1, #0xAAAA    ; and compared with another register
	CMP R13, R1
	BNE rrt_fail
	MOV R13, #0x5554
	MOVT R13, #0x5555
	MOV R1, #0x5554
	MOVT R1, #0x5555
	CMP R13, R1
	BNE rrt_fail
	MOVS R13, R12

    ;restore the register value
	POP {R1-R12, LR}

    rrt_pass:	MOVS R0, #0x1       
    		BX LR  				; return to the caller      

    rrt_fail:	MOVS R0, #0x0       
    		BX LR  				; return to the caller	


 END